<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="ScreenGui" referent="RBX4B7E07270195480B98B3C8C5CFA162EA">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoLocalize">false</bool>
			<int name="DisplayOrder">0</int>
			<bool name="Enabled">true</bool>
			<bool name="IgnoreGuiInset">false</bool>
			<string name="Name">Dex_Explorer</string>
			<bool name="ResetOnSpawn">true</bool>
			<Ref name="RootLocalizationTable">null</Ref>
			<int64 name="SourceAssetId">5482100934</int64>
			<BinaryString name="Tags"></BinaryString>
			<token name="ZIndexBehavior">0</token>
		</Properties>
		<Item class="Frame" referent="RBXA7484B70490E4D57A03B568F04B422F7">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.145098045</R>
					<G>0.145098045</G>
					<B>0.164705887</B>
				</Color3>
				<float name="BackgroundTransparency">0.100000001</float>
				<Color3 name="BorderColor3">
					<R>0.145098045</R>
					<G>0.145098045</G>
					<B>0.164705887</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">PropertiesFrame</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>0</XO>
					<YS>0.5</YS>
					<YO>36</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>300</XO>
					<YS>0.5</YS>
					<YO>-36</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">true</bool>
				<int name="ZIndex">1</int>
			</Properties>
			<Item class="Frame" referent="RBXE98AB3B0517D4C11A777178809F14E2C">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.0784313753</R>
						<G>0.0784313753</G>
						<B>0.0784313753</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.58431375</R>
						<G>0.58431375</G>
						<B>0.58431375</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Header</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>-36</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>36</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBXF06DB2E439DC478DA694A143408AD90F">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.639215708</R>
							<G>0.635294139</G>
							<B>0.647058845</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">TextLabel</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>4</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>-4</XO>
							<YS>0.5</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Properties</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextBox" referent="RBXB0AE1C28D05346F78E33D68C9636166D">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.639215708</R>
							<G>0.635294139</G>
							<B>0.647058845</B>
						</Color3>
						<float name="BackgroundTransparency">0.800000012</float>
						<Color3 name="BorderColor3">
							<R>0.909803987</R>
							<G>0.909803987</G>
							<B>0.909803987</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClearTextOnFocus">true</bool>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">16</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="MultiLine">false</bool>
						<string name="Name">TextBox</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<Color3 name="PlaceholderColor3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<string name="PlaceholderText">Search Properties</string>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>4</XO>
							<YS>0.5</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<bool name="ShowNativeInput">true</bool>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>-8</XO>
							<YS>0.5</YS>
							<YO>-3</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextEditable">true</bool>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UICorner" referent="RBXED828FBF275A4A538EAF5D585467B176">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>5</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBXB87623AC1FF9485A8142B2655BDE900A">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Properties</string>
					<string name="ScriptGuid">{7E51670C-B476-47E2-AE6D-C1FC4A2A16DD}</string>
					<ProtectedString name="Source"><![CDATA[--[[
	
Change log:

09/18
	Fixed checkbox mouseover sprite
	Encapsulated checkbox creation into separate method
	Fixed another checkbox issue

09/15
	Invalid input is ignored instead of setting to default of that data type
	Consolidated control methods and simplified them
	All input goes through ToValue method
	Fixed position of BrickColor palette
	Made DropDown appear above row if it would otherwise exceed the page height
	Cleaned up stylesheets

09/14
	Made properties window scroll when mouse wheel scrolled
	Object/Instance and Color3 data types handled properly
	Multiple BrickColor controls interfering with each other fixed
	Added support for Content data type
	
--]]

wait(0.2)
local math_floor = math.floor
local math_ceil = math.ceil
local math_max = math.max
local string_len = string.len
local string_sub = string.sub
local string_gsub = string.gsub
local string_split = string.split
local string_format = string.format
local string_find = string.find
local string_lower = string.lower
local table_concat = table.concat
local table_insert = table.insert
local table_sort = table.sort
local Instance_new = Instance.new
local Color3_fromRGB = Color3.fromRGB
local Color3_new = Color3.new
local UDim2_new = UDim2.new
local Vector3_new = Vector3.new
local Vector2_new = Vector2.new
local NumberRange_new = NumberRange.new
local BrickColor_palette = BrickColor.palette

local Gui = script.Parent.Parent
local PropertiesFrame = Gui:WaitForChild("PropertiesFrame")
local ExplorerFrame = Gui:WaitForChild("ExplorerPanel")
print = ExplorerFrame:WaitForChild("GetPrint"):Invoke()


-- Services
local Teams = game:GetService("Teams")
local Workspace = game:GetService("Workspace")
local Debris = game:GetService("Debris")
local ContentProvider = game:GetService("ContentProvider")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Functions
function httpGet(url)
	return game:HttpGet(url,true)
end

-- RbxApi Stuff

local apiUrl = "http://anaminus.github.io/rbx/json/api/latest.json"
local maxChunkSize = 100 * 1000
local ApiJson
if script:FindFirstChild("RawApiJson") then
	ApiJson = script.RawApiJson
else
	ApiJson = ""
end

function getLocalApiJson()
	print(ApiJson)
	local usels = false
	local s = pcall(function() if ApiJson.Source ~= "" then usels = true end end)
	if usels then
		return loadstring(ApiJson.Source)()()
	else
		return require(ApiJson)()
	end
end

function getCurrentApiJson()
	local jsonStr = nil
	if readfile and getelysianpath then
		if readfile(getelysianpath().."Xpl0rerApi.txt") then
			print("Api found in folder!")
			jsonStr = readfile(getelysianpath().."Xpl0rerApi.txt")
			return jsonStr
		end
	end
	local success
	if not SetGlobal then
		success = pcall(function()
			jsonStr = httpGet(apiUrl)
			print("Fetched json successfully")
		end)
	end
	if success then
		print("Returning json")
		--print(jsonStr:sub(1,500))
		return jsonStr
	else
		print("Error fetching json: " .. tostring(err))
		print("Falling back to local copy")
		return getLocalApiJson()
	end
end

function splitStringIntoChunks(jsonStr)
	-- Splits up a string into a table with a given size
	local t = {}
	for i = 1, math.ceil(string.len(jsonStr)/maxChunkSize) do
		local str = jsonStr:sub((i-1)*maxChunkSize+1, i*maxChunkSize)
		table.insert(t, str)
	end
	return t
end

local jsonToParse = getCurrentApiJson()
local apiChunks = splitStringIntoChunks(jsonToParse)

function getRbxApi()
--[[
	Api.Classes
	Api.Enums
	Api.GetProperties(className)
	Api.IsEnum(valueType)
--]]

	-- Services
	local HttpService = game:GetService("HttpService")
	local ServerStorage = game:GetService("ServerStorage")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	-- Remotes
	--local Remotes = ReplicatedStorage:WaitForChild("OnlineStudio"):WaitForChild("Remotes")
	--local GetApiJsonFunction = Remotes:WaitForChild("GetApiJson")

	-- Functions
	local JsonDecode = function(s) return HttpService:JSONDecode(s) end

	local function GetApiRemoteFunction(index)
		if (apiChunks[index]) then 
			return apiChunks[index], #apiChunks
		else
			print("Bad index for GetApiJson")
			return nil
		end
	end

	local function getApiJson()
		local apiTable = {}
		local firstPage, pageCount = GetApiRemoteFunction(1)
		table.insert(apiTable, firstPage)
		for i = 2, pageCount do
			--print("Fetching API page # " .. tostring(i))
			local result = GetApiRemoteFunction(i)
			table.insert(apiTable, result)
		end
		return table.concat(apiTable)
	end

	local json = getApiJson()
	local apiDump =  JsonDecode(json)

	local Classes = {}
	local Enums = {}

	local function sortAlphabetic(t, property)
		table.sort(t, 
			function(x,y) return x[property] < y[property]
			end)
	end

	local function isEnum(name)
		return Enums[name] ~= nil
	end

	local function getProperties(className)
		local class = Classes[className]
		local properties = {}

		if not class then return properties end

		while class do
			for _,property in pairs(class.Properties) do
				table.insert(properties, property)
			end
			class = Classes[class.Superclass]
		end

		sortAlphabetic(properties, "Name")

		return properties
	end

	for _,item in pairs(apiDump) do
		local itemType = item.type
		-- Classes --
		if (itemType == 'Class') then
			Classes[item.Name] = item
			item.Properties = {}
			item.Functions = {}
			item.YieldFunctions = {}
			item.Events = {}
			item.Callbacks = {}
			-- Members --
		elseif (itemType == 'Property') then
			table.insert(Classes[item.Class].Properties, item)
		elseif (itemType == 'Function') then
			table.insert(Classes[item.Class].Functions, item)
		elseif (itemType == 'YieldFunction') then
			table.insert(Classes[item.Class].YieldFunctions, item)
		elseif (itemType == 'Event') then
			table.insert(Classes[item.Class].Events, item)
		elseif (itemType == 'Callback') then
			table.insert(Classes[item.Class].Callbacks, item)
			-- Enums --
		elseif (itemType == 'Enum') then
			Enums[item.Name] = item
			item.EnumItems = {}
		elseif (itemType == 'EnumItem') then
			Enums[item.Enum].EnumItems[item.Name] = item
		end
	end

	return {
		Classes = Classes;
		Enums = Enums;
		GetProperties = getProperties;
		IsEnum = isEnum;
	}
end

-- Modules
local Permissions = {CanEdit = true}
local RbxApi = getRbxApi()

--[[
	RbxApi.Classes
	RbxApi.Enums
	RbxApi.GetProperties(className)
	RbxApi.IsEnum(valueType)
--]]

-- Styles

local function CreateColor3(r, g, b) return Color3.new(r/255,g/255,b/255) end

local Styles = {
	Font = Enum.Font.Arial,
	Margin = 5,
	Black = Color3_fromRGB(0,0,5),
	Black2 = Color3_fromRGB(24,24,29),
	White = Color3_fromRGB(244,244,249),
	White2 = Color3_fromRGB(200,200,205),
	Hover = Color3_fromRGB(2,128,149),
	Hover2 = Color3_fromRGB(5,102,146)
}

local Row = {
	Font = Styles.Font,
	FontSize = Enum.FontSize.Size12,
	TextXAlignment = Enum.TextXAlignment.Left,
	TextColor = Styles.White,
	TextColorOver = Styles.White2,
	TextLockedColor = Color3_fromRGB(155, 155, 160),
	Height = 24,
	BorderColor = Color3_fromRGB(54, 54, 55),
	BackgroundColor = Styles.Black2,
	BackgroundColorAlternate = Color3_fromRGB(32, 32, 37),
	BackgroundColorMouseover = Color3_fromRGB(40, 40, 45),
	TitleMarginLeft = 15
}

local DropDown = {
	Font = Styles.Font,
	FontSize = Enum.FontSize.Size14,
	TextColor = Color3_fromRGB(255, 255, 255),
	TextColorOver = Styles.White2,
	TextXAlignment = Enum.TextXAlignment.Left,
	Height = 16,
	BackColor = Styles.Black2,
	BackColorOver = Styles.Hover2,
	BorderColor = Color3_fromRGB(45, 45, 50),
	BorderSizePixel = 2,
	ArrowColor = Color3_fromRGB(80, 80, 83),
	ArrowColorOver = Styles.Hover
}

local BrickColors = {
	BoxSize = 13,
	BorderSizePixel = 1,
	BorderColor = Color3_fromRGB(53, 53, 55),
	FrameColor = Color3_fromRGB(53, 53, 55),
	Size = 20,
	Padding = 4,
	ColorsPerRow = 8,
	OuterBorder = 1,
	OuterBorderColor = Styles.Black
}

wait(1)

local bindGetSelection = ExplorerFrame.GetSelection
local bindSelectionChanged = ExplorerFrame.SelectionChanged
local bindGetApi = PropertiesFrame.GetApi
local bindGetAwait = PropertiesFrame.GetAwaiting
local bindSetAwait = PropertiesFrame.SetAwaiting

local ContentUrl = ContentProvider.BaseUrl .. "asset/?id="

local SettingsRemote = Gui:WaitForChild("SettingsPanel"):WaitForChild("GetSetting")

local propertiesSearch = PropertiesFrame.Header.TextBox

local AwaitingObjectValue = false
local AwaitingObjectObj
local AwaitingObjectProp

function searchingProperties()
	if propertiesSearch.Text ~= "" then
		return true
	end
	return false
end

local function GetSelection()
	local selection = bindGetSelection:Invoke()
	if #selection == 0 then
		return nil
	else
		return selection
	end 
end

-- Number

local function Round(number, decimalPlaces)
	return tonumber(string.format("%." .. (decimalPlaces or 0) .. "f", number))
end

-- Strings

local function Split(str, delimiter)
	local start = 1
	local t = {}
	while true do
		local pos = string.find (str, delimiter, start, true)
		if not pos then
			break
		end
		table.insert (t, string.sub (str, start, pos - 1))
		start = pos + string.len (delimiter)
	end
	table.insert (t, string.sub (str, start))
	return t
end

-- Data Type Handling

local function ToString(value, type)
	if type == "float" then
		return tostring(Round(value,2))
	elseif type == "Content" then
		if string.find(value,"/asset") then
			local match = string.find(value, "=") + 1
			local id = string.sub(value, match)
			return id
		else
			return tostring(value)
		end
	elseif type == "Vector2" then
		local x = value.x
		local y = value.y
		return string.format("%g, %g", x,y)
	elseif type == "Vector3" then
		local x = value.x
		local y = value.y
		local z = value.z
		return string.format("%g, %g, %g", x,y,z)
	elseif type == "Color3" then
		local r = value.r
		local g = value.g
		local b = value.b
		return string.format("%d, %d, %d", r*255,g*255,b*255)
	elseif type == "UDim2" then
		local xScale = value.X.Scale
		local xOffset = value.X.Offset
		local yScale = value.Y.Scale
		local yOffset = value.Y.Offset
		return string.format("{%d, %d}, {%d, %d}", xScale, xOffset, yScale, yOffset)
	else
		return tostring(value)
	end
end

local function ToValue(value,type)
	if type == "Vector2" then
		local list = Split(value,",")
		if #list < 2 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		return Vector2.new(x,y)
	elseif type == "Vector3" then
		local list = Split(value,",")
		if #list < 3 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		local z = tonumber(list[3]) or 0
		return Vector3.new(x,y,z)
	elseif type == "Color3" then
		local list = Split(value,",")
		if #list < 3 then return nil end
		local r = tonumber(list[1]) or 0
		local g = tonumber(list[2]) or 0
		local b = tonumber(list[3]) or 0
		return Color3.new(r/255,g/255, b/255)
	elseif type == "UDim2" then
		local list = Split(string.gsub(string.gsub(value, "{", ""),"}",""),",")
		if #list < 4 then return nil end
		local xScale = tonumber(list[1]) or 0
		local xOffset = tonumber(list[2]) or 0
		local yScale = tonumber(list[3]) or 0
		local yOffset = tonumber(list[4]) or 0
		return UDim2.new(xScale, xOffset, yScale, yOffset)
	elseif type == "Content" then
		if tonumber(value) ~= nil then
			value = ContentUrl .. value
		end
		return value
	elseif type == "float" or type == "int" or type == "double" then
		return tonumber(value)
	elseif type == "string" then
		return value
	elseif type == "NumberRange" then
		local list = Split(value,",")
		if #list == 1 then
			if tonumber(list[1]) == nil then return nil end
			local newVal = tonumber(list[1]) or 0
			return NumberRange.new(newVal)
		end
		if #list < 2 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		return NumberRange.new(x,y)
	else
		return nil
	end
end


-- Tables

local function CopyTable(T)
	local t2 = {}
	for k,v in pairs(T) do
		t2[k] = v
	end
	return t2
end

local function SortTable(T)
	table.sort(T, 
		function(x,y) return x.Name < y.Name
		end)
end

-- Spritesheet
local Sprite = {
	Width = 13;
	Height = 13;
}

local Spritesheet = {
	Image = "http://www.roblox.com/asset/?id=128896947";
	Height = 256;
	Width = 256;
}

local Images = {
	"unchecked",
	"checked",
	"unchecked_over",
	"checked_over",
	"unchecked_disabled",
	"checked_disabled"
}

local function SpritePosition(spriteName)
	local x = 0
	local y = 0
	for i,v in pairs(Images) do
		if (v == spriteName) then
			return {x, y}
		end
		x = x + Sprite.Height
		if (x + Sprite.Width) > Spritesheet.Width then
			x = 0
			y = y + Sprite.Height
		end
	end
end

local function GetCheckboxImageName(checked, readOnly, mouseover)
	if checked then
		if readOnly then
			return "checked_disabled"
		elseif mouseover then
			return "checked_over"
		else
			return "checked"
		end
	else
		if readOnly then
			return "unchecked_disabled"
		elseif mouseover then
			return "unchecked_over"
		else
			return "unchecked"
		end
	end
end

local MAP_ID = 418720155

-- Gui Controls --

---- IconMap ----
-- Image size: 256px x 256px
-- Icon size: 16px x 16px
-- Padding between each icon: 2px
-- Padding around image edge: 1px
-- Total icons: 14 x 14 (196)
local Icon do
	local iconMap = 'http://www.roblox.com/asset/?id=' .. MAP_ID
	game:GetService('ContentProvider'):Preload(iconMap)
	local iconDehash do
		-- 14 x 14, 0-based input, 0-based output
		local f=math.floor
		function iconDehash(h)
			return f(h/14%14),f(h%14)
		end
	end

	function Icon(IconFrame,index)
		local row,col = iconDehash(index)
		local mapSize = Vector2.new(256,256)
		local pad,border = 2,1
		local iconSize = 16

		local class = 'Frame'
		if type(IconFrame) == 'string' then
			class = IconFrame
			IconFrame = nil
		end

		if not IconFrame then
			IconFrame = Create(class,{
				Name = "Icon";
				BackgroundTransparency = 1;
				ClipsDescendants = true;
				Create('ImageLabel',{
					Name = "IconMap";
					Active = false;
					BackgroundTransparency = 1;
					Image = iconMap;
					Size = UDim2.new(mapSize.x/iconSize,0,mapSize.y/iconSize,0);
				});
			})
		end

		IconFrame.IconMap.Position = UDim2.new(-col - (pad*(col+1) + border)/iconSize,0,-row - (pad*(row+1) + border)/iconSize,0)
		return IconFrame
	end
end


local function CreateCell()
	local tableCell = Instance.new("Frame")
	tableCell.Size = UDim2.new(0.5, -1, 1, 0)
	tableCell.BackgroundColor3 = Row.BackgroundColor
	tableCell.BorderColor3 = Row.BorderColor
	return tableCell
end

local function CreateLabel(readOnly)
	local label = Instance.new("TextLabel")
	label.Font = Row.Font
	label.FontSize = Row.FontSize
	label.TextXAlignment = Row.TextXAlignment
	label.BackgroundTransparency = 1

	if readOnly then
		label.TextColor3 = Row.TextLockedColor
	else
		label.TextColor3 = Row.TextColor
	end
	return label
end

local function CreateTextButton(readOnly, onClick)
	local button = Instance.new("TextButton")
	button.Font = Row.Font
	button.FontSize = Row.FontSize
	button.TextXAlignment = Row.TextXAlignment
	button.BackgroundTransparency = 1
	if readOnly then
		button.TextColor3 = Row.TextLockedColor
	else
		button.TextColor3 = Row.TextColor
		button.MouseButton1Click:connect(function()
			onClick()
		end)
	end
	return button
end

local function CreateObject(readOnly)
	local button = Instance.new("TextButton")
	button.Font = Row.Font
	button.FontSize = Row.FontSize
	button.TextXAlignment = Row.TextXAlignment
	button.BackgroundTransparency = 1
	if readOnly then
		button.TextColor3 = Row.TextLockedColor
	else
		button.TextColor3 = Row.TextColor
	end
	local cancel = Create(Icon('ImageButton',177),{
		Name = "Cancel";
		Visible = false;
		Position = UDim2.new(1,-20,0,0);
		Size = UDim2.new(0,20,0,20);
		Parent = button;
	})
	return button
end

local function CreateTextBox(readOnly)
	if readOnly then
		local box = CreateLabel(readOnly)
		return box
	else
		local box = Instance.new("TextBox")
		if not SettingsRemote:Invoke("ClearProps") then
			box.ClearTextOnFocus = false
		end
		box.Font = Row.Font
		box.FontSize = Row.FontSize
		box.TextXAlignment = Row.TextXAlignment
		box.BackgroundTransparency = 1
		box.TextColor3 = Row.TextColor
		return box
	end
end

local function CreateDropDownItem(text, onClick)
	local button = Instance.new("TextButton")
	button.Font = DropDown.Font
	button.FontSize = DropDown.FontSize
	button.TextColor3 = DropDown.TextColor
	button.TextXAlignment = DropDown.TextXAlignment
	button.BackgroundColor3 = DropDown.BackColor
	button.AutoButtonColor = false
	button.BorderSizePixel = 0
	button.Active = true
	button.Text = text

	button.MouseEnter:connect(function()
		button.TextColor3 = DropDown.TextColorOver
		button.BackgroundColor3 = DropDown.BackColorOver
	end)
	button.MouseLeave:connect(function()
		button.TextColor3 = DropDown.TextColor
		button.BackgroundColor3 = DropDown.BackColor
	end)
	button.MouseButton1Click:connect(function()
		onClick(text)
	end)	
	return button
end

local function CreateDropDown(choices, currentChoice, readOnly, onClick)
	local frame = Instance.new("Frame")	
	frame.Name = "DropDown"
	frame.Size = UDim2.new(1, 0, 1, 0)
	frame.BackgroundTransparency = 1
	frame.Active = true

	local menu = nil
	local arrow = nil
	local expanded = false
	local margin = DropDown.BorderSizePixel;

	local button = Instance.new("TextButton")
	button.Font = Row.Font
	button.FontSize = Row.FontSize
	button.TextXAlignment = Row.TextXAlignment
	button.BackgroundTransparency = 1
	button.TextColor3 = Row.TextColor
	if readOnly then
		button.TextColor3 = Row.TextLockedColor
	end
	button.Text = currentChoice
	button.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
	button.Position = UDim2.new(0, Styles.Margin, 0, 0)
	button.Parent = frame

	local function showArrow(color)
		if arrow then arrow:Destroy() end

		local graphicTemplate = Create('Frame',{
			Name="Graphic";
			BorderSizePixel = 0;
			BackgroundColor3 = color;
		})
		local graphicSize = 16/2

		arrow = ArrowGraphic(graphicSize,'Down',true,graphicTemplate)
		arrow.Position = UDim2.new(1,-graphicSize * 2,0.5,-graphicSize/2)
		arrow.Parent = frame
	end

	local function hideMenu()
		expanded = false
		showArrow(DropDown.ArrowColor)
		if menu then menu:Destroy() end
	end

	local function showMenu()
		expanded = true
		menu = Instance.new("Frame")
		menu.Size = UDim2.new(1, -2 * margin, 0, #choices * DropDown.Height)
		menu.Position = UDim2.new(0, margin, 0, Row.Height + margin)
		menu.BackgroundTransparency = 0
		menu.BackgroundColor3 = DropDown.BackColor
		menu.BorderColor3 = DropDown.BorderColor
		menu.BorderSizePixel = DropDown.BorderSizePixel
		menu.Active = true
		menu.ZIndex = 5
		menu.Parent = frame

		local parentFrameHeight = menu.Parent.Parent.Parent.Parent.Size.Y.Offset
		local rowHeight = menu.Parent.Parent.Parent.Position.Y.Offset
		if (rowHeight + menu.Size.Y.Offset) > math.max(parentFrameHeight,PropertiesFrame.AbsoluteSize.y) then
			menu.Position = UDim2.new(0, margin, 0, -1 * (#choices * DropDown.Height) - margin)
		end

		local function choice(name)
			onClick(name)
			hideMenu()
		end

		for i,name in pairs(choices) do
			local option = CreateDropDownItem(name, function()
				choice(name)
			end)
			option.Size = UDim2.new(1, 0, 0, 16)
			option.Position = UDim2.new(0, 0, 0, (i - 1) * DropDown.Height)
			option.ZIndex = menu.ZIndex
			option.Parent = menu
		end
	end

	showArrow(DropDown.ArrowColor)

	if not readOnly then

		button.MouseEnter:connect(function()
			button.TextColor3 = Row.TextColor
			showArrow(DropDown.ArrowColorOver)
		end)
		button.MouseLeave:connect(function()
			button.TextColor3 = Row.TextColor
			if not expanded then
				showArrow(DropDown.ArrowColor)
			end
		end)
		button.MouseButton1Click:connect(function()
			if expanded then
				hideMenu()
			else
				showMenu()
			end
		end)
	end

	return frame,button
end

local function CreateBrickColor(readOnly, onClick)
	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(1,0,1,0)
	frame.BackgroundTransparency = 1

	local colorPalette = Instance.new("Frame")
	colorPalette.BackgroundTransparency = 0
	colorPalette.SizeConstraint = Enum.SizeConstraint.RelativeXX
	colorPalette.Size = UDim2.new(1, -2 * BrickColors.OuterBorder, 1, -2 * BrickColors.OuterBorder)
	colorPalette.BorderSizePixel = BrickColors.BorderSizePixel
	colorPalette.BorderColor3 = BrickColors.BorderColor
	colorPalette.Position = UDim2.new(0, BrickColors.OuterBorder, 0, BrickColors.OuterBorder + Row.Height)
	colorPalette.ZIndex = 5
	colorPalette.Visible = false
	colorPalette.BorderSizePixel = BrickColors.OuterBorder
	colorPalette.BorderColor3 = BrickColors.OuterBorderColor
	colorPalette.Parent = frame

	local function show()
		colorPalette.Visible = true
	end

	local function hide()
		colorPalette.Visible = false
	end

	local function toggle()
		colorPalette.Visible = not colorPalette.Visible
	end

	local colorBox = Instance.new("TextButton", frame)
	colorBox.Position = UDim2.new(0, Styles.Margin, 0, Styles.Margin)
	colorBox.Size = UDim2.new(0, BrickColors.BoxSize, 0, BrickColors.BoxSize)
	colorBox.Text = ""
	colorBox.MouseButton1Click:connect(function()
		if not readOnly then
			toggle()
		end
	end)

	if readOnly then
		colorBox.AutoButtonColor = false
	end

	local spacingBefore = (Styles.Margin * 2) + BrickColors.BoxSize

	local propertyLabel = CreateTextButton(readOnly, function()
		if not readOnly then
			toggle()
		end
	end)
	propertyLabel.Size = UDim2.new(1, (-1 * spacingBefore) - Styles.Margin, 1, 0)
	propertyLabel.Position = UDim2.new(0, spacingBefore, 0, 0)
	propertyLabel.Parent = frame

	local size = (1 / BrickColors.ColorsPerRow)

	for index = 0, 127 do
		local brickColor = BrickColor.palette(index)
		local color3 = brickColor.Color

		local x = size * (index % BrickColors.ColorsPerRow)
		local y = size * math.floor(index / BrickColors.ColorsPerRow)

		local brickColorBox = Instance.new("TextButton")
		brickColorBox.Text = ""
		brickColorBox.Size = UDim2.new(size,0,size,0)
		brickColorBox.BackgroundColor3 = color3
		brickColorBox.Position = UDim2.new(x, 0, y, 0)
		brickColorBox.ZIndex = colorPalette.ZIndex
		brickColorBox.Parent = colorPalette

		brickColorBox.MouseButton1Click:connect(function()
			hide()
			onClick(brickColor)
		end)
	end

	return frame,propertyLabel,colorBox
end

local function CreateColor3Control(readOnly, onClick)
	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(1,0,1,0)
	frame.BackgroundTransparency = 1

	local colorBox = Instance.new("TextButton", frame)
	colorBox.Position = UDim2.new(0, Styles.Margin, 0, Styles.Margin)
	colorBox.Size = UDim2.new(0, BrickColors.BoxSize, 0, BrickColors.BoxSize)
	colorBox.Text = ""
	colorBox.AutoButtonColor = false

	local spacingBefore = (Styles.Margin * 2) + BrickColors.BoxSize
	local box = CreateTextBox(readOnly)
	box.Size = UDim2.new(1, (-1 * spacingBefore) - Styles.Margin, 1, 0)
	box.Position = UDim2.new(0, spacingBefore, 0, 0)
	box.Parent = frame

	return frame,box,colorBox
end

function CreateCheckbox(value, readOnly, onClick)
	local checked = value
	local mouseover = false

	local checkboxFrame = Instance.new("ImageButton")
	checkboxFrame.Size = UDim2.new(0, Sprite.Width, 0, Sprite.Height)
	checkboxFrame.BackgroundTransparency = 1
	checkboxFrame.ClipsDescendants = true
	--checkboxFrame.Position = UDim2.new(0, Styles.Margin, 0, Styles.Margin)

	local spritesheetImage = Instance.new("ImageLabel", checkboxFrame)
	spritesheetImage.Name = "SpritesheetImageLabel"
	spritesheetImage.Size = UDim2.new(0, Spritesheet.Width, 0, Spritesheet.Height)
	spritesheetImage.Image = Spritesheet.Image
	spritesheetImage.BackgroundTransparency = 1

	local function updateSprite()
		local spriteName = GetCheckboxImageName(checked, readOnly, mouseover)
		local spritePosition = SpritePosition(spriteName)
		spritesheetImage.Position = UDim2.new(0, -1 * spritePosition[1], 0, -1 * spritePosition[2])
	end

	local function setValue(val)
		checked = val
		updateSprite()
	end

	if not readOnly then
		checkboxFrame.MouseEnter:connect(function() mouseover = true updateSprite() end)
		checkboxFrame.MouseLeave:connect(function() mouseover = false updateSprite() end)
		checkboxFrame.MouseButton1Click:connect(function()
			onClick(checked)
		end)
	end

	updateSprite()

	return checkboxFrame, setValue
end



-- Code for handling controls of various data types --

local Controls = {}

Controls["default"] = function(object, propertyData, readOnly)
	local propertyName = propertyData["Name"]
	local propertyType = propertyData["ValueType"]

	local box = CreateTextBox(readOnly)
	box.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
	box.Position = UDim2.new(0, Styles.Margin, 0, 0)

	local function update()
		local value = object[propertyName]
		box.Text = ToString(value, propertyType)
	end

	if not readOnly then
		box.FocusLost:connect(function(enterPressed)
			Set(object, propertyData, ToValue(box.Text,propertyType))
			update()
		end)
	end

	update()

	object.Changed:connect(function(property)
		if (property == propertyName) then
			update()
		end
	end)

	return box
end

Controls["bool"] = function(object, propertyData, readOnly)
	local propertyName = propertyData["Name"]
	local checked = object[propertyName]

	local checkbox, setValue = CreateCheckbox(checked, readOnly, function(value)
		Set(object, propertyData, not checked)
	end)
	checkbox.Position = UDim2.new(0, Styles.Margin, 0, Styles.Margin)

	setValue(checked)

	local function update()
		checked = object[propertyName]
		setValue(checked)
	end

	object.Changed:connect(function(property)
		if (property == propertyName) then
			update()
		end
	end)

	if object:IsA("BoolValue") then
		object.Changed:connect(function(val)
			update()
		end)
	end

	update()

	return checkbox
end

Controls["BrickColor"] = function(object, propertyData, readOnly)
	local propertyName = propertyData["Name"]

	local frame,label,brickColorBox = CreateBrickColor(readOnly, function(brickColor)
		Set(object, propertyData, brickColor)
	end)

	local function update()
		local value = object[propertyName]
		brickColorBox.BackgroundColor3 = value.Color
		label.Text = tostring(value)
	end

	update()

	object.Changed:connect(function(property)
		if (property == propertyName) then
			update()
		end
	end)

	return frame
end

Controls["Color3"] = function(object, propertyData, readOnly)
	local propertyName = propertyData["Name"]

	local frame,textBox,colorBox = CreateColor3Control(readOnly)

	textBox.FocusLost:connect(function(enterPressed)
		Set(object, propertyData, ToValue(textBox.Text,"Color3"))
		local value = object[propertyName]
		colorBox.BackgroundColor3 = value
		textBox.Text = ToString(value, "Color3")
	end)

	local function update()
		local value = object[propertyName]
		colorBox.BackgroundColor3 = value
		textBox.Text = ToString(value, "Color3")
	end

	update()

	object.Changed:connect(function(property)
		if (property == propertyName) then
			update()
		end
	end)

	return frame
end

Controls["Enum"] = function(object, propertyData, readOnly)
	local propertyName = propertyData["Name"]
	local propertyType = propertyData["ValueType"]

	local enumName = object[propertyName].Name

	local enumNames = {}
	for _,enum in pairs(Enum[tostring(propertyType)]:GetEnumItems()) do
		table.insert(enumNames, enum.Name)
	end

	local dropdown, propertyLabel = CreateDropDown(enumNames, enumName, readOnly, function(value)
		Set(object, propertyData, value)
	end)
	--dropdown.Parent = frame

	local function update()
		local value = object[propertyName].Name
		propertyLabel.Text = tostring(value)
	end

	update()

	object.Changed:connect(function(property)
		if (property == propertyName) then
			update()
		end
	end)

	return dropdown
end

Controls["Object"] = function(object, propertyData, readOnly)
	local propertyName = propertyData["Name"]
	local propertyType = propertyData["ValueType"]

	local box = CreateObject(readOnly,function()end)
	box.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
	box.Position = UDim2.new(0, Styles.Margin, 0, 0)

	local function update()
		if AwaitingObjectObj == object then
			if AwaitingObjectValue == true then
				box.Text = "Select an Object"
				return
			end
		end
		local value = object[propertyName]
		box.Text = ToString(value, propertyType)
	end

	if not readOnly then
		box.MouseButton1Click:connect(function()
			if AwaitingObjectValue then
				AwaitingObjectValue = false
				update()
				return
			end
			AwaitingObjectValue = true
			AwaitingObjectObj = object
			AwaitingObjectProp = propertyData
			box.Text = "Select an Object"
		end)

		box.Cancel.Visible = true
		box.Cancel.MouseButton1Click:connect(function()
			object[propertyName] = nil
		end)
	end

	update()

	object.Changed:connect(function(property)
		if (property == propertyName) then
			update()
		end
	end)

	if object:IsA("ObjectValue") then
		object.Changed:connect(function(val)
			update()
		end)
	end

	return box
end

function GetControl(object, propertyData, readOnly)
	local propertyType = propertyData["ValueType"]
	local control = nil

	if Controls[propertyType] then
		control = Controls[propertyType](object, propertyData, readOnly)
	elseif RbxApi.IsEnum(propertyType) then
		control = Controls["Enum"](object, propertyData, readOnly)
	elseif RbxApi.Classes[propertyType] then
		control = Controls["Object"](object, propertyData, readOnly)
	else
		control = Controls["default"](object, propertyData, readOnly)
	end
	return control
end
-- Permissions

function CanEditObject(object)
	local player = Players.LocalPlayer
	local character = player.Character
	return Permissions.CanEdit
end

function CanEditProperty(object,propertyData)
	local tags = propertyData["tags"]
	for _,name in pairs(tags) do
		if name == "readonly" then
			return false
		end
	end
	return CanEditObject(object)
end

--RbxApi
local function PropertyIsHidden(propertyData)
	local tags = propertyData["tags"]
	for _,name in pairs(tags) do
		if name == "deprecated"
			or name == "hidden"
			or name == "writeonly" then
			return true
		end
	end
	return false
end

function Set(object, propertyData, value)
	local propertyName = propertyData["Name"]
	local propertyType = propertyData["ValueType"]

	if value == nil then return end

	for i,v in pairs(GetSelection()) do
		if CanEditProperty(v,propertyData) then
			pcall(function()
				--print("Setting " .. propertyName .. " to " .. tostring(value))
				v[propertyName] = value
			end)
		end
	end
end

function CreateRow(object, propertyData, isAlternateRow)
	local propertyName = propertyData["Name"]
	local propertyType = propertyData["ValueType"]
	local propertyValue = object[propertyName]
	--rowValue, rowValueType, isAlternate
	local backColor = Row.BackgroundColor;
	if (isAlternateRow) then
		backColor = Row.BackgroundColorAlternate
	end

	local readOnly = not CanEditProperty(object, propertyData)
	--if propertyType == "Instance" or propertyName == "Parent" then readOnly = true end

	local rowFrame = Instance.new("Frame")
	rowFrame.Size = UDim2.new(1,0,0,Row.Height)
	rowFrame.BackgroundTransparency = 1
	rowFrame.Name = 'Row'

	local propertyLabelFrame = CreateCell()
	propertyLabelFrame.Parent = rowFrame
	propertyLabelFrame.ClipsDescendants = true

	local propertyLabel = CreateLabel(readOnly)
	propertyLabel.Text = propertyName
	propertyLabel.Size = UDim2.new(1, -1 * Row.TitleMarginLeft, 1, 0)
	propertyLabel.Position = UDim2.new(0, Row.TitleMarginLeft, 0, 0)
	propertyLabel.Parent = propertyLabelFrame

	local propertyValueFrame = CreateCell()
	propertyValueFrame.Size = UDim2.new(0.5, -1, 1, 0)
	propertyValueFrame.Position = UDim2.new(0.5, 0, 0, 0)
	propertyValueFrame.Parent = rowFrame

	local control = GetControl(object, propertyData, readOnly)
	control.Parent = propertyValueFrame

	rowFrame.MouseEnter:connect(function()
		propertyLabelFrame.BackgroundColor3 = Row.BackgroundColorMouseover
		propertyValueFrame.BackgroundColor3 = Row.BackgroundColorMouseover
	end)
	rowFrame.MouseLeave:connect(function()
		propertyLabelFrame.BackgroundColor3 = backColor
		propertyValueFrame.BackgroundColor3 = backColor
	end)

	propertyLabelFrame.BackgroundColor3 = backColor
	propertyValueFrame.BackgroundColor3 = backColor

	return rowFrame
end

function ClearPropertiesList()
	for _,instance in pairs(ContentFrame:GetChildren()) do
		instance:Destroy()
	end
end

local selection = Gui:FindFirstChild("Selection", 1)
print(selection)

function displayProperties(props)
	for i,v in pairs(props) do
		pcall(function()
			local a = CreateRow(v.object, v.propertyData, ((numRows % 2) == 0))
			a.Position = UDim2.new(0,0,0,numRows*Row.Height)
			a.Parent = ContentFrame
			numRows = numRows + 1
		end)
	end
end

function checkForDupe(prop,props)
	for i,v in pairs(props) do
		if v.propertyData.Name == prop.Name and v.propertyData.ValueType == prop.ValueType then
			return true
		end
	end
	return false
end

function sortProps(t)
	table.sort(t, 
		function(x,y) return x.propertyData.Name < y.propertyData.Name
		end)
end

function showProperties(obj)
	ClearPropertiesList()
	if obj == nil then return end
	local propHolder = {}
	local foundProps = {}
	numRows = 0
	for _,nextObj in pairs(obj) do
		if not foundProps[nextObj.className] then
			foundProps[nextObj.className] = true
			for i,v in pairs(RbxApi.GetProperties(nextObj.className)) do
				local suc, err = pcall(function()
					if not (PropertyIsHidden(v)) and not checkForDupe(v,propHolder) then
						if string.find(string.lower(v.Name),string.lower(propertiesSearch.Text)) or not searchingProperties() then
							table.insert(propHolder,{propertyData = v, object = nextObj})
						end
					end
				end)
				--[[if not suc then 
					warn("Problem getting the value of property " .. v.Name .. " | " .. err)
				end	--]]
			end
		end
	end
	sortProps(propHolder)
	displayProperties(propHolder)
	ContentFrame.Size = UDim2.new(1, 0, 0, numRows * Row.Height)
	scrollBar.ScrollIndex = 0
	scrollBar.TotalSpace = numRows * Row.Height
	scrollBar.Update()
end

----------------------------------------------------------------
-----------------------SCROLLBAR STUFF--------------------------
----------------------------------------------------------------
----------------------------------------------------------------
local ScrollBarWidth = 16

local ScrollStyles = {
	Background = Color3.fromRGB(37, 37, 42),
	Border = Color3.fromRGB(20, 20, 25),
	Selected = Color3.fromRGB(5, 100, 140),
	BorderSelected = Color3.fromRGB(2, 130, 145),
	Text = Color3.fromRGB(245, 245, 250),
	TextDisabled = Color3.fromRGB(188, 188, 193),
	TextSelected = Color3.fromRGB(255, 255, 255),
	Button = Color3.fromRGB(31, 31, 36),
	ButtonBorder = Color3.fromRGB(133, 133, 138),
	ButtonSelected = Color3.fromRGB(0, 168, 155),
	Field = Color3.fromRGB(37, 37, 42),
	FieldBorder = Color3.fromRGB(50, 50, 55),
	TitleBackground = Color3.fromRGB(11, 11, 16)
}
do
	local ZIndexLock = {}
	function SetZIndex(object,z)
		if not ZIndexLock[object] then
			ZIndexLock[object] = true
			if object:IsA'GuiObject' then
				object.ZIndex = z
			end
			local children = object:GetChildren()
			for i = 1,#children do
				SetZIndex(children[i],z)
			end
			ZIndexLock[object] = nil
		end
	end
end
function SetZIndexOnChanged(object)
	return object.Changed:connect(function(p)
		if p == "ZIndex" then
			SetZIndex(object,object.ZIndex)
		end
	end)
end
function Create(ty,data)
	local obj
	if type(ty) == 'string' then
		obj = Instance.new(ty)
	else
		obj = ty
	end
	for k, v in pairs(data) do
		if type(k) == 'number' then
			v.Parent = obj
		else
			obj[k] = v
		end
	end
	return obj
end
-- returns the ascendant ScreenGui of an object
function GetScreen(screen)
	if screen == nil then return nil end
	while not screen:IsA("ScreenGui") do
		screen = screen.Parent
		if screen == nil then return nil end
	end
	return screen
end
-- AutoButtonColor doesn't always reset properly
function ResetButtonColor(button)
	local active = button.Active
	button.Active = not active
	button.Active = active
end

function ArrowGraphic(size,dir,scaled,template)
	local Frame = Create('Frame',{
		Name = "Arrow Graphic";
		BorderSizePixel = 0;
		Size = UDim2.new(0,size,0,size);
		Transparency = 1;
	})
	if not template then
		template = Instance.new("Frame")
		template.BorderSizePixel = 0
	end

	local transform
	if dir == nil or dir == 'Up' then
		function transform(p,s) return p,s end
	elseif dir == 'Down' then
		function transform(p,s) return UDim2.new(0,p.X.Offset,0,size-p.Y.Offset-1),s end
	elseif dir == 'Left' then
		function transform(p,s) return UDim2.new(0,p.Y.Offset,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
	elseif dir == 'Right' then
		function transform(p,s) return UDim2.new(0,size-p.Y.Offset-1,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
	end

	local scale
	if scaled then
		function scale(p,s) return UDim2.new(p.X.Offset/size,0,p.Y.Offset/size,0),UDim2.new(s.X.Offset/size,0,s.Y.Offset/size,0) end
	else
		function scale(p,s) return p,s end
	end

	local o = math.floor(size/4)
	if size%2 == 0 then
		local n = size/2-1
		for i = 0,n do
			local t = template:Clone()
			local p,s = scale(transform(
				UDim2.new(0,n-i,0,o+i),
				UDim2.new(0,(i+1)*2,0,1)
				))
			t.Position = p
			t.Size = s
			t.Parent = Frame
		end
	else
		local n = (size-1)/2
		for i = 0,n do
			local t = template:Clone()
			local p,s = scale(transform(
				UDim2.new(0,n-i,0,o+i),
				UDim2.new(0,i*2+1,0,1)
				))
			t.Position = p
			t.Size = s
			t.Parent = Frame
		end
	end
	if size%4 > 1 then
		local t = template:Clone()
		local p,s = scale(transform(
			UDim2.new(0,0,0,size-o-1),
			UDim2.new(0,size,0,1)
			))
		t.Position = p
		t.Size = s
		t.Parent = Frame
	end
	return Frame
end

function GripGraphic(size,dir,spacing,scaled,template)
	local Frame = Create('Frame',{
		Name = "Grip Graphic";
		BorderSizePixel = 0;
		Size = UDim2.new(0,size.x,0,size.y);
		Transparency = 1;
	})
	if not template then
		template = Instance.new("Frame")
		template.BorderSizePixel = 0
	end

	spacing = spacing or 2

	local scale
	if scaled then
		function scale(p) return UDim2.new(p.X.Offset/size.x,0,p.Y.Offset/size.y,0) end
	else
		function scale(p) return p end
	end

	if dir == 'Vertical' then
		for i=0,size.x-1,spacing do
			local t = template:Clone()
			t.Size = scale(UDim2.new(0,1,0,size.y))
			t.Position = scale(UDim2.new(0,i,0,0))
			t.Parent = Frame
		end
	elseif dir == nil or dir == 'Horizontal' then
		for i=0,size.y-1,spacing do
			local t = template:Clone()
			t.Size = scale(UDim2.new(0,size.x,0,1))
			t.Position = scale(UDim2.new(0,0,0,i))
			t.Parent = Frame
		end
	end

	return Frame
end

do
	local mt = {
		__index = {
			GetScrollPercent = function(self)
				return self.ScrollIndex/(self.TotalSpace-self.VisibleSpace)
			end;
			CanScrollDown = function(self)
				return self.ScrollIndex + self.VisibleSpace < self.TotalSpace
			end;
			CanScrollUp = function(self)
				return self.ScrollIndex > 0
			end;
			ScrollDown = function(self)
				self.ScrollIndex = self.ScrollIndex + self.PageIncrement
				self:Update()
			end;
			ScrollUp = function(self)
				self.ScrollIndex = self.ScrollIndex - self.PageIncrement
				self:Update()
			end;
			ScrollTo = function(self,index)
				self.ScrollIndex = index
				self:Update()
			end;
			SetScrollPercent = function(self,percent)
				self.ScrollIndex = math.floor((self.TotalSpace - self.VisibleSpace)*percent + 0.5)
				self:Update()
			end;
		};
	}
	mt.__index.CanScrollRight = mt.__index.CanScrollDown
	mt.__index.CanScrollLeft = mt.__index.CanScrollUp
	mt.__index.ScrollLeft = mt.__index.ScrollUp
	mt.__index.ScrollRight = mt.__index.ScrollDown

	function ScrollBar(horizontal)
		local ScrollFrame = Create('Frame',{
			Name = "ScrollFrame",
			Position = horizontal and UDim2_new(0,0,1,-ScrollBarWidth) or UDim2_new(1,-ScrollBarWidth,0,0),
			Size = horizontal and UDim2_new(1,0,0,ScrollBarWidth) or UDim2_new(0,ScrollBarWidth,1,0),
			BackgroundTransparency = 1,
			Create('ImageButton',{
				Name = "ScrollDown",
				Position = horizontal and UDim2_new(1,-ScrollBarWidth,0,0) or UDim2_new(0,0,1,-ScrollBarWidth),
				Size = UDim2_new(0, ScrollBarWidth, 0, ScrollBarWidth),
				BackgroundColor3 = ScrollStyles.Button,
				BorderColor3 = ScrollStyles.Border,
				ImageColor3 = Styles.White
			}),
			Create('ImageButton',{
				Name = "ScrollUp",
				Size = UDim2_new(0, ScrollBarWidth, 0, ScrollBarWidth),
				BackgroundColor3 = ScrollStyles.Button,
				BorderColor3 = ScrollStyles.Border,
				ImageColor3 = Styles.White
			}),
			Create('ImageButton',{
				Name = "ScrollBar",
				Size = horizontal and UDim2_new(1,-ScrollBarWidth*2,1,0) or UDim2_new(1,0,1,-ScrollBarWidth*2),
				Position = horizontal and UDim2_new(0,ScrollBarWidth,0,0) or UDim2_new(0,0,0,ScrollBarWidth),
				AutoButtonColor = false,
				BackgroundColor3 = Color3_new(1/4, 1/4, 1/4),
				BorderColor3 = ScrollStyles.Border,
				Create('ImageButton',{
					Name = "ScrollThumb",
					AutoButtonColor = false,
					Size = UDim2_new(0, ScrollBarWidth, 0, ScrollBarWidth),
					BackgroundColor3 = ScrollStyles.Button,
					BorderColor3 = ScrollStyles.Border,
					ImageColor3 = Styles.White
				})
			})
		})

		local graphicTemplate = Create('Frame',{
			Name="Graphic",
			BorderSizePixel = 0,
			BackgroundColor3 = Color3_new(1, 1, 1)
		})

		local graphicSize = ScrollBarWidth/2

		local ScrollDownFrame = ScrollFrame.ScrollDown
		local ScrollDownGraphic = ArrowGraphic(graphicSize,horizontal and 'Right' or 'Down',true,graphicTemplate)
		ScrollDownGraphic.Position = UDim2_new(.5,-graphicSize/2,.5,-graphicSize/2)
		ScrollDownGraphic.Parent = ScrollDownFrame
		local ScrollUpFrame = ScrollFrame.ScrollUp
		local ScrollUpGraphic = ArrowGraphic(graphicSize,horizontal and 'Left' or 'Up',true,graphicTemplate)
		ScrollUpGraphic.Position = UDim2_new(.5,-graphicSize/2,.5,-graphicSize/2)
		ScrollUpGraphic.Parent = ScrollUpFrame
		local ScrollBarFrame = ScrollFrame.ScrollBar
		local ScrollThumbFrame = ScrollBarFrame.ScrollThumb
		do
			local size = ScrollBarWidth*3/8
			local Decal = GripGraphic(Vector2_new(size,size),horizontal and 'Vertical' or 'Horizontal',2,graphicTemplate)
			Decal.Position = UDim2_new(.5,-size/2,.5,-size/2)
			Decal.Parent = ScrollThumbFrame
		end

		local MouseDrag = Create('ImageButton',{
			Name = "MouseDrag",
			Position = UDim2_new(-.25,0,-.25,0),
			Size = UDim2_new(1.5,0,1.5,0),
			Transparency = 1,
			AutoButtonColor = false,
			Active = true,
			ZIndex = 10
		})

		local Class = setmetatable({
			GUI = ScrollFrame,
			ScrollIndex = 0,
			VisibleSpace = 0,
			TotalSpace = 0,
			PageIncrement = 1
		},mt)

		local UpdateScrollThumb
		if horizontal then
			function UpdateScrollThumb()
				ScrollThumbFrame.Size = UDim2_new(Class.VisibleSpace/Class.TotalSpace,0,0,ScrollBarWidth)
				if ScrollThumbFrame.AbsoluteSize.X < ScrollBarWidth then
					ScrollThumbFrame.Size = UDim2_new(0,ScrollBarWidth,0,ScrollBarWidth)
				end
				local barSize = ScrollBarFrame.AbsoluteSize.X
				ScrollThumbFrame.Position = UDim2_new(Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.X)/barSize,0,0,0)
			end
		else
			function UpdateScrollThumb()
				ScrollThumbFrame.Size = UDim2_new(0,ScrollBarWidth,Class.VisibleSpace/Class.TotalSpace,0)
				if ScrollThumbFrame.AbsoluteSize.Y < ScrollBarWidth then
					ScrollThumbFrame.Size = UDim2_new(0,ScrollBarWidth,0,ScrollBarWidth)
				end
				local barSize = ScrollBarFrame.AbsoluteSize.Y
				ScrollThumbFrame.Position = UDim2_new(0,0,Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.Y)/barSize,0)
			end
		end

		local lastDown, lastUp
		local scrollStyle = {BackgroundColor3=Color3_new(1, 1, 1),BackgroundTransparency=0}
		local scrollStyle_ds = {BackgroundColor3=Color3_new(1, 1, 1),BackgroundTransparency=.7}

		local function Update()
			local t,v,s = Class.TotalSpace,Class.VisibleSpace,Class.ScrollIndex
			if v <= t then
				if s > 0 then
					if s + v > t then
						Class.ScrollIndex = t - v
					end
				else
					Class.ScrollIndex = 0
				end
			else
				Class.ScrollIndex = 0
			end

			if Class.UpdateCallback then
				if Class.UpdateCallback(Class) == false then
					return
				end
			end

			local down,up = Class:CanScrollDown(),Class:CanScrollUp()
			if down ~= lastDown then
				lastDown = down
				ScrollDownFrame.Active = down
				ScrollDownFrame.AutoButtonColor = down
				local children,style = ScrollDownGraphic:GetChildren(),down and scrollStyle or scrollStyle_ds
				for i = 1,#children do
					Create(children[i],style)
				end
			end
			if up ~= lastUp then
				lastUp = up
				ScrollUpFrame.Active = up
				ScrollUpFrame.AutoButtonColor = up
				local children,style = ScrollUpGraphic:GetChildren(),up and scrollStyle or scrollStyle_ds
				for i = 1,#children do
					Create(children[i],style)
				end
			end
			ScrollThumbFrame.Visible = down or up
			UpdateScrollThumb()
		end
		Class.Update = Update

		SetZIndexOnChanged(ScrollFrame)

		local scrollEventID = 0
		ScrollDownFrame.MouseButton1Down:Connect(function()
			scrollEventID = tick()
			local current,up_con = scrollEventID,nil
			up_con = MouseDrag.MouseButton1Up:Connect(function()
				scrollEventID = tick()
				MouseDrag.Parent = nil
				ResetButtonColor(ScrollDownFrame)
				up_con:Disconnect()
				drag = nil
			end)
			MouseDrag.Parent = GetScreen(ScrollFrame)
			Class:ScrollDown()
			wait(.2)
			while scrollEventID == current do
				Class:ScrollDown()
				if not Class:CanScrollDown() then break end
				wait()
			end
		end)

		ScrollDownFrame.MouseButton1Up:Connect(function()
			scrollEventID = tick()
		end)

		ScrollUpFrame.MouseButton1Down:Connect(function()
			scrollEventID = tick()
			local current,up_con = scrollEventID,nil
			up_con = MouseDrag.MouseButton1Up:Connect(function()
				scrollEventID = tick()
				MouseDrag.Parent = nil
				ResetButtonColor(ScrollUpFrame)
				up_con:Disconnect()
				drag = nil
			end)
			MouseDrag.Parent = GetScreen(ScrollFrame)
			Class:ScrollUp()
			wait(.2)
			while scrollEventID == current do
				Class:ScrollUp()
				if not Class:CanScrollUp() then break end
				wait()
			end
		end)

		ScrollUpFrame.MouseButton1Up:Connect(function()
			scrollEventID = tick()
		end)

		if horizontal then
			ScrollBarFrame.MouseButton1Down:Connect(function(x,y)
				scrollEventID = tick()
				local current = scrollEventID
				local up_con
				up_con = MouseDrag.MouseButton1Up:Connect(function()
					scrollEventID = tick()
					MouseDrag.Parent = nil
					ResetButtonColor(ScrollUpFrame)
					up_con:Disconnect()
					drag = nil
				end)
				MouseDrag.Parent = GetScreen(ScrollFrame)
				if x > ScrollThumbFrame.AbsolutePosition.X then
					Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
					wait(.2)
					while scrollEventID == current do
						if x < ScrollThumbFrame.AbsolutePosition.X + ScrollThumbFrame.AbsoluteSize.X then break end
						Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
						wait()
					end
				else
					Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
					wait(.2)
					while scrollEventID == current do
						if x > ScrollThumbFrame.AbsolutePosition.X then break end
						Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
						wait()
					end
				end
			end)
		else
			ScrollBarFrame.MouseButton1Down:Connect(function(x,y)
				scrollEventID = tick()
				local current = scrollEventID
				local up_con
				up_con = MouseDrag.MouseButton1Up:Connect(function()
					scrollEventID = tick()
					MouseDrag.Parent = nil
					ResetButtonColor(ScrollUpFrame)
					up_con:Disconnect(); drag = nil
				end)
				MouseDrag.Parent = GetScreen(ScrollFrame)
				if y > ScrollThumbFrame.AbsolutePosition.Y then
					Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
					wait(.2)
					while scrollEventID == current do
						if y < ScrollThumbFrame.AbsolutePosition.Y + ScrollThumbFrame.AbsoluteSize.Y then break end
						Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
						wait()
					end
				else
					Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
					wait(.2)
					while scrollEventID == current do
						if y > ScrollThumbFrame.AbsolutePosition.Y then break end
						Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
						wait()
					end
				end
			end)
		end

		if horizontal then
			ScrollThumbFrame.MouseButton1Down:Connect(function(x,y)
				scrollEventID = tick()
				local mouse_offset = x - ScrollThumbFrame.AbsolutePosition.X
				local drag_con,up_con
				drag_con = MouseDrag.MouseMoved:Connect(function(x,y)
					local bar_abs_pos = ScrollBarFrame.AbsolutePosition.X
					local bar_drag = ScrollBarFrame.AbsoluteSize.X - ScrollThumbFrame.AbsoluteSize.X
					local bar_abs_one = bar_abs_pos + bar_drag
					x = x - mouse_offset
					x = x < bar_abs_pos and bar_abs_pos or x > bar_abs_one and bar_abs_one or x
					x = x - bar_abs_pos
					Class:SetScrollPercent(x/(bar_drag))
				end)
				up_con = MouseDrag.MouseButton1Up:Connect(function()
					scrollEventID = tick()
					MouseDrag.Parent = nil
					ResetButtonColor(ScrollThumbFrame)
					drag_con:Disconnect(); drag_con = nil
					up_con:Disconnect(); drag = nil
				end)
				MouseDrag.Parent = GetScreen(ScrollFrame)
			end)
		else
			ScrollThumbFrame.MouseButton1Down:Connect(function(x,y)
				scrollEventID = tick()
				local mouse_offset = y - ScrollThumbFrame.AbsolutePosition.Y
				local drag_con,up_con
				drag_con = MouseDrag.MouseMoved:Connect(function(x,y)
					local bar_abs_pos = ScrollBarFrame.AbsolutePosition.Y
					local bar_drag = ScrollBarFrame.AbsoluteSize.Y - ScrollThumbFrame.AbsoluteSize.Y
					local bar_abs_one = bar_abs_pos + bar_drag
					y = y - mouse_offset
					y = y < bar_abs_pos and bar_abs_pos or y > bar_abs_one and bar_abs_one or y
					y = y - bar_abs_pos
					Class:SetScrollPercent(y/(bar_drag))
				end)
				up_con = MouseDrag.MouseButton1Up:Connect(function()
					scrollEventID = tick()
					MouseDrag.Parent = nil
					ResetButtonColor(ScrollThumbFrame)
					drag_con:Disconnect(); drag_con = nil
					up_con:Disconnect(); drag = nil
				end)
				MouseDrag.Parent = GetScreen(ScrollFrame)
			end)
		end

		function Class:Destroy()
			ScrollFrame:Destroy()
			MouseDrag:Destroy()
			for k in next, Class do
				Class[k] = nil
			end
			setmetatable(Class,nil)
		end
		Update()
		return Class
	end
end

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------

local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(1, -1 * ScrollBarWidth, 1, 0)
MainFrame.Position = UDim2.new(0, 0, 0, 0)
MainFrame.BackgroundTransparency = 1
MainFrame.ClipsDescendants = true
MainFrame.Parent = PropertiesFrame

ContentFrame = Instance.new("Frame")
ContentFrame.Name = "ContentFrame"
ContentFrame.Size = UDim2.new(1, 0, 0, 0)
ContentFrame.BackgroundTransparency = 1
ContentFrame.Parent = MainFrame

scrollBar = ScrollBar(false)
scrollBar.PageIncrement = 1
Create(scrollBar.GUI,{
	Position = UDim2.new(1,-ScrollBarWidth,0,0);
	Size = UDim2.new(0,ScrollBarWidth,1,0);
	Parent = PropertiesFrame;
})

scrollBarH = ScrollBar(true)
scrollBarH.PageIncrement = ScrollBarWidth
Create(scrollBarH.GUI,{
	Position = UDim2.new(0,0,1,-ScrollBarWidth);
	Size = UDim2.new(1,-ScrollBarWidth,0,ScrollBarWidth);
	Visible = false;
	Parent = PropertiesFrame;
})

do
	local listEntries = {}
	local nameConnLookup = {}

	function scrollBar.UpdateCallback(self)
		scrollBar.TotalSpace = ContentFrame.AbsoluteSize.Y
		scrollBar.VisibleSpace = MainFrame.AbsoluteSize.Y
		ContentFrame.Position = UDim2.new(ContentFrame.Position.X.Scale,ContentFrame.Position.X.Offset,0,-1*scrollBar.ScrollIndex)
	end

	function scrollBarH.UpdateCallback(self)

	end

	MainFrame.Changed:connect(function(p)
		if p == 'AbsoluteSize' then
			scrollBarH.VisibleSpace = math.ceil(MainFrame.AbsoluteSize.x)
			scrollBarH:Update()
			scrollBar.VisibleSpace = math.ceil(MainFrame.AbsoluteSize.y)
			scrollBar:Update()
		end
	end)

	local wheelAmount = Row.Height
	PropertiesFrame.MouseWheelForward:connect(function()
		if scrollBar.VisibleSpace - 1 > wheelAmount then
			scrollBar:ScrollTo(scrollBar.ScrollIndex - wheelAmount)
		else
			scrollBar:ScrollTo(scrollBar.ScrollIndex - scrollBar.VisibleSpace)
		end
	end)
	PropertiesFrame.MouseWheelBackward:connect(function()
		if scrollBar.VisibleSpace - 1 > wheelAmount then
			scrollBar:ScrollTo(scrollBar.ScrollIndex + wheelAmount)
		else
			scrollBar:ScrollTo(scrollBar.ScrollIndex + scrollBar.VisibleSpace)
		end
	end)
end

scrollBar.VisibleSpace = math.ceil(MainFrame.AbsoluteSize.y)
scrollBar:Update()

showProperties(GetSelection())

bindSelectionChanged.Event:connect(function()
	showProperties(GetSelection())
end)

bindSetAwait.Event:connect(function(obj)
	if AwaitingObjectValue then
		AwaitingObjectValue = false
		local mySel = obj
		if mySel then
			pcall(function()
				Set(AwaitingObjectObj, AwaitingObjectProp, mySel)
			end)
		end
	end
end)

propertiesSearch.Changed:connect(function(prop)
	if prop == "Text" then
		showProperties(GetSelection())
	end
end)

bindGetApi.OnInvoke = function()
	return RbxApi
end

bindGetAwait.OnInvoke = function()
	return AwaitingObjectValue
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBXCD16C7D5E0154DF4BED92C695F73271E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RawApiJson</string>
						<string name="ScriptGuid">{56EFBE15-489F-44A5-81CD-E3EED8F25053}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	This is a fallback in case HttpService is disabled or the latest version cannot be fetched
	http://anaminus.github.io/rbx/json/api/latest.json
--]]

local json = [===[
	[{"Superclass":null,"type":"Class","Name":"Instance","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Archivable","tags":[],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"ClassName","tags":["readonly"],"Class":"Instance"},{"ValueType":"int","type":"Property","Name":"DataCost","tags":["LocalUserSecurity","readonly"],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"Name","tags":[],"Class":"Instance"},{"ValueType":"Class:Instance","type":"Property","Name":"Parent","tags":[],"Class":"Instance"},{"ValueType":"bool","type":"Property","Name":"RobloxLocked","tags":["PluginSecurity"],"Class":"Instance"},{"ValueType":"bool","type":"Property","Name":"archivable","tags":["deprecated","hidden"],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"className","tags":["deprecated","readonly"],"Class":"Instance"},{"ReturnType":"void","Arguments":[],"Name":"ClearAllChildren","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"Clone","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Destroy","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"FindFirstAncestor","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindFirstAncestorOfClass","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindFirstAncestorWhichIsA","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"FindFirstChild","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindFirstChildOfClass","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null},{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"FindFirstChildWhichIsA","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetChildren","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"scopeLength","Default":"4"}],"Name":"GetDebugId","tags":["PluginSecurity","notbrowsable"],"Class":"Instance","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetDescendants","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetFullName","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"EventInstance","Arguments":[{"Type":"string","Name":"property","Default":null}],"Name":"GetPropertyChangedSignal","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"IsA","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"descendant","Default":null}],"Name":"IsAncestorOf","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"ancestor","Default":null}],"Name":"IsDescendantOf","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Remove","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"childName","Default":null},{"Type":"double","Name":"timeOut","Default":null}],"Name":"WaitForChild","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"children","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"clone","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"destroy","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"findFirstChild","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"getChildren","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"isA","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"ancestor","Default":null}],"Name":"isDescendantOf","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"remove","tags":["deprecated"],"Class":"Instance","type":"Function"},{"Arguments":[{"Name":"child","Type":"Instance"},{"Name":"parent","Type":"Instance"}],"Name":"AncestryChanged","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"property","Type":"Property"}],"Name":"Changed","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"ChildAdded","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"ChildRemoved","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"descendant","Type":"Instance"}],"Name":"DescendantAdded","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"descendant","Type":"Instance"}],"Name":"DescendantRemoving","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"childAdded","tags":["deprecated"],"Class":"Instance","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Accoutrement","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"AttachmentForward","tags":[],"Class":"Accoutrement"},{"ValueType":"CoordinateFrame","type":"Property","Name":"AttachmentPoint","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentPos","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentRight","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentUp","tags":[],"Class":"Accoutrement"},{"Superclass":"Accoutrement","type":"Class","Name":"Accessory","tags":[]},{"Superclass":"Accoutrement","type":"Class","Name":"Hat","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"AdService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"ShowVideoAd","tags":["deprecated"],"Class":"AdService","type":"Function"},{"Arguments":[{"Name":"adShown","Type":"bool"}],"Name":"VideoAdClosed","tags":["deprecated"],"Class":"AdService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"AdvancedDragger","tags":[]},{"Superclass":"Instance","type":"Class","Name":"AnalyticsService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"target","Default":null}],"Name":"ReleaseRBXEventStream","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"counterName","Default":null},{"Type":"int","Name":"amount","Default":"1"}],"Name":"ReportCounter","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"seriesName","Default":null},{"Type":"Dictionary","Name":"points","Default":null},{"Type":"int","Name":"throttlingPercentage","Default":null}],"Name":"ReportInfluxSeries","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"category","Default":null},{"Type":"float","Name":"value","Default":null}],"Name":"ReportStats","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"target","Default":null},{"Type":"string","Name":"eventContext","Default":null},{"Type":"string","Name":"eventName","Default":null},{"Type":"Dictionary","Name":"additionalArgs","Default":null}],"Name":"SendEventDeferred","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"target","Default":null},{"Type":"string","Name":"eventContext","Default":null},{"Type":"string","Name":"eventName","Default":null},{"Type":"Dictionary","Name":"additionalArgs","Default":null}],"Name":"SendEventImmediately","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"target","Default":null},{"Type":"string","Name":"eventContext","Default":null},{"Type":"string","Name":"eventName","Default":null},{"Type":"Dictionary","Name":"additionalArgs","Default":null}],"Name":"SetRBXEvent","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"target","Default":null},{"Type":"string","Name":"eventContext","Default":null},{"Type":"string","Name":"eventName","Default":null},{"Type":"Dictionary","Name":"additionalArgs","Default":null}],"Name":"SetRBXEventStream","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"category","Default":null},{"Type":"string","Name":"action","Default":null},{"Type":"string","Name":"label","Default":null},{"Type":"int64","Name":"value","Default":"0"}],"Name":"TrackEvent","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Dictionary","Name":"args","Default":null}],"Name":"UpdateHeartbeatObject","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Animation","tags":[]},{"ValueType":"Content","type":"Property","Name":"AnimationId","tags":[],"Class":"Animation"},{"Superclass":"Instance","type":"Class","Name":"AnimationController","tags":[]},{"ReturnType":"Array","Arguments":[],"Name":"GetPlayingAnimationTracks","tags":[],"Class":"AnimationController","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"AnimationController","type":"Function"},{"Arguments":[{"Name":"animationTrack","Type":"Instance"}],"Name":"AnimationPlayed","tags":[],"Class":"AnimationController","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"AnimationTrack","tags":[]},{"ValueType":"Class:Animation","type":"Property","Name":"Animation","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"bool","type":"Property","Name":"IsPlaying","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"Length","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"bool","type":"Property","Name":"Looped","tags":[],"Class":"AnimationTrack"},{"ValueType":"AnimationPriority","type":"Property","Name":"Priority","tags":[],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"Speed","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"TimePosition","tags":[],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"WeightCurrent","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"WeightTarget","tags":["readonly"],"Class":"AnimationTrack"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"speed","Default":"1"}],"Name":"AdjustSpeed","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"weight","Default":"1"},{"Type":"float","Name":"fadeTime","Default":"0.100000001"}],"Name":"AdjustWeight","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"keyframeName","Default":null}],"Name":"GetTimeOfKeyframe","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"fadeTime","Default":"0.100000001"},{"Type":"float","Name":"weight","Default":"1"},{"Type":"float","Name":"speed","Default":"1"}],"Name":"Play","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"fadeTime","Default":"0.100000001"}],"Name":"Stop","tags":[],"Class":"AnimationTrack","type":"Function"},{"Arguments":[],"Name":"DidLoop","tags":[],"Class":"AnimationTrack","type":"Event"},{"Arguments":[{"Name":"keyframeName","Type":"string"}],"Name":"KeyframeReached","tags":[],"Class":"AnimationTrack","type":"Event"},{"Arguments":[],"Name":"Stopped","tags":[],"Class":"AnimationTrack","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Animator","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"Animator","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"deltaTime","Default":null}],"Name":"StepAnimations","tags":["PluginSecurity"],"Class":"Animator","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"AssetService","tags":[]},{"ReturnType":"int64","Arguments":[{"Type":"string","Name":"placeName","Default":null},{"Type":"int64","Name":"templatePlaceID","Default":null},{"Type":"string","Name":"description","Default":""}],"Name":"CreatePlaceAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"int64","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"placeName","Default":null},{"Type":"int64","Name":"templatePlaceID","Default":null},{"Type":"string","Name":"description","Default":""}],"Name":"CreatePlaceInPlayerInventoryAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int64","Name":"packageAssetId","Default":null}],"Name":"GetAssetIdsForPackage","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"int64","Name":"assetId","Default":null},{"Type":"Vector2","Name":"thumbnailSize","Default":null},{"Type":"int","Name":"assetType","Default":"0"}],"Name":"GetAssetThumbnailAsync","tags":["RobloxScriptSecurity"],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"int64","Arguments":[{"Type":"int64","Name":"creationID","Default":null}],"Name":"GetCreatorAssetID","tags":["deprecated"],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[],"Name":"GetGamePlacesAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"void","Arguments":[],"Name":"SavePlaceAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Attachment","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Axis","tags":[],"Class":"Attachment"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"Orientation","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"Rotation","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"SecondaryAxis","tags":[],"Class":"Attachment"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldAxis","tags":["readonly"],"Class":"Attachment"},{"ValueType":"CoordinateFrame","type":"Property","Name":"WorldCFrame","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldOrientation","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldPosition","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldRotation","tags":["deprecated","readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldSecondaryAxis","tags":["readonly"],"Class":"Attachment"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetSecondaryAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"axis","Default":null}],"Name":"SetAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"axis","Default":null}],"Name":"SetSecondaryAxis","tags":[],"Class":"Attachment","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"BadgeService","tags":["notCreatable"]},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"int64","Name":"badgeId","Default":null}],"Name":"AwardBadge","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int64","Name":"badgeId","Default":null}],"Name":"GetBadgeInfoAsync","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"badgeId","Default":null}],"Name":"IsDisabled","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"badgeId","Default":null}],"Name":"IsLegal","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"int64","Name":"badgeId","Default":null}],"Name":"UserHasBadge","tags":["deprecated"],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"int64","Name":"badgeId","Default":null}],"Name":"UserHasBadgeAsync","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"userId","Type":"int64"},{"Name":"badgeId","Type":"int64"}],"Name":"BadgeAwarded","tags":["RobloxScriptSecurity"],"Class":"BadgeService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BasePlayerGui","tags":[]},{"Superclass":"BasePlayerGui","type":"Class","Name":"CoreGui","tags":["notCreatable"]},{"ValueType":"Class:GuiObject","type":"Property","Name":"SelectionImageObject","tags":["RobloxScriptSecurity"],"Class":"CoreGui"},{"ValueType":"int","type":"Property","Name":"Version","tags":["readonly"],"Class":"CoreGui"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null},{"Type":"Instance","Name":"guiAdornee","Default":null},{"Type":"NormalId","Name":"faceId","Default":null}],"Name":"SetUserGuiRendering","tags":["RobloxScriptSecurity"],"Class":"CoreGui","type":"Function"},{"Superclass":"BasePlayerGui","type":"Class","Name":"PlayerGui","tags":["notCreatable"]},{"ValueType":"ScreenOrientation","type":"Property","Name":"CurrentScreenOrientation","tags":["readonly"],"Class":"PlayerGui"},{"ValueType":"ScreenOrientation","type":"Property","Name":"ScreenOrientation","tags":[],"Class":"PlayerGui"},{"ValueType":"Class:GuiObject","type":"Property","Name":"SelectionImageObject","tags":[],"Class":"PlayerGui"},{"ReturnType":"float","Arguments":[],"Name":"GetTopbarTransparency","tags":[],"Class":"PlayerGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"transparency","Default":null}],"Name":"SetTopbarTransparency","tags":[],"Class":"PlayerGui","type":"Function"},{"Arguments":[{"Name":"transparency","Type":"float"}],"Name":"TopbarTransparencyChangedSignal","tags":[],"Class":"PlayerGui","type":"Event"},{"Superclass":"BasePlayerGui","type":"Class","Name":"StarterGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"ProcessUserInput","tags":["PluginSecurity","hidden"],"Class":"StarterGui"},{"ValueType":"bool","type":"Property","Name":"ResetPlayerGuiOnSpawn","tags":["deprecated"],"Class":"StarterGui"},{"ValueType":"ScreenOrientation","type":"Property","Name":"ScreenOrientation","tags":[],"Class":"StarterGui"},{"ValueType":"bool","type":"Property","Name":"ShowDevelopmentGui","tags":[],"Class":"StarterGui"},{"ReturnType":"bool","Arguments":[{"Type":"CoreGuiType","Name":"coreGuiType","Default":null}],"Name":"GetCoreGuiEnabled","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Function","Name":"getFunction","Default":null}],"Name":"RegisterGetCore","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Function","Name":"setFunction","Default":null}],"Name":"RegisterSetCore","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetCore","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoreGuiType","Name":"coreGuiType","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetCoreGuiEnabled","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"parameterName","Default":null}],"Name":"GetCore","tags":[],"Class":"StarterGui","type":"YieldFunction"},{"Arguments":[{"Name":"coreGuiType","Type":"CoreGuiType"},{"Name":"enabled","Type":"bool"}],"Name":"CoreGuiChangedSignal","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Beam","tags":[]},{"ValueType":"Class:Attachment","type":"Property","Name":"Attachment0","tags":[],"Class":"Beam"},{"ValueType":"Class:Attachment","type":"Property","Name":"Attachment1","tags":[],"Class":"Beam"},{"ValueType":"ColorSequence","type":"Property","Name":"Color","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"CurveSize0","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"CurveSize1","tags":[],"Class":"Beam"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Beam"},{"ValueType":"bool","type":"Property","Name":"FaceCamera","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"LightEmission","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"LightInfluence","tags":[],"Class":"Beam"},{"ValueType":"int","type":"Property","Name":"Segments","tags":[],"Class":"Beam"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"TextureLength","tags":[],"Class":"Beam"},{"ValueType":"TextureMode","type":"Property","Name":"TextureMode","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"TextureSpeed","tags":[],"Class":"Beam"},{"ValueType":"NumberSequence","type":"Property","Name":"Transparency","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"Width0","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"Width1","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"ZOffset","tags":[],"Class":"Beam"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"offset","Default":"0"}],"Name":"SetTextureOffset","tags":[],"Class":"Beam","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"BindableEvent","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"Fire","tags":[],"Class":"BindableEvent","type":"Function"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"Event","tags":[],"Class":"BindableEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BindableFunction","tags":[]},{"ReturnType":"Tuple","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"Invoke","tags":[],"Class":"BindableFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnInvoke","tags":[],"Class":"BindableFunction","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"BodyMover","tags":[]},{"Superclass":"BodyMover","type":"Class","Name":"BodyAngularVelocity","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"AngularVelocity","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"angularvelocity","tags":["deprecated"],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"maxTorque","tags":["deprecated"],"Class":"BodyAngularVelocity"},{"Superclass":"BodyMover","type":"Class","Name":"BodyForce","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Force","tags":[],"Class":"BodyForce"},{"ValueType":"Vector3","type":"Property","Name":"force","tags":["deprecated"],"Class":"BodyForce"},{"Superclass":"BodyMover","type":"Class","Name":"BodyGyro","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"BodyGyro"},{"ValueType":"float","type":"Property","Name":"D","tags":[],"Class":"BodyGyro"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"BodyGyro"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyGyro"},{"ValueType":"CoordinateFrame","type":"Property","Name":"cframe","tags":["deprecated"],"Class":"BodyGyro"},{"ValueType":"Vector3","type":"Property","Name":"maxTorque","tags":["deprecated"],"Class":"BodyGyro"},{"Superclass":"BodyMover","type":"Class","Name":"BodyPosition","tags":[]},{"ValueType":"float","type":"Property","Name":"D","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"MaxForce","tags":[],"Class":"BodyPosition"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"maxForce","tags":["deprecated"],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"position","tags":["deprecated"],"Class":"BodyPosition"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetLastForce","tags":[],"Class":"BodyPosition","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"lastForce","tags":["deprecated"],"Class":"BodyPosition","type":"Function"},{"Arguments":[],"Name":"ReachedTarget","tags":[],"Class":"BodyPosition","type":"Event"},{"Superclass":"BodyMover","type":"Class","Name":"BodyThrust","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Force","tags":[],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"Location","tags":[],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"force","tags":["deprecated"],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"location","tags":["deprecated"],"Class":"BodyThrust"},{"Superclass":"BodyMover","type":"Class","Name":"BodyVelocity","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"MaxForce","tags":[],"Class":"BodyVelocity"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"Velocity","tags":[],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"maxForce","tags":["deprecated"],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"velocity","tags":["deprecated"],"Class":"BodyVelocity"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetLastForce","tags":[],"Class":"BodyVelocity","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"lastForce","tags":[],"Class":"BodyVelocity","type":"Function"},{"Superclass":"BodyMover","type":"Class","Name":"RocketPropulsion","tags":[]},{"ValueType":"float","type":"Property","Name":"CartoonFactor","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"MaxSpeed","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"MaxThrust","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Class:BasePart","type":"Property","Name":"Target","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Vector3","type":"Property","Name":"TargetOffset","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TargetRadius","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"ThrustD","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"ThrustP","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TurnD","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TurnP","tags":[],"Class":"RocketPropulsion"},{"ReturnType":"void","Arguments":[],"Name":"Abort","tags":[],"Class":"RocketPropulsion","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Fire","tags":[],"Class":"RocketPropulsion","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"fire","tags":["deprecated"],"Class":"RocketPropulsion","type":"Function"},{"Arguments":[],"Name":"ReachedTarget","tags":[],"Class":"RocketPropulsion","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Button","tags":[]},{"ValueType":"bool","type":"Property","Name":"ClickableWhenViewportHidden","tags":[],"Class":"Button"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Button"},{"ValueType":"Content","type":"Property","Name":"Icon","tags":[],"Class":"Button"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"active","Default":null}],"Name":"SetActive","tags":["PluginSecurity"],"Class":"Button","type":"Function"},{"Arguments":[],"Name":"Click","tags":["PluginSecurity"],"Class":"Button","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CacheableContentProvider","tags":[]},{"Superclass":"CacheableContentProvider","type":"Class","Name":"MeshContentProvider","tags":[]},{"Superclass":"CacheableContentProvider","type":"Class","Name":"SolidModelContentProvider","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Camera","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Camera"},{"ValueType":"Class:Instance","type":"Property","Name":"CameraSubject","tags":[],"Class":"Camera"},{"ValueType":"CameraType","type":"Property","Name":"CameraType","tags":[],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CoordinateFrame","tags":["deprecated","hidden"],"Class":"Camera"},{"ValueType":"float","type":"Property","Name":"FieldOfView","tags":[],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Focus","tags":[],"Class":"Camera"},{"ValueType":"bool","type":"Property","Name":"HeadLocked","tags":[],"Class":"Camera"},{"ValueType":"float","type":"Property","Name":"HeadScale","tags":[],"Class":"Camera"},{"ValueType":"float","type":"Property","Name":"NearPlaneZ","tags":["readonly"],"Class":"Camera"},{"ValueType":"Vector2","type":"Property","Name":"ViewportSize","tags":["readonly"],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"focus","tags":["deprecated"],"Class":"Camera"},{"ReturnType":"float","Arguments":[{"Type":"Objects","Name":"ignoreList","Default":null}],"Name":"GetLargestCutoffDistance","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetPanSpeed","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Array","Name":"castPoints","Default":null},{"Type":"Objects","Name":"ignoreList","Default":null}],"Name":"GetPartsObscuringTarget","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetRenderCFrame","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetRoll","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetTiltSpeed","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"endPos","Default":null},{"Type":"CoordinateFrame","Name":"endFocus","Default":null},{"Type":"float","Name":"duration","Default":null}],"Name":"Interpolate","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"units","Default":null}],"Name":"PanUnits","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Ray","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"depth","Default":"0"}],"Name":"ScreenPointToRay","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CameraPanMode","Name":"mode","Default":"Classic"}],"Name":"SetCameraPanMode","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"rollAngle","Default":null}],"Name":"SetRoll","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"units","Default":null}],"Name":"TiltUnits","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Ray","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"depth","Default":"0"}],"Name":"ViewportPointToRay","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Vector3","Name":"worldPoint","Default":null}],"Name":"WorldToScreenPoint","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Vector3","Name":"worldPoint","Default":null}],"Name":"WorldToViewportPoint","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"float","Name":"distance","Default":null}],"Name":"Zoom","tags":["RobloxScriptSecurity"],"Class":"Camera","type":"Function"},{"Arguments":[{"Name":"entering","Type":"bool"}],"Name":"FirstPersonTransition","tags":["LocalUserSecurity"],"Class":"Camera","type":"Event"},{"Arguments":[],"Name":"InterpolationFinished","tags":[],"Class":"Camera","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ChangeHistoryService","tags":["notCreatable"]},{"ReturnType":"Tuple","Arguments":[],"Name":"GetCanRedo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetCanUndo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Redo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ResetWaypoints","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"state","Default":null}],"Name":"SetEnabled","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"SetWaypoint","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Undo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"Arguments":[{"Name":"waypoint","Type":"string"}],"Name":"OnRedo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Event"},{"Arguments":[{"Name":"waypoint","Type":"string"}],"Name":"OnUndo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CharacterAppearance","tags":[]},{"Superclass":"CharacterAppearance","type":"Class","Name":"BodyColors","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"HeadColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"HeadColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"LeftArmColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"LeftArmColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"LeftLegColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"LeftLegColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"RightArmColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"RightArmColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"RightLegColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"RightLegColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"TorsoColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"TorsoColor3","tags":[],"Class":"BodyColors"},{"Superclass":"CharacterAppearance","type":"Class","Name":"CharacterMesh","tags":[]},{"ValueType":"int64","type":"Property","Name":"BaseTextureId","tags":[],"Class":"CharacterMesh"},{"ValueType":"BodyPart","type":"Property","Name":"BodyPart","tags":[],"Class":"CharacterMesh"},{"ValueType":"int64","type":"Property","Name":"MeshId","tags":[],"Class":"CharacterMesh"},{"ValueType":"int64","type":"Property","Name":"OverlayTextureId","tags":[],"Class":"CharacterMesh"},{"Superclass":"CharacterAppearance","type":"Class","Name":"Clothing","tags":[]},{"Superclass":"Clothing","type":"Class","Name":"Pants","tags":[]},{"ValueType":"Content","type":"Property","Name":"PantsTemplate","tags":[],"Class":"Pants"},{"Superclass":"Clothing","type":"Class","Name":"Shirt","tags":[]},{"ValueType":"Content","type":"Property","Name":"ShirtTemplate","tags":[],"Class":"Shirt"},{"Superclass":"CharacterAppearance","type":"Class","Name":"ShirtGraphic","tags":[]},{"ValueType":"Content","type":"Property","Name":"Graphic","tags":[],"Class":"ShirtGraphic"},{"Superclass":"CharacterAppearance","type":"Class","Name":"Skin","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"SkinColor","tags":[],"Class":"Skin"},{"Superclass":"Instance","type":"Class","Name":"Chat","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"LoadDefaultChat","tags":["ScriptWriteRestricted: [NotAccessibleSecurity]"],"Class":"Chat"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"partOrCharacter","Default":null},{"Type":"string","Name":"message","Default":null},{"Type":"ChatColor","Name":"color","Default":"Blue"}],"Name":"Chat","tags":[],"Class":"Chat","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"partOrCharacter","Default":null},{"Type":"string","Name":"message","Default":null},{"Type":"ChatColor","Name":"color","Default":"Blue"}],"Name":"ChatLocal","tags":["RobloxScriptSecurity"],"Class":"Chat","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetShouldUseLuaChat","tags":["RobloxScriptSecurity"],"Class":"Chat","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"ChatCallbackType","Name":"callbackType","Default":null},{"Type":"Tuple","Name":"callbackArguments","Default":null}],"Name":"InvokeChatCallback","tags":[],"Class":"Chat","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ChatCallbackType","Name":"callbackType","Default":null},{"Type":"Function","Name":"callbackFunction","Default":null}],"Name":"RegisterChatCallback","tags":[],"Class":"Chat","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"CanUserChatAsync","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userIdFrom","Default":null},{"Type":"int64","Name":"userIdTo","Default":null}],"Name":"CanUsersChatAsync","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"Instance","Name":"playerFrom","Default":null},{"Type":"Instance","Name":"playerTo","Default":null}],"Name":"FilterStringAsync","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"Instance","Name":"playerFrom","Default":null}],"Name":"FilterStringForBroadcast","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"Instance","Name":"playerToFilterFor","Default":null}],"Name":"FilterStringForPlayerAsync","tags":["deprecated"],"Class":"Chat","type":"YieldFunction"},{"Arguments":[{"Name":"part","Type":"Instance"},{"Name":"message","Type":"string"},{"Name":"color","Type":"ChatColor"}],"Name":"Chatted","tags":[],"Class":"Chat","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ClickDetector","tags":[]},{"ValueType":"Content","type":"Property","Name":"CursorIcon","tags":[],"Class":"ClickDetector"},{"ValueType":"float","type":"Property","Name":"MaxActivationDistance","tags":[],"Class":"ClickDetector"},{"Arguments":[{"Name":"playerWhoClicked","Type":"Instance"}],"Name":"MouseClick","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoHovered","Type":"Instance"}],"Name":"MouseHoverEnter","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoHovered","Type":"Instance"}],"Name":"MouseHoverLeave","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoClicked","Type":"Instance"}],"Name":"RightMouseClick","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoClicked","Type":"Instance"}],"Name":"mouseClick","tags":["deprecated"],"Class":"ClickDetector","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ClusterPacketCache","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"CollectionService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"instance","Default":null},{"Type":"string","Name":"tag","Default":null}],"Name":"AddTag","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"string","Name":"class","Default":null}],"Name":"GetCollection","tags":["deprecated"],"Class":"CollectionService","type":"Function"},{"ReturnType":"EventInstance","Arguments":[{"Type":"string","Name":"tag","Default":null}],"Name":"GetInstanceAddedSignal","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"EventInstance","Arguments":[{"Type":"string","Name":"tag","Default":null}],"Name":"GetInstanceRemovedSignal","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"string","Name":"tag","Default":null}],"Name":"GetTagged","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"Instance","Name":"instance","Default":null}],"Name":"GetTags","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"instance","Default":null},{"Type":"string","Name":"tag","Default":null}],"Name":"HasTag","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"instance","Default":null},{"Type":"string","Name":"tag","Default":null}],"Name":"RemoveTag","tags":[],"Class":"CollectionService","type":"Function"},{"Arguments":[{"Name":"instance","Type":"Instance"}],"Name":"ItemAdded","tags":["deprecated"],"Class":"CollectionService","type":"Event"},{"Arguments":[{"Name":"instance","Type":"Instance"}],"Name":"ItemRemoved","tags":["deprecated"],"Class":"CollectionService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Configuration","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Constraint","tags":[]},{"ValueType":"Class:Attachment","type":"Property","Name":"Attachment0","tags":[],"Class":"Constraint"},{"ValueType":"Class:Attachment","type":"Property","Name":"Attachment1","tags":[],"Class":"Constraint"},{"ValueType":"BrickColor","type":"Property","Name":"Color","tags":[],"Class":"Constraint"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Constraint"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"Constraint"},{"Superclass":"Constraint","type":"Class","Name":"AlignOrientation","tags":[]},{"ValueType":"float","type":"Property","Name":"MaxAngularVelocity","tags":[],"Class":"AlignOrientation"},{"ValueType":"float","type":"Property","Name":"MaxTorque","tags":[],"Class":"AlignOrientation"},{"ValueType":"bool","type":"Property","Name":"PrimaryAxisOnly","tags":[],"Class":"AlignOrientation"},{"ValueType":"bool","type":"Property","Name":"ReactionTorqueEnabled","tags":[],"Class":"AlignOrientation"},{"ValueType":"float","type":"Property","Name":"Responsiveness","tags":[],"Class":"AlignOrientation"},{"ValueType":"bool","type":"Property","Name":"RigidityEnabled","tags":[],"Class":"AlignOrientation"},{"Superclass":"Constraint","type":"Class","Name":"AlignPosition","tags":[]},{"ValueType":"bool","type":"Property","Name":"ApplyAtCenterOfMass","tags":[],"Class":"AlignPosition"},{"ValueType":"float","type":"Property","Name":"MaxForce","tags":[],"Class":"AlignPosition"},{"ValueType":"float","type":"Property","Name":"MaxVelocity","tags":[],"Class":"AlignPosition"},{"ValueType":"bool","type":"Property","Name":"ReactionForceEnabled","tags":[],"Class":"AlignPosition"},{"ValueType":"float","type":"Property","Name":"Responsiveness","tags":[],"Class":"AlignPosition"},{"ValueType":"bool","type":"Property","Name":"RigidityEnabled","tags":[],"Class":"AlignPosition"},{"Superclass":"Constraint","type":"Class","Name":"BallSocketConstraint","tags":[]},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"bool","type":"Property","Name":"TwistLimitsEnabled","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"TwistLowerAngle","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"TwistUpperAngle","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"UpperAngle","tags":[],"Class":"BallSocketConstraint"},{"Superclass":"Constraint","type":"Class","Name":"HingeConstraint","tags":[]},{"ValueType":"ActuatorType","type":"Property","Name":"ActuatorType","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"AngularSpeed","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"AngularVelocity","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":["readonly"],"Class":"HingeConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"LowerAngle","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxAcceleration","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxTorque","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"ServoMaxTorque","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"TargetAngle","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"UpperAngle","tags":[],"Class":"HingeConstraint"},{"Superclass":"Constraint","type":"Class","Name":"LineForce","tags":[]},{"ValueType":"bool","type":"Property","Name":"ApplyAtCenterOfMass","tags":[],"Class":"LineForce"},{"ValueType":"bool","type":"Property","Name":"InverseSquareLaw","tags":[],"Class":"LineForce"},{"ValueType":"float","type":"Property","Name":"Magnitude","tags":[],"Class":"LineForce"},{"ValueType":"float","type":"Property","Name":"MaxForce","tags":[],"Class":"LineForce"},{"ValueType":"bool","type":"Property","Name":"ReactionForceEnabled","tags":[],"Class":"LineForce"},{"Superclass":"Constraint","type":"Class","Name":"RodConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentDistance","tags":["readonly"],"Class":"RodConstraint"},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"RodConstraint"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"RodConstraint"},{"Superclass":"Constraint","type":"Class","Name":"RopeConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentDistance","tags":["readonly"],"Class":"RopeConstraint"},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"RopeConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"RopeConstraint"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"RopeConstraint"},{"Superclass":"Constraint","type":"Class","Name":"SlidingBallConstraint","tags":[]},{"ValueType":"ActuatorType","type":"Property","Name":"ActuatorType","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentPosition","tags":["readonly"],"Class":"SlidingBallConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"LowerLimit","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxAcceleration","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxForce","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"ServoMaxForce","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Speed","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"TargetPosition","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"UpperLimit","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Velocity","tags":[],"Class":"SlidingBallConstraint"},{"Superclass":"SlidingBallConstraint","type":"Class","Name":"CylindricalConstraint","tags":[]},{"ValueType":"ActuatorType","type":"Property","Name":"AngularActuatorType","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"bool","type":"Property","Name":"AngularLimitsEnabled","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"AngularRestitution","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"AngularSpeed","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"AngularVelocity","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":["readonly"],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"InclinationAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"LowerAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxAngularAcceleration","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxTorque","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"bool","type":"Property","Name":"RotationAxisVisible","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"ServoMaxTorque","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"TargetAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"UpperAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"Vector3","type":"Property","Name":"WorldRotationAxis","tags":["readonly"],"Class":"CylindricalConstraint"},{"Superclass":"SlidingBallConstraint","type":"Class","Name":"PrismaticConstraint","tags":[]},{"Superclass":"Constraint","type":"Class","Name":"SpringConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"Coils","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentLength","tags":["readonly"],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Damping","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"FreeLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MaxForce","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MaxLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MinLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Stiffness","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"SpringConstraint"},{"Superclass":"Constraint","type":"Class","Name":"Torque","tags":[]},{"ValueType":"ActuatorRelativeTo","type":"Property","Name":"RelativeTo","tags":[],"Class":"Torque"},{"ValueType":"Vector3","type":"Property","Name":"Torque","tags":[],"Class":"Torque"},{"Superclass":"Constraint","type":"Class","Name":"VectorForce","tags":[]},{"ValueType":"bool","type":"Property","Name":"ApplyAtCenterOfMass","tags":[],"Class":"VectorForce"},{"ValueType":"Vector3","type":"Property","Name":"Force","tags":[],"Class":"VectorForce"},{"ValueType":"ActuatorRelativeTo","type":"Property","Name":"RelativeTo","tags":[],"Class":"VectorForce"},{"Superclass":"Instance","type":"Class","Name":"ContentProvider","tags":[]},{"ValueType":"string","type":"Property","Name":"BaseUrl","tags":["readonly"],"Class":"ContentProvider"},{"ValueType":"int","type":"Property","Name":"RequestQueueSize","tags":["readonly"],"Class":"ContentProvider"},{"ReturnType":"void","Arguments":[{"Type":"Content","Name":"contentId","Default":null}],"Name":"Preload","tags":["deprecated"],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetBaseUrl","tags":["LocalUserSecurity"],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Array","Name":"contentIdList","Default":null}],"Name":"PreloadAsync","tags":[],"Class":"ContentProvider","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"ContextActionService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindAction","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"int","Name":"priorityLevel","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindActionAtPriority","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindActionToInputTypes","tags":["deprecated"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"userInputTypeForActivation","Default":null},{"Type":"KeyCode","Name":"keyCodeForActivation","Default":"Unknown"}],"Name":"BindActivate","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindCoreAction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"int","Name":"priorityLevel","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindCoreActionAtPriority","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"UserInputState","Name":"state","Default":null},{"Type":"Instance","Name":"inputObject","Default":null}],"Name":"CallFunction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Instance","Name":"actionButton","Default":null}],"Name":"FireActionButtonFoundSignal","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetAllBoundActionInfo","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetAllBoundCoreActionInfo","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"GetBoundActionInfo","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"GetBoundCoreActionInfo","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetCurrentLocalToolIcon","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"description","Default":null}],"Name":"SetDescription","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"image","Default":null}],"Name":"SetImage","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"UDim2","Name":"position","Default":null}],"Name":"SetPosition","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"title","Default":null}],"Name":"SetTitle","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"UnbindAction","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"userInputTypeForActivation","Default":null},{"Type":"KeyCode","Name":"keyCodeForActivation","Default":"Unknown"}],"Name":"UnbindActivate","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"UnbindAllActions","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"UnbindCoreAction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"GetButton","tags":[],"Class":"ContextActionService","type":"YieldFunction"},{"Arguments":[{"Name":"actionAdded","Type":"string"},{"Name":"createTouchButton","Type":"bool"},{"Name":"functionInfoTable","Type":"Dictionary"},{"Name":"isCore","Type":"bool"}],"Name":"BoundActionAdded","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionChanged","Type":"string"},{"Name":"changeName","Type":"string"},{"Name":"changeTable","Type":"Dictionary"}],"Name":"BoundActionChanged","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionRemoved","Type":"string"},{"Name":"functionInfoTable","Type":"Dictionary"},{"Name":"isCore","Type":"bool"}],"Name":"BoundActionRemoved","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionName","Type":"string"}],"Name":"GetActionButtonEvent","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"toolEquipped","Type":"Instance"}],"Name":"LocalToolEquipped","tags":[],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"toolUnequipped","Type":"Instance"}],"Name":"LocalToolUnequipped","tags":[],"Class":"ContextActionService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Controller","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null},{"Type":"string","Name":"caption","Default":null}],"Name":"BindButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"GetButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"UnbindButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null},{"Type":"string","Name":"caption","Default":null}],"Name":"bindButton","tags":["deprecated"],"Class":"Controller","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"getButton","tags":["deprecated"],"Class":"Controller","type":"Function"},{"Arguments":[{"Name":"button","Type":"Button"}],"Name":"ButtonChanged","tags":[],"Class":"Controller","type":"Event"},{"Superclass":"Controller","type":"Class","Name":"HumanoidController","tags":[]},{"Superclass":"Controller","type":"Class","Name":"SkateboardController","tags":[]},{"ValueType":"float","type":"Property","Name":"Steer","tags":["readonly"],"Class":"SkateboardController"},{"ValueType":"float","type":"Property","Name":"Throttle","tags":["readonly"],"Class":"SkateboardController"},{"Arguments":[{"Name":"axis","Type":"string"}],"Name":"AxisChanged","tags":[],"Class":"SkateboardController","type":"Event"},{"Superclass":"Controller","type":"Class","Name":"VehicleController","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ControllerService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"CookiesService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"CorePackages","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"CustomEvent","tags":["deprecated"]},{"ReturnType":"Objects","Arguments":[],"Name":"GetAttachedReceivers","tags":[],"Class":"CustomEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"newValue","Default":null}],"Name":"SetValue","tags":[],"Class":"CustomEvent","type":"Function"},{"Arguments":[{"Name":"receiver","Type":"Instance"}],"Name":"ReceiverConnected","tags":[],"Class":"CustomEvent","type":"Event"},{"Arguments":[{"Name":"receiver","Type":"Instance"}],"Name":"ReceiverDisconnected","tags":[],"Class":"CustomEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CustomEventReceiver","tags":["deprecated"]},{"ValueType":"Class:Instance","type":"Property","Name":"Source","tags":[],"Class":"CustomEventReceiver"},{"ReturnType":"float","Arguments":[],"Name":"GetCurrentValue","tags":[],"Class":"CustomEventReceiver","type":"Function"},{"Arguments":[{"Name":"event","Type":"Instance"}],"Name":"EventConnected","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Arguments":[{"Name":"event","Type":"Instance"}],"Name":"EventDisconnected","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Arguments":[{"Name":"newValue","Type":"float"}],"Name":"SourceValueChanged","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DataModelMesh","tags":["notbrowsable"]},{"ValueType":"Vector3","type":"Property","Name":"Offset","tags":[],"Class":"DataModelMesh"},{"ValueType":"Vector3","type":"Property","Name":"Scale","tags":[],"Class":"DataModelMesh"},{"ValueType":"Vector3","type":"Property","Name":"VertexColor","tags":[],"Class":"DataModelMesh"},{"Superclass":"DataModelMesh","type":"Class","Name":"BevelMesh","tags":["deprecated","notbrowsable"]},{"Superclass":"BevelMesh","type":"Class","Name":"BlockMesh","tags":[]},{"Superclass":"BevelMesh","type":"Class","Name":"CylinderMesh","tags":["deprecated"]},{"Superclass":"DataModelMesh","type":"Class","Name":"FileMesh","tags":[]},{"ValueType":"Content","type":"Property","Name":"MeshId","tags":[],"Class":"FileMesh"},{"ValueType":"Content","type":"Property","Name":"TextureId","tags":[],"Class":"FileMesh"},{"Superclass":"FileMesh","type":"Class","Name":"SpecialMesh","tags":[]},{"ValueType":"MeshType","type":"Property","Name":"MeshType","tags":[],"Class":"SpecialMesh"},{"Superclass":"Instance","type":"Class","Name":"DataStoreService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AutomaticRetry","tags":["LocalUserSecurity"],"Class":"DataStoreService"},{"ValueType":"bool","type":"Property","Name":"LegacyNamingScheme","tags":["LocalUserSecurity","deprecated"],"Class":"DataStoreService"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"string","Name":"scope","Default":"global"}],"Name":"GetDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetGlobalDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"string","Name":"scope","Default":"global"}],"Name":"GetOrderedDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"DataStoreRequestType","Name":"requestType","Default":null}],"Name":"GetRequestBudgetForRequestType","tags":[],"Class":"DataStoreService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Debris","tags":[]},{"ValueType":"int","type":"Property","Name":"MaxItems","tags":["deprecated"],"Class":"Debris"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"item","Default":null},{"Type":"double","Name":"lifetime","Default":"10"}],"Name":"AddItem","tags":[],"Class":"Debris","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetLegacyMaxItems","tags":["LocalUserSecurity"],"Class":"Debris","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"item","Default":null},{"Type":"double","Name":"lifetime","Default":"10"}],"Name":"addItem","tags":["deprecated"],"Class":"Debris","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"DebugSettings","tags":["notbrowsable"]},{"ValueType":"int","type":"Property","Name":"DataModel","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"ErrorReporting","type":"Property","Name":"ErrorReporting","tags":[],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"GfxCard","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"InstanceCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"IsFmodProfilingEnabled","tags":[],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"IsScriptStackTracingEnabled","tags":[],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"JobCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"LuaRamLimit","tags":[],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"OsIs64Bit","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"OsPlatform","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"OsPlatformId","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"OsVer","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"PlayerCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"ReportSoundWarnings","tags":[],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"RobloxProductName","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"RobloxVersion","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"SIMD","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"SystemProductName","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"TickCountSampleMethod","type":"Property","Name":"TickCountPreciseOverride","tags":[],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"VideoMemory","tags":["readonly"],"Class":"DebugSettings"},{"Superclass":"Instance","type":"Class","Name":"DebuggerBreakpoint","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"Condition","tags":[],"Class":"DebuggerBreakpoint"},{"ValueType":"bool","type":"Property","Name":"IsEnabled","tags":[],"Class":"DebuggerBreakpoint"},{"ValueType":"int","type":"Property","Name":"Line","tags":["readonly"],"Class":"DebuggerBreakpoint"},{"Superclass":"Instance","type":"Class","Name":"DebuggerManager","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"DebuggingEnabled","tags":["readonly"],"Class":"DebuggerManager"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"script","Default":null}],"Name":"AddDebugger","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"EnableDebugging","tags":["LocalUserSecurity"],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetDebuggers","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepIn","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOut","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOver","tags":[],"Class":"DebuggerManager","type":"Function"},{"Arguments":[{"Name":"debugger","Type":"Instance"}],"Name":"DebuggerAdded","tags":[],"Class":"DebuggerManager","type":"Event"},{"Arguments":[{"Name":"debugger","Type":"Instance"}],"Name":"DebuggerRemoved","tags":[],"Class":"DebuggerManager","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DebuggerWatch","tags":[]},{"ValueType":"string","type":"Property","Name":"Expression","tags":[],"Class":"DebuggerWatch"},{"ReturnType":"void","Arguments":[],"Name":"CheckSyntax","tags":[],"Class":"DebuggerWatch","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Dialog","tags":[]},{"ValueType":"DialogBehaviorType","type":"Property","Name":"BehaviorType","tags":[],"Class":"Dialog"},{"ValueType":"float","type":"Property","Name":"ConversationDistance","tags":[],"Class":"Dialog"},{"ValueType":"bool","type":"Property","Name":"GoodbyeChoiceActive","tags":[],"Class":"Dialog"},{"ValueType":"string","type":"Property","Name":"GoodbyeDialog","tags":[],"Class":"Dialog"},{"ValueType":"bool","type":"Property","Name":"InUse","tags":[],"Class":"Dialog"},{"ValueType":"string","type":"Property","Name":"InitialPrompt","tags":[],"Class":"Dialog"},{"ValueType":"DialogPurpose","type":"Property","Name":"Purpose","tags":[],"Class":"Dialog"},{"ValueType":"DialogTone","type":"Property","Name":"Tone","tags":[],"Class":"Dialog"},{"ValueType":"float","type":"Property","Name":"TriggerDistance","tags":[],"Class":"Dialog"},{"ValueType":"Vector3","type":"Property","Name":"TriggerOffset","tags":[],"Class":"Dialog"},{"ReturnType":"Objects","Arguments":[],"Name":"GetCurrentPlayers","tags":[],"Class":"Dialog","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"bool","Name":"isUsing","Default":null}],"Name":"SetPlayerIsUsing","tags":["RobloxScriptSecurity"],"Class":"Dialog","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Instance","Name":"dialogChoice","Default":null}],"Name":"SignalDialogChoiceSelected","tags":["RobloxScriptSecurity"],"Class":"Dialog","type":"Function"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"dialogChoice","Type":"Instance"}],"Name":"DialogChoiceSelected","tags":[],"Class":"Dialog","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DialogChoice","tags":[]},{"ValueType":"bool","type":"Property","Name":"GoodbyeChoiceActive","tags":[],"Class":"DialogChoice"},{"ValueType":"string","type":"Property","Name":"GoodbyeDialog","tags":[],"Class":"DialogChoice"},{"ValueType":"string","type":"Property","Name":"ResponseDialog","tags":[],"Class":"DialogChoice"},{"ValueType":"string","type":"Property","Name":"UserDialog","tags":[],"Class":"DialogChoice"},{"Superclass":"Instance","type":"Class","Name":"Dragger","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Axis","Name":"axis","Default":"X"}],"Name":"AxisRotate","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"mousePart","Default":null},{"Type":"Vector3","Name":"pointOnMousePart","Default":null},{"Type":"Objects","Name":"parts","Default":null}],"Name":"MouseDown","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Ray","Name":"mouseRay","Default":null}],"Name":"MouseMove","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MouseUp","tags":[],"Class":"Dragger","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Explosion","tags":[]},{"ValueType":"float","type":"Property","Name":"BlastPressure","tags":[],"Class":"Explosion"},{"ValueType":"float","type":"Property","Name":"BlastRadius","tags":[],"Class":"Explosion"},{"ValueType":"float","type":"Property","Name":"DestroyJointRadiusPercent","tags":[],"Class":"Explosion"},{"ValueType":"ExplosionType","type":"Property","Name":"ExplosionType","tags":[],"Class":"Explosion"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"Explosion"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"Explosion"},{"Arguments":[{"Name":"part","Type":"Instance"},{"Name":"distance","Type":"float"}],"Name":"Hit","tags":[],"Class":"Explosion","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"FaceInstance","tags":["notbrowsable"]},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"FaceInstance"},{"Superclass":"FaceInstance","type":"Class","Name":"Decal","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color3","tags":[],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"LocalTransparencyModifier","tags":["hidden"],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Shiny","tags":["deprecated"],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Specular","tags":["deprecated"],"Class":"Decal"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"Decal"},{"Superclass":"Decal","type":"Class","Name":"Texture","tags":[]},{"ValueType":"float","type":"Property","Name":"StudsPerTileU","tags":[],"Class":"Texture"},{"ValueType":"float","type":"Property","Name":"StudsPerTileV","tags":[],"Class":"Texture"},{"Superclass":"Instance","type":"Class","Name":"Feature","tags":[]},{"ValueType":"NormalId","type":"Property","Name":"FaceId","tags":[],"Class":"Feature"},{"ValueType":"InOut","type":"Property","Name":"InOut","tags":[],"Class":"Feature"},{"ValueType":"LeftRight","type":"Property","Name":"LeftRight","tags":[],"Class":"Feature"},{"ValueType":"TopBottom","type":"Property","Name":"TopBottom","tags":[],"Class":"Feature"},{"Superclass":"Feature","type":"Class","Name":"Hole","tags":["deprecated"]},{"Superclass":"Feature","type":"Class","Name":"MotorFeature","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"Fire","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Fire"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"Heat","tags":[],"Class":"Fire"},{"ValueType":"Color3","type":"Property","Name":"SecondaryColor","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"size","tags":["deprecated"],"Class":"Fire"},{"Superclass":"Instance","type":"Class","Name":"FlagStandService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"FlyweightService","tags":[]},{"Superclass":"FlyweightService","type":"Class","Name":"CSGDictionaryService","tags":[]},{"Superclass":"FlyweightService","type":"Class","Name":"NonReplicatedCSGDictionaryService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Folder","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ForceField","tags":[]},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"ForceField"},{"Superclass":"Instance","type":"Class","Name":"FriendService","tags":["notCreatable"]},{"ReturnType":"Array","Arguments":[],"Name":"GetPlatformFriends","tags":["RobloxScriptSecurity"],"Class":"FriendService","type":"YieldFunction"},{"Arguments":[{"Name":"friendData","Type":"Array"}],"Name":"FriendsUpdated","tags":["RobloxScriptSecurity"],"Class":"FriendService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"FunctionalTest","tags":["deprecated"]},{"ValueType":"string","type":"Property","Name":"Description","tags":[],"Class":"FunctionalTest"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Error","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Failed","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Pass","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Passed","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Warn","tags":[],"Class":"FunctionalTest","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"GamePassService","tags":[]},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int64","Name":"gamePassId","Default":null}],"Name":"PlayerHasPass","tags":[],"Class":"GamePassService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GameSettings","tags":["notbrowsable"]},{"ValueType":"string","type":"Property","Name":"AdditionalCoreIncludeDirs","tags":[],"Class":"GameSettings"},{"ValueType":"float","type":"Property","Name":"BubbleChatLifetime","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"BubbleChatMaxBubbles","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ChatHistory","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ChatScrollLength","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"CollisionSoundEnabled","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"float","type":"Property","Name":"CollisionSoundVolume","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"HardwareMouse","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"MaxCollisionSounds","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"string","type":"Property","Name":"OverrideStarterScript","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ReportAbuseChatHistory","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"SoftwareSound","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"VideoCaptureEnabled","tags":[],"Class":"GameSettings"},{"ValueType":"VideoQualitySettings","type":"Property","Name":"VideoQuality","tags":[],"Class":"GameSettings"},{"Arguments":[{"Name":"recording","Type":"bool"}],"Name":"VideoRecordingChangeRequest","tags":["RobloxScriptSecurity"],"Class":"GameSettings","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"GamepadService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Geometry","tags":[]},{"Superclass":"Instance","type":"Class","Name":"GlobalDataStore","tags":[]},{"ReturnType":"Connection","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Function","Name":"callback","Default":null}],"Name":"OnUpdate","tags":[],"Class":"GlobalDataStore","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"GetAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"int","Name":"delta","Default":"1"}],"Name":"IncrementAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"RemoveAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Function","Name":"transformFunction","Default":null}],"Name":"UpdateAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"Superclass":"GlobalDataStore","type":"Class","Name":"OrderedDataStore","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"bool","Name":"ascending","Default":null},{"Type":"int","Name":"pagesize","Default":null},{"Type":"Variant","Name":"minValue","Default":null},{"Type":"Variant","Name":"maxValue","Default":null}],"Name":"GetSortedAsync","tags":[],"Class":"OrderedDataStore","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GoogleAnalyticsConfiguration","tags":[]},{"Superclass":"Instance","type":"Class","Name":"GroupService","tags":["notCreatable"]},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"groupId","Default":null}],"Name":"GetAlliesAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"groupId","Default":null}],"Name":"GetEnemiesAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Variant","Arguments":[{"Type":"int64","Name":"groupId","Default":null}],"Name":"GetGroupInfoAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetGroupsAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GuiBase","tags":[]},{"Superclass":"GuiBase","type":"Class","Name":"GuiBase2d","tags":["notbrowsable"]},{"ValueType":"Vector2","type":"Property","Name":"AbsolutePosition","tags":["readonly"],"Class":"GuiBase2d"},{"ValueType":"float","type":"Property","Name":"AbsoluteRotation","tags":["readonly"],"Class":"GuiBase2d"},{"ValueType":"Vector2","type":"Property","Name":"AbsoluteSize","tags":["readonly"],"Class":"GuiBase2d"},{"ValueType":"bool","type":"Property","Name":"AutoLocalize","tags":[],"Class":"GuiBase2d"},{"ValueType":"bool","type":"Property","Name":"Localize","tags":["deprecated","hidden"],"Class":"GuiBase2d"},{"ValueType":"Class:LocalizationTable","type":"Property","Name":"RootLocalizationTable","tags":[],"Class":"GuiBase2d"},{"Superclass":"GuiBase2d","type":"Class","Name":"GuiObject","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"GuiObject"},{"ValueType":"Vector2","type":"Property","Name":"AnchorPoint","tags":[],"Class":"GuiObject"},{"ValueType":"BrickColor","type":"Property","Name":"BackgroundColor","tags":["deprecated","hidden"],"Class":"GuiObject"},{"ValueType":"Color3","type":"Property","Name":"BackgroundColor3","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"BackgroundTransparency","tags":[],"Class":"GuiObject"},{"ValueType":"BrickColor","type":"Property","Name":"BorderColor","tags":["deprecated","hidden"],"Class":"GuiObject"},{"ValueType":"Color3","type":"Property","Name":"BorderColor3","tags":[],"Class":"GuiObject"},{"ValueType":"int","type":"Property","Name":"BorderSizePixel","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"ClipsDescendants","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Draggable","tags":["deprecated"],"Class":"GuiObject"},{"ValueType":"int","type":"Property","Name":"LayoutOrder","tags":[],"Class":"GuiObject"},{"ValueType":"Class:GuiObject","type":"Property","Name":"NextSelectionDown","tags":[],"Class":"GuiObject"},{"ValueType":"Class:GuiObject","type":"Property","Name":"NextSelectionLeft","tags":[],"Class":"GuiObject"},{"ValueType":"Class:GuiObject","type":"Property","Name":"NextSelectionRight","tags":[],"Class":"GuiObject"},{"ValueType":"Class:GuiObject","type":"Property","Name":"NextSelectionUp","tags":[],"Class":"GuiObject"},{"ValueType":"UDim2","type":"Property","Name":"Position","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"Rotation","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Selectable","tags":[],"Class":"GuiObject"},{"ValueType":"Class:GuiObject","type":"Property","Name":"SelectionImageObject","tags":[],"Class":"GuiObject"},{"ValueType":"UDim2","type":"Property","Name":"Size","tags":[],"Class":"GuiObject"},{"ValueType":"SizeConstraint","type":"Property","Name":"SizeConstraint","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":["hidden"],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"GuiObject"},{"ValueType":"int","type":"Property","Name":"ZIndex","tags":[],"Class":"GuiObject"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endPosition","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenPosition","tags":[],"Class":"GuiObject","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endSize","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenSize","tags":[],"Class":"GuiObject","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endSize","Default":null},{"Type":"UDim2","Name":"endPosition","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenSizeAndPosition","tags":[],"Class":"GuiObject","type":"Function"},{"Arguments":[{"Name":"initialPosition","Type":"UDim2"}],"Name":"DragBegin","tags":["deprecated"],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"DragStopped","tags":["deprecated"],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputBegan","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputChanged","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputEnded","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseEnter","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseLeave","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseMoved","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseWheelBackward","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseWheelForward","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[],"Name":"SelectionGained","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[],"Name":"SelectionLost","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchLongPress","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"totalTranslation","Type":"Vector2"},{"Name":"velocity","Type":"Vector2"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchPan","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"scale","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchPinch","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"rotation","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchRotate","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"swipeDirection","Type":"SwipeDirection"},{"Name":"numberOfTouches","Type":"int"}],"Name":"TouchSwipe","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"}],"Name":"TouchTap","tags":[],"Class":"GuiObject","type":"Event"},{"Superclass":"GuiObject","type":"Class","Name":"Frame","tags":[]},{"ValueType":"FrameStyle","type":"Property","Name":"Style","tags":[],"Class":"Frame"},{"Superclass":"GuiObject","type":"Class","Name":"GuiButton","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"AutoButtonColor","tags":[],"Class":"GuiButton"},{"ValueType":"bool","type":"Property","Name":"Modal","tags":[],"Class":"GuiButton"},{"ValueType":"bool","type":"Property","Name":"Selected","tags":[],"Class":"GuiButton"},{"ValueType":"ButtonStyle","type":"Property","Name":"Style","tags":[],"Class":"GuiButton"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"verb","Default":null}],"Name":"SetVerb","tags":["RobloxScriptSecurity"],"Class":"GuiButton","type":"Function"},{"Arguments":[{"Name":"inputObject","Type":"Instance"}],"Name":"Activated","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[],"Name":"MouseButton1Click","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton1Down","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton1Up","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[],"Name":"MouseButton2Click","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton2Down","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton2Up","tags":[],"Class":"GuiButton","type":"Event"},{"Superclass":"GuiButton","type":"Class","Name":"ImageButton","tags":[]},{"ValueType":"Content","type":"Property","Name":"HoverImage","tags":[],"Class":"ImageButton"},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageButton"},{"ValueType":"Color3","type":"Property","Name":"ImageColor3","tags":[],"Class":"ImageButton"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectOffset","tags":[],"Class":"ImageButton"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectSize","tags":[],"Class":"ImageButton"},{"ValueType":"float","type":"Property","Name":"ImageTransparency","tags":[],"Class":"ImageButton"},{"ValueType":"bool","type":"Property","Name":"IsLoaded","tags":["readonly"],"Class":"ImageButton"},{"ValueType":"Content","type":"Property","Name":"PressedImage","tags":[],"Class":"ImageButton"},{"ValueType":"ScaleType","type":"Property","Name":"ScaleType","tags":[],"Class":"ImageButton"},{"ValueType":"Rect2D","type":"Property","Name":"SliceCenter","tags":[],"Class":"ImageButton"},{"ValueType":"float","type":"Property","Name":"SliceScale","tags":[],"Class":"ImageButton"},{"ValueType":"UDim2","type":"Property","Name":"TileSize","tags":[],"Class":"ImageButton"},{"Superclass":"GuiButton","type":"Class","Name":"TextButton","tags":[]},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextButton"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":["deprecated"],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"LineHeight","tags":[],"Class":"TextButton"},{"ValueType":"string","type":"Property","Name":"LocalizedText","tags":["hidden","readonly"],"Class":"TextButton"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextButton"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextButton"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextButton"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"TextSize","tags":[],"Class":"TextButton"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextButton"},{"ValueType":"TextTruncate","type":"Property","Name":"TextTruncate","tags":[],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextButton"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextButton"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextButton"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null}],"Name":"SetTextFromInput","tags":["RobloxScriptSecurity"],"Class":"TextButton","type":"Function"},{"Superclass":"GuiObject","type":"Class","Name":"GuiLabel","tags":[]},{"Superclass":"GuiLabel","type":"Class","Name":"ImageLabel","tags":[]},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageLabel"},{"ValueType":"Color3","type":"Property","Name":"ImageColor3","tags":[],"Class":"ImageLabel"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectOffset","tags":[],"Class":"ImageLabel"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectSize","tags":[],"Class":"ImageLabel"},{"ValueType":"float","type":"Property","Name":"ImageTransparency","tags":[],"Class":"ImageLabel"},{"ValueType":"bool","type":"Property","Name":"IsLoaded","tags":["readonly"],"Class":"ImageLabel"},{"ValueType":"ScaleType","type":"Property","Name":"ScaleType","tags":[],"Class":"ImageLabel"},{"ValueType":"Rect2D","type":"Property","Name":"SliceCenter","tags":[],"Class":"ImageLabel"},{"ValueType":"float","type":"Property","Name":"SliceScale","tags":[],"Class":"ImageLabel"},{"ValueType":"UDim2","type":"Property","Name":"TileSize","tags":[],"Class":"ImageLabel"},{"Superclass":"GuiLabel","type":"Class","Name":"TextLabel","tags":[]},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextLabel"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":["deprecated"],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"LineHeight","tags":[],"Class":"TextLabel"},{"ValueType":"string","type":"Property","Name":"LocalizedText","tags":["hidden","readonly"],"Class":"TextLabel"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextLabel"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextLabel"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextLabel"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"TextSize","tags":[],"Class":"TextLabel"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextLabel"},{"ValueType":"TextTruncate","type":"Property","Name":"TextTruncate","tags":[],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextLabel"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextLabel"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextLabel"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null}],"Name":"SetTextFromInput","tags":["RobloxScriptSecurity"],"Class":"TextLabel","type":"Function"},{"Superclass":"GuiObject","type":"Class","Name":"ScrollingFrame","tags":[]},{"ValueType":"Vector2","type":"Property","Name":"AbsoluteWindowSize","tags":["readonly"],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"BottomImage","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Vector2","type":"Property","Name":"CanvasPosition","tags":[],"Class":"ScrollingFrame"},{"ValueType":"UDim2","type":"Property","Name":"CanvasSize","tags":[],"Class":"ScrollingFrame"},{"ValueType":"ElasticBehavior","type":"Property","Name":"ElasticBehavior","tags":[],"Class":"ScrollingFrame"},{"ValueType":"ScrollBarInset","type":"Property","Name":"HorizontalScrollBarInset","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"MidImage","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Color3","type":"Property","Name":"ScrollBarImageColor3","tags":[],"Class":"ScrollingFrame"},{"ValueType":"float","type":"Property","Name":"ScrollBarImageTransparency","tags":[],"Class":"ScrollingFrame"},{"ValueType":"int","type":"Property","Name":"ScrollBarThickness","tags":[],"Class":"ScrollingFrame"},{"ValueType":"ScrollingDirection","type":"Property","Name":"ScrollingDirection","tags":[],"Class":"ScrollingFrame"},{"ValueType":"bool","type":"Property","Name":"ScrollingEnabled","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"TopImage","tags":[],"Class":"ScrollingFrame"},{"ValueType":"ScrollBarInset","type":"Property","Name":"VerticalScrollBarInset","tags":[],"Class":"ScrollingFrame"},{"ValueType":"VerticalScrollBarPosition","type":"Property","Name":"VerticalScrollBarPosition","tags":[],"Class":"ScrollingFrame"},{"ReturnType":"void","Arguments":[],"Name":"ScrollToTop","tags":["RobloxScriptSecurity"],"Class":"ScrollingFrame","type":"Function"},{"Superclass":"GuiObject","type":"Class","Name":"TextBox","tags":[]},{"ValueType":"bool","type":"Property","Name":"ClearTextOnFocus","tags":[],"Class":"TextBox"},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextBox"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":["deprecated"],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"LineHeight","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"ManualFocusRelease","tags":["RobloxScriptSecurity"],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"MultiLine","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"OverlayNativeInput","tags":["RobloxScriptSecurity"],"Class":"TextBox"},{"ValueType":"Color3","type":"Property","Name":"PlaceholderColor3","tags":[],"Class":"TextBox"},{"ValueType":"string","type":"Property","Name":"PlaceholderText","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"ShowNativeInput","tags":[],"Class":"TextBox"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextBox"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextBox"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextBox"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"TextSize","tags":[],"Class":"TextBox"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextBox"},{"ValueType":"TextTruncate","type":"Property","Name":"TextTruncate","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextBox"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextBox"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextBox"},{"ReturnType":"void","Arguments":[],"Name":"CaptureFocus","tags":[],"Class":"TextBox","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsFocused","tags":[],"Class":"TextBox","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"submitted","Default":"false"}],"Name":"ReleaseFocus","tags":[],"Class":"TextBox","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ResetKeyboardMode","tags":["RobloxScriptSecurity"],"Class":"TextBox","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null}],"Name":"SetTextFromInput","tags":["RobloxScriptSecurity"],"Class":"TextBox","type":"Function"},{"Arguments":[{"Name":"enterPressed","Type":"bool"},{"Name":"inputThatCausedFocusLoss","Type":"Instance"}],"Name":"FocusLost","tags":[],"Class":"TextBox","type":"Event"},{"Arguments":[],"Name":"Focused","tags":[],"Class":"TextBox","type":"Event"},{"Superclass":"GuiBase2d","type":"Class","Name":"LayerCollector","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"LayerCollector"},{"ValueType":"bool","type":"Property","Name":"ResetOnSpawn","tags":[],"Class":"LayerCollector"},{"ValueType":"ZIndexBehavior","type":"Property","Name":"ZIndexBehavior","tags":[],"Class":"LayerCollector"},{"Superclass":"LayerCollector","type":"Class","Name":"BillboardGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"BillboardGui"},{"ValueType":"Class:Instance","type":"Property","Name":"Adornee","tags":[],"Class":"BillboardGui"},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"BillboardGui"},{"ValueType":"bool","type":"Property","Name":"ClipsDescendants","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"ExtentsOffset","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"ExtentsOffsetWorldSpace","tags":[],"Class":"BillboardGui"},{"ValueType":"float","type":"Property","Name":"LightInfluence","tags":[],"Class":"BillboardGui"},{"ValueType":"float","type":"Property","Name":"MaxDistance","tags":[],"Class":"BillboardGui"},{"ValueType":"Class:Instance","type":"Property","Name":"PlayerToHideFrom","tags":[],"Class":"BillboardGui"},{"ValueType":"UDim2","type":"Property","Name":"Size","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector2","type":"Property","Name":"SizeOffset","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"StudsOffset","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"StudsOffsetWorldSpace","tags":[],"Class":"BillboardGui"},{"Superclass":"LayerCollector","type":"Class","Name":"PluginGui","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"Title","tags":[],"Class":"PluginGui"},{"ReturnType":"void","Arguments":[{"Type":"Function","Name":"function","Default":"nil"}],"Name":"BindToClose","tags":[],"Class":"PluginGui","type":"Function"},{"ReturnType":"Vector2","Arguments":[],"Name":"GetRelativeMousePosition","tags":["PluginSecurity"],"Class":"PluginGui","type":"Function"},{"Arguments":[{"Name":"pluginDragEvent","Type":"Instance"}],"Name":"PluginDragDropped","tags":["RobloxScriptSecurity"],"Class":"PluginGui","type":"Event"},{"Arguments":[{"Name":"pluginDragEvent","Type":"Instance"}],"Name":"PluginDragEntered","tags":["RobloxScriptSecurity"],"Class":"PluginGui","type":"Event"},{"Arguments":[{"Name":"pluginDragEvent","Type":"Instance"}],"Name":"PluginDragLeft","tags":["RobloxScriptSecurity"],"Class":"PluginGui","type":"Event"},{"Arguments":[{"Name":"pluginDragEvent","Type":"Instance"}],"Name":"PluginDragMoved","tags":["RobloxScriptSecurity"],"Class":"PluginGui","type":"Event"},{"Arguments":[],"Name":"WindowFocusReleased","tags":["PluginSecurity"],"Class":"PluginGui","type":"Event"},{"Arguments":[],"Name":"WindowFocused","tags":["PluginSecurity"],"Class":"PluginGui","type":"Event"},{"Superclass":"PluginGui","type":"Class","Name":"DockWidgetPluginGui","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"HostWidgetWasRestored","tags":["readonly"],"Class":"DockWidgetPluginGui"},{"Superclass":"PluginGui","type":"Class","Name":"QWidgetPluginGui","tags":["notCreatable"]},{"Superclass":"LayerCollector","type":"Class","Name":"ScreenGui","tags":[]},{"ValueType":"int","type":"Property","Name":"DisplayOrder","tags":[],"Class":"ScreenGui"},{"ValueType":"bool","type":"Property","Name":"IgnoreGuiInset","tags":[],"Class":"ScreenGui"},{"ValueType":"bool","type":"Property","Name":"OnTopOfCoreBlur","tags":["RobloxScriptSecurity","hidden"],"Class":"ScreenGui"},{"Superclass":"ScreenGui","type":"Class","Name":"GuiMain","tags":["deprecated"]},{"Superclass":"LayerCollector","type":"Class","Name":"SurfaceGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"SurfaceGui"},{"ValueType":"Class:Instance","type":"Property","Name":"Adornee","tags":[],"Class":"SurfaceGui"},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"SurfaceGui"},{"ValueType":"Vector2","type":"Property","Name":"CanvasSize","tags":[],"Class":"SurfaceGui"},{"ValueType":"bool","type":"Property","Name":"ClipsDescendants","tags":[],"Class":"SurfaceGui"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SurfaceGui"},{"ValueType":"float","type":"Property","Name":"LightInfluence","tags":[],"Class":"SurfaceGui"},{"ValueType":"float","type":"Property","Name":"ToolPunchThroughDistance","tags":[],"Class":"SurfaceGui"},{"ValueType":"float","type":"Property","Name":"ZOffset","tags":[],"Class":"SurfaceGui"},{"Superclass":"GuiBase","type":"Class","Name":"GuiBase3d","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"Color","tags":["deprecated","hidden"],"Class":"GuiBase3d"},{"ValueType":"Color3","type":"Property","Name":"Color3","tags":[],"Class":"GuiBase3d"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"GuiBase3d"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"GuiBase3d"},{"Superclass":"GuiBase3d","type":"Class","Name":"FloorWire","tags":["deprecated"]},{"ValueType":"float","type":"Property","Name":"CycleOffset","tags":[],"Class":"FloorWire"},{"ValueType":"Class:BasePart","type":"Property","Name":"From","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"StudsBetweenTextures","tags":[],"Class":"FloorWire"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"FloorWire"},{"ValueType":"Vector2","type":"Property","Name":"TextureSize","tags":[],"Class":"FloorWire"},{"ValueType":"Class:BasePart","type":"Property","Name":"To","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"Velocity","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"WireRadius","tags":[],"Class":"FloorWire"},{"Superclass":"GuiBase3d","type":"Class","Name":"PVAdornment","tags":[]},{"ValueType":"Class:PVInstance","type":"Property","Name":"Adornee","tags":[],"Class":"PVAdornment"},{"Superclass":"PVAdornment","type":"Class","Name":"HandleAdornment","tags":[]},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"HandleAdornment"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"HandleAdornment"},{"ValueType":"Vector3","type":"Property","Name":"SizeRelativeOffset","tags":[],"Class":"HandleAdornment"},{"ValueType":"int","type":"Property","Name":"ZIndex","tags":[],"Class":"HandleAdornment"},{"Arguments":[],"Name":"MouseButton1Down","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseButton1Up","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseEnter","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseLeave","tags":[],"Class":"HandleAdornment","type":"Event"},{"Superclass":"HandleAdornment","type":"Class","Name":"BoxHandleAdornment","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Size","tags":[],"Class":"BoxHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"ConeHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Height","tags":[],"Class":"ConeHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"ConeHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"CylinderHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Height","tags":[],"Class":"CylinderHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"CylinderHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"ImageHandleAdornment","tags":[]},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageHandleAdornment"},{"ValueType":"Vector2","type":"Property","Name":"Size","tags":[],"Class":"ImageHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"LineHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"LineHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"LineHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"SphereHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"SphereHandleAdornment"},{"Superclass":"PVAdornment","type":"Class","Name":"ParabolaAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"A","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ValueType":"float","type":"Property","Name":"B","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ValueType":"float","type":"Property","Name":"C","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ValueType":"float","type":"Property","Name":"Range","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ReturnType":"Tuple","Arguments":[{"Type":"Objects","Name":"ignoreDescendentsTable","Default":null}],"Name":"FindPartOnParabola","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment","type":"Function"},{"Superclass":"PVAdornment","type":"Class","Name":"SelectionBox","tags":[]},{"ValueType":"float","type":"Property","Name":"LineThickness","tags":[],"Class":"SelectionBox"},{"ValueType":"BrickColor","type":"Property","Name":"SurfaceColor","tags":["deprecated","hidden"],"Class":"SelectionBox"},{"ValueType":"Color3","type":"Property","Name":"SurfaceColor3","tags":[],"Class":"SelectionBox"},{"ValueType":"float","type":"Property","Name":"SurfaceTransparency","tags":[],"Class":"SelectionBox"},{"Superclass":"PVAdornment","type":"Class","Name":"SelectionSphere","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"SurfaceColor","tags":["deprecated","hidden"],"Class":"SelectionSphere"},{"ValueType":"Color3","type":"Property","Name":"SurfaceColor3","tags":[],"Class":"SelectionSphere"},{"ValueType":"float","type":"Property","Name":"SurfaceTransparency","tags":[],"Class":"SelectionSphere"},{"Superclass":"GuiBase3d","type":"Class","Name":"PartAdornment","tags":[]},{"ValueType":"Class:BasePart","type":"Property","Name":"Adornee","tags":[],"Class":"PartAdornment"},{"Superclass":"PartAdornment","type":"Class","Name":"HandlesBase","tags":[]},{"Superclass":"HandlesBase","type":"Class","Name":"ArcHandles","tags":[]},{"ValueType":"Axes","type":"Property","Name":"Axes","tags":[],"Class":"ArcHandles"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseButton1Down","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseButton1Up","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"},{"Name":"relativeAngle","Type":"float"},{"Name":"deltaRadius","Type":"float"}],"Name":"MouseDrag","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseEnter","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseLeave","tags":[],"Class":"ArcHandles","type":"Event"},{"Superclass":"HandlesBase","type":"Class","Name":"Handles","tags":[]},{"ValueType":"Faces","type":"Property","Name":"Faces","tags":[],"Class":"Handles"},{"ValueType":"HandlesStyle","type":"Property","Name":"Style","tags":[],"Class":"Handles"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseButton1Down","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseButton1Up","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"},{"Name":"distance","Type":"float"}],"Name":"MouseDrag","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseEnter","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseLeave","tags":[],"Class":"Handles","type":"Event"},{"Superclass":"PartAdornment","type":"Class","Name":"SurfaceSelection","tags":[]},{"ValueType":"NormalId","type":"Property","Name":"TargetSurface","tags":[],"Class":"SurfaceSelection"},{"Superclass":"GuiBase3d","type":"Class","Name":"SelectionLasso","tags":[]},{"ValueType":"Class:Humanoid","type":"Property","Name":"Humanoid","tags":[],"Class":"SelectionLasso"},{"Superclass":"SelectionLasso","type":"Class","Name":"SelectionPartLasso","tags":["deprecated"]},{"ValueType":"Class:BasePart","type":"Property","Name":"Part","tags":[],"Class":"SelectionPartLasso"},{"Superclass":"SelectionLasso","type":"Class","Name":"SelectionPointLasso","tags":["deprecated"]},{"ValueType":"Vector3","type":"Property","Name":"Point","tags":[],"Class":"SelectionPointLasso"},{"Superclass":"Instance","type":"Class","Name":"GuiItem","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"Backpack","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"BackpackItem","tags":[]},{"ValueType":"Content","type":"Property","Name":"TextureId","tags":[],"Class":"BackpackItem"},{"Superclass":"BackpackItem","type":"Class","Name":"HopperBin","tags":["deprecated"]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"HopperBin"},{"ValueType":"BinType","type":"Property","Name":"BinType","tags":[],"Class":"HopperBin"},{"ReturnType":"void","Arguments":[],"Name":"Disable","tags":["RobloxScriptSecurity"],"Class":"HopperBin","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ToggleSelect","tags":["RobloxScriptSecurity"],"Class":"HopperBin","type":"Function"},{"Arguments":[],"Name":"Deselected","tags":[],"Class":"HopperBin","type":"Event"},{"Arguments":[{"Name":"mouse","Type":"Instance"}],"Name":"Selected","tags":[],"Class":"HopperBin","type":"Event"},{"Superclass":"BackpackItem","type":"Class","Name":"Tool","tags":[]},{"ValueType":"bool","type":"Property","Name":"CanBeDropped","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Tool"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Grip","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripForward","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripPos","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripRight","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripUp","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"ManualActivationOnly","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"RequiresHandle","tags":[],"Class":"Tool"},{"ValueType":"string","type":"Property","Name":"ToolTip","tags":[],"Class":"Tool"},{"ReturnType":"void","Arguments":[],"Name":"Activate","tags":[],"Class":"Tool","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Deactivate","tags":[],"Class":"Tool","type":"Function"},{"Arguments":[],"Name":"Activated","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[],"Name":"Deactivated","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[{"Name":"mouse","Type":"Instance"}],"Name":"Equipped","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[],"Name":"Unequipped","tags":[],"Class":"Tool","type":"Event"},{"Superclass":"Tool","type":"Class","Name":"Flag","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Flag"},{"Superclass":"GuiItem","type":"Class","Name":"ButtonBindingWidget","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"GuiRoot","tags":["notCreatable"]},{"Superclass":"GuiItem","type":"Class","Name":"Hopper","tags":["deprecated"]},{"Superclass":"GuiItem","type":"Class","Name":"StarterPack","tags":[]},{"Superclass":"Instance","type":"Class","Name":"GuiService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AutoSelectGuiEnabled","tags":[],"Class":"GuiService"},{"ValueType":"Class:Folder","type":"Property","Name":"CoreEffectFolder","tags":["RobloxScriptSecurity","hidden"],"Class":"GuiService"},{"ValueType":"Class:Folder","type":"Property","Name":"CoreGuiFolder","tags":["RobloxScriptSecurity","hidden"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"CoreGuiNavigationEnabled","tags":[],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"GuiNavigationEnabled","tags":[],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"IsModalDialog","tags":["deprecated","readonly"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"IsWindows","tags":["deprecated","readonly"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"MenuIsOpen","tags":["readonly"],"Class":"GuiService"},{"ValueType":"Class:GuiObject","type":"Property","Name":"SelectedCoreObject","tags":["RobloxScriptSecurity"],"Class":"GuiService"},{"ValueType":"Class:GuiObject","type":"Property","Name":"SelectedObject","tags":[],"Class":"GuiService"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"dialog","Default":null},{"Type":"CenterDialogType","Name":"centerDialogType","Default":null},{"Type":"Function","Name":"showFunction","Default":null},{"Type":"Function","Name":"hideFunction","Default":null}],"Name":"AddCenterDialog","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"AddKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null},{"Type":"Instance","Name":"selectionParent","Default":null}],"Name":"AddSelectionParent","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null},{"Type":"Tuple","Name":"selections","Default":null}],"Name":"AddSelectionTuple","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SpecialKey","Name":"key","Default":null}],"Name":"AddSpecialKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"data","Default":null},{"Type":"int","Name":"notificationType","Default":null}],"Name":"BroadcastNotification","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearError","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"CloseStatsBasedOnInputString","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetBrickCount","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"GetClosestDialogToPosition","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"ConnectionError","Arguments":[],"Name":"GetErrorCode","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetErrorMessage","tags":["RobloxScriptSecurity","deprecated"],"Class":"GuiService","type":"Function"},{"ReturnType":"ConnectionError","Arguments":[],"Name":"GetErrorType","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetGuiInset","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetNotificationTypeList","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetResolutionScale","tags":["LocalUserSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetSafeZoneOffsets","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetUiMessage","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsMemoryTrackerEnabled","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsTenFootInterface","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"OpenBrowserWindow","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"title","Default":null},{"Type":"string","Name":"url","Default":null}],"Name":"OpenNativeOverlay","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"dialog","Default":null}],"Name":"RemoveCenterDialog","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"RemoveKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null}],"Name":"RemoveSelectionGroup","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SpecialKey","Name":"key","Default":null}],"Name":"RemoveSpecialKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x1","Default":null},{"Type":"int","Name":"y1","Default":null},{"Type":"int","Name":"x2","Default":null},{"Type":"int","Name":"y2","Default":null}],"Name":"SetGlobalGuiInset","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"open","Default":null}],"Name":"SetMenuIsOpen","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"top","Default":null},{"Type":"float","Name":"bottom","Default":null},{"Type":"float","Name":"left","Default":null},{"Type":"float","Name":"right","Default":null}],"Name":"SetSafeZoneOffsets","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UiMessageType","Name":"msgType","Default":null},{"Type":"string","Name":"uiMessage","Default":"errorCode"}],"Name":"SetUiMessage","tags":["LocalUserSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"ShowStatsBasedOnInputString","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ToggleFullscreen","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"Vector2","Arguments":[],"Name":"GetScreenResolution","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"YieldFunction"},{"Arguments":[],"Name":"BrowserWindowClosed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"newErrorMessage","Type":"string"}],"Name":"ErrorMessageChanged","tags":["RobloxScriptSecurity","deprecated"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"},{"Name":"modifiers","Type":"string"}],"Name":"KeyPressed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"MenuClosed","tags":[],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"MenuOpened","tags":[],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"SafeZoneOffsetsChanged","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"ShowLeaveConfirmation","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"key","Type":"SpecialKey"},{"Name":"modifiers","Type":"string"}],"Name":"SpecialKeyPressed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"msgType","Type":"UiMessageType"},{"Name":"newUiMessage","Type":"string"}],"Name":"UiMessageChanged","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"ReturnType":"void","Arguments":[{"Name":"title","Type":"string"},{"Name":"text","Type":"string"}],"Name":"SendCoreUiNotification","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"GuidRegistryService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"HapticService","tags":["notCreatable"]},{"ReturnType":"Tuple","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null}],"Name":"GetMotor","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null}],"Name":"IsMotorSupported","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null}],"Name":"IsVibrationSupported","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null},{"Type":"Tuple","Name":"vibrationValues","Default":null}],"Name":"SetMotor","tags":[],"Class":"HapticService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"HttpRbxApiService","tags":["notCreatable"]},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"apiUrlPath","Default":null},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"GetAsync","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"apiUrl","Default":null},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"GetAsyncFullUrl","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"apiUrlPath","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"},{"Type":"HttpContentType","Name":"content_type","Default":"ApplicationJson"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"PostAsync","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"apiUrl","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"},{"Type":"HttpContentType","Name":"content_type","Default":"ApplicationJson"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"PostAsyncFullUrl","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"Dictionary","Name":"requestOptions","Default":null},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"},{"Type":"HttpContentType","Name":"content_type","Default":"ApplicationJson"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"RequestAsync","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"HttpRequest","tags":[]},{"ReturnType":"void","Arguments":[],"Name":"Cancel","tags":["RobloxScriptSecurity"],"Class":"HttpRequest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Function","Name":"callback","Default":null}],"Name":"Start","tags":["RobloxScriptSecurity"],"Class":"HttpRequest","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"HttpService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"HttpEnabled","tags":["LocalUserSecurity"],"Class":"HttpService"},{"ReturnType":"string","Arguments":[{"Type":"bool","Name":"wrapInCurlyBraces","Default":"true"}],"Name":"GenerateGUID","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetHttpEnabled","tags":["RobloxScriptSecurity"],"Class":"HttpService","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"JSONDecode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"Variant","Name":"input","Default":null}],"Name":"JSONEncode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Dictionary","Name":"options","Default":null}],"Name":"RequestInternal","tags":["RobloxScriptSecurity"],"Class":"HttpService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetHttpEnabled","tags":["RobloxScriptSecurity"],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"UrlEncode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"bool","Name":"nocache","Default":"false"},{"Type":"Variant","Name":"headers","Default":null}],"Name":"GetAsync","tags":[],"Class":"HttpService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"HttpContentType","Name":"content_type","Default":"ApplicationJson"},{"Type":"bool","Name":"compress","Default":"false"},{"Type":"Variant","Name":"headers","Default":null}],"Name":"PostAsync","tags":[],"Class":"HttpService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"Dictionary","Name":"requestOptions","Default":null}],"Name":"RequestAsync","tags":[],"Class":"HttpService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Humanoid","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"AutoRotate","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"AutomaticScalingEnabled","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"CameraOffset","tags":[],"Class":"Humanoid"},{"ValueType":"HumanoidDisplayDistanceType","type":"Property","Name":"DisplayDistanceType","tags":[],"Class":"Humanoid"},{"ValueType":"Material","type":"Property","Name":"FloorMaterial","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"Health","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"Humanoid"},{"ValueType":"HumanoidHealthDisplayType","type":"Property","Name":"HealthDisplayType","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"HipHeight","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"Jump","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"JumpPower","tags":[],"Class":"Humanoid"},{"ValueType":"Class:BasePart","type":"Property","Name":"LeftLeg","tags":["deprecated","hidden"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"MaxHealth","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"MaxSlopeAngle","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"MoveDirection","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"Humanoid"},{"ValueType":"NameOcclusion","type":"Property","Name":"NameOcclusion","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"PlatformStand","tags":[],"Class":"Humanoid"},{"ValueType":"HumanoidRigType","type":"Property","Name":"RigType","tags":[],"Class":"Humanoid"},{"ValueType":"Class:BasePart","type":"Property","Name":"RightLeg","tags":["deprecated","hidden"],"Class":"Humanoid"},{"ValueType":"Class:BasePart","type":"Property","Name":"RootPart","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"Class:BasePart","type":"Property","Name":"SeatPart","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"Sit","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"TargetPoint","tags":[],"Class":"Humanoid"},{"ValueType":"Class:BasePart","type":"Property","Name":"Torso","tags":["deprecated","hidden"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"WalkSpeed","tags":[],"Class":"Humanoid"},{"ValueType":"Class:BasePart","type":"Property","Name":"WalkToPart","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"WalkToPoint","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"maxHealth","tags":["deprecated"],"Class":"Humanoid"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"accessory","Default":null}],"Name":"AddAccessory","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"AddCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"AddStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"BuildRigFromAttachments","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":"None"}],"Name":"ChangeState","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"tool","Default":null}],"Name":"EquipTool","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetAccessories","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"BodyPartR15","Arguments":[{"Type":"Instance","Name":"part","Default":null}],"Name":"GetBodyPartR15","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Limb","Arguments":[{"Type":"Instance","Name":"part","Default":null}],"Name":"GetLimb","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetPlayingAnimationTracks","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"HumanoidStateType","Arguments":[],"Name":"GetState","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":null}],"Name":"GetStateEnabled","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetStatuses","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"HasCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"HasStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"moveDirection","Default":null},{"Type":"bool","Name":"relativeToCamera","Default":"false"}],"Name":"Move","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null},{"Type":"Instance","Name":"part","Default":"nil"}],"Name":"MoveTo","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RemoveAccessories","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"RemoveCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"RemoveStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"BodyPartR15","Name":"bodyPart","Default":null},{"Type":"Instance","Name":"part","Default":null}],"Name":"ReplaceBodyPartR15","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetClickToWalkEnabled","tags":["RobloxScriptSecurity"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetStateEnabled","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"amount","Default":null}],"Name":"TakeDamage","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"UnequipTools","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"loadAnimation","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"amount","Default":null}],"Name":"takeDamage","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"Arguments":[{"Name":"animationTrack","Type":"Instance"}],"Name":"AnimationPlayed","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Climbing","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"string"}],"Name":"CustomStatusAdded","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"string"}],"Name":"CustomStatusRemoved","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[],"Name":"Died","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"FallingDown","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"FreeFalling","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"GettingUp","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"health","Type":"float"}],"Name":"HealthChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Jumping","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"reached","Type":"bool"}],"Name":"MoveToFinished","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"PlatformStanding","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Ragdoll","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Running","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"},{"Name":"currentSeatPart","Type":"Instance"}],"Name":"Seated","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"old","Type":"HumanoidStateType"},{"Name":"new","Type":"HumanoidStateType"}],"Name":"StateChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"state","Type":"HumanoidStateType"},{"Name":"isEnabled","Type":"bool"}],"Name":"StateEnabledChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"Status"}],"Name":"StatusAdded","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"Status"}],"Name":"StatusRemoved","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Strafing","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Swimming","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"touchingPart","Type":"Instance"},{"Name":"humanoidPart","Type":"Instance"}],"Name":"Touched","tags":[],"Class":"Humanoid","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"InputObject","tags":["notCreatable"]},{"ValueType":"Vector3","type":"Property","Name":"Delta","tags":[],"Class":"InputObject"},{"ValueType":"KeyCode","type":"Property","Name":"KeyCode","tags":[],"Class":"InputObject"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"InputObject"},{"ValueType":"UserInputState","type":"Property","Name":"UserInputState","tags":[],"Class":"InputObject"},{"ValueType":"UserInputType","type":"Property","Name":"UserInputType","tags":[],"Class":"InputObject"},{"Superclass":"Instance","type":"Class","Name":"InsertService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AllowInsertFreeModels","tags":["deprecated","notbrowsable"],"Class":"InsertService"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"assetId","Default":null}],"Name":"ApproveAssetId","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"assetVersionId","Default":null}],"Name":"ApproveAssetVersionId","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"instance","Default":null}],"Name":"Insert","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"assetPath","Default":null}],"Name":"LoadLocalAsset","tags":["RobloxScriptSecurity"],"Class":"InsertService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetBaseCategories","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[],"Name":"GetBaseSets","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int64","Name":"categoryId","Default":null}],"Name":"GetCollection","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"string","Name":"searchText","Default":null},{"Type":"int","Name":"pageNum","Default":null}],"Name":"GetFreeDecals","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"string","Name":"searchText","Default":null},{"Type":"int","Name":"pageNum","Default":null}],"Name":"GetFreeModels","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"int64","Arguments":[{"Type":"int64","Name":"assetId","Default":null}],"Name":"GetLatestAssetVersionAsync","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetUserCategories","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetUserSets","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"assetId","Default":null}],"Name":"LoadAsset","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"assetVersionId","Default":null}],"Name":"LoadAssetVersion","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"assetId","Default":null}],"Name":"loadAsset","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"InstancePacketCache","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"JointInstance","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"C0","tags":[],"Class":"JointInstance"},{"ValueType":"CoordinateFrame","type":"Property","Name":"C1","tags":[],"Class":"JointInstance"},{"ValueType":"Class:BasePart","type":"Property","Name":"Part0","tags":[],"Class":"JointInstance"},{"ValueType":"Class:BasePart","type":"Property","Name":"Part1","tags":[],"Class":"JointInstance"},{"ValueType":"Class:BasePart","type":"Property","Name":"part1","tags":["deprecated","hidden"],"Class":"JointInstance"},{"Superclass":"JointInstance","type":"Class","Name":"DynamicRotate","tags":[]},{"ValueType":"float","type":"Property","Name":"BaseAngle","tags":[],"Class":"DynamicRotate"},{"Superclass":"DynamicRotate","type":"Class","Name":"RotateP","tags":[]},{"Superclass":"DynamicRotate","type":"Class","Name":"RotateV","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Glue","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"F0","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F1","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F2","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F3","tags":[],"Class":"Glue"},{"Superclass":"JointInstance","type":"Class","Name":"ManualSurfaceJointInstance","tags":[]},{"Superclass":"ManualSurfaceJointInstance","type":"Class","Name":"ManualGlue","tags":[]},{"Superclass":"ManualSurfaceJointInstance","type":"Class","Name":"ManualWeld","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Motor","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":[],"Class":"Motor"},{"ValueType":"float","type":"Property","Name":"DesiredAngle","tags":[],"Class":"Motor"},{"ValueType":"float","type":"Property","Name":"MaxVelocity","tags":[],"Class":"Motor"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"value","Default":null}],"Name":"SetDesiredAngle","tags":[],"Class":"Motor","type":"Function"},{"Superclass":"Motor","type":"Class","Name":"Motor6D","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"Transform","tags":["hidden"],"Class":"Motor6D"},{"Superclass":"JointInstance","type":"Class","Name":"Rotate","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Snap","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"VelocityMotor","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":[],"Class":"VelocityMotor"},{"ValueType":"float","type":"Property","Name":"DesiredAngle","tags":[],"Class":"VelocityMotor"},{"ValueType":"Class:Hole","type":"Property","Name":"Hole","tags":[],"Class":"VelocityMotor"},{"ValueType":"float","type":"Property","Name":"MaxVelocity","tags":[],"Class":"VelocityMotor"},{"Superclass":"JointInstance","type":"Class","Name":"Weld","tags":[]},{"Superclass":"Instance","type":"Class","Name":"JointsService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"ClearJoinAfterMoveJoints","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"CreateJoinAfterMoveJoints","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"joinInstance","Default":null}],"Name":"SetJoinAfterMoveInstance","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"joinTarget","Default":null}],"Name":"SetJoinAfterMoveTarget","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ShowPermissibleJoints","tags":[],"Class":"JointsService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"KeyboardService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Keyframe","tags":[]},{"ValueType":"float","type":"Property","Name":"Time","tags":[],"Class":"Keyframe"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"AddPose","tags":[],"Class":"Keyframe","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetPoses","tags":[],"Class":"Keyframe","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"RemovePose","tags":[],"Class":"Keyframe","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"KeyframeSequence","tags":[]},{"ValueType":"bool","type":"Property","Name":"Loop","tags":[],"Class":"KeyframeSequence"},{"ValueType":"AnimationPriority","type":"Property","Name":"Priority","tags":[],"Class":"KeyframeSequence"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"keyframe","Default":null}],"Name":"AddKeyframe","tags":[],"Class":"KeyframeSequence","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetKeyframes","tags":[],"Class":"KeyframeSequence","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"keyframe","Default":null}],"Name":"RemoveKeyframe","tags":[],"Class":"KeyframeSequence","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"KeyframeSequenceProvider","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"Content","Name":"assetId","Default":null}],"Name":"GetKeyframeSequence","tags":["PluginSecurity","deprecated"],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"assetId","Default":null},{"Type":"bool","Name":"useCache","Default":null}],"Name":"GetKeyframeSequenceById","tags":["PluginSecurity","deprecated"],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Content","Arguments":[{"Type":"Instance","Name":"keyframeSequence","Default":null}],"Name":"RegisterActiveKeyframeSequence","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Content","Arguments":[{"Type":"Instance","Name":"keyframeSequence","Default":null}],"Name":"RegisterKeyframeSequence","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetAnimations","tags":[],"Class":"KeyframeSequenceProvider","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"Content","Name":"assetId","Default":null}],"Name":"GetKeyframeSequenceAsync","tags":[],"Class":"KeyframeSequenceProvider","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Light","tags":[]},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"Light"},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Light"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Light"},{"ValueType":"bool","type":"Property","Name":"Shadows","tags":[],"Class":"Light"},{"Superclass":"Light","type":"Class","Name":"PointLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"PointLight"},{"Superclass":"Light","type":"Class","Name":"SpotLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Angle","tags":[],"Class":"SpotLight"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SpotLight"},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"SpotLight"},{"Superclass":"Light","type":"Class","Name":"SurfaceLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Angle","tags":[],"Class":"SurfaceLight"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SurfaceLight"},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"SurfaceLight"},{"Superclass":"Instance","type":"Class","Name":"Lighting","tags":["notCreatable"]},{"ValueType":"Color3","type":"Property","Name":"Ambient","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"ClockTime","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ColorShift_Bottom","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ColorShift_Top","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"ExposureCompensation","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"FogColor","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"FogEnd","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"FogStart","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"GeographicLatitude","tags":[],"Class":"Lighting"},{"ValueType":"bool","type":"Property","Name":"GlobalShadows","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"OutdoorAmbient","tags":[],"Class":"Lighting"},{"ValueType":"bool","type":"Property","Name":"Outlines","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ShadowColor","tags":["deprecated"],"Class":"Lighting"},{"ValueType":"string","type":"Property","Name":"TimeOfDay","tags":[],"Class":"Lighting"},{"ReturnType":"double","Arguments":[],"Name":"GetMinutesAfterMidnight","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetMoonDirection","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetMoonPhase","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetSunDirection","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"minutes","Default":null}],"Name":"SetMinutesAfterMidnight","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"getMinutesAfterMidnight","tags":["deprecated"],"Class":"Lighting","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"minutes","Default":null}],"Name":"setMinutesAfterMidnight","tags":["deprecated"],"Class":"Lighting","type":"Function"},{"Arguments":[{"Name":"skyboxChanged","Type":"bool"}],"Name":"LightingChanged","tags":[],"Class":"Lighting","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LocalizationService","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"ForcePlayModeGameLocaleId","tags":["LocalUserSecurity"],"Class":"LocalizationService"},{"ValueType":"string","type":"Property","Name":"ForcePlayModeRobloxLocaleId","tags":["LocalUserSecurity"],"Class":"LocalizationService"},{"ValueType":"bool","type":"Property","Name":"IsTextScraperRunning","tags":["RobloxScriptSecurity","hidden"],"Class":"LocalizationService"},{"ValueType":"string","type":"Property","Name":"RobloxForcePlayModeGameLocaleId","tags":["RobloxScriptSecurity"],"Class":"LocalizationService"},{"ValueType":"string","type":"Property","Name":"RobloxForcePlayModeRobloxLocaleId","tags":["RobloxScriptSecurity"],"Class":"LocalizationService"},{"ValueType":"string","type":"Property","Name":"RobloxLocaleId","tags":["readonly"],"Class":"LocalizationService"},{"ValueType":"string","type":"Property","Name":"SystemLocaleId","tags":["readonly"],"Class":"LocalizationService"},{"ReturnType":"Objects","Arguments":[],"Name":"GetCorescriptLocalizations","tags":[],"Class":"LocalizationService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"GetTranslatorForPlayer","tags":[],"Class":"LocalizationService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StartTextScraper","tags":["RobloxScriptSecurity"],"Class":"LocalizationService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StopTextScraper","tags":["RobloxScriptSecurity"],"Class":"LocalizationService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"PromptExportToCSVs","tags":["RobloxScriptSecurity"],"Class":"LocalizationService","type":"YieldFunction"},{"ReturnType":"void","Arguments":[],"Name":"PromptImportFromCSVs","tags":["RobloxScriptSecurity"],"Class":"LocalizationService","type":"YieldFunction"},{"Arguments":[],"Name":"AutoTranslateWillRun","tags":["RobloxScriptSecurity"],"Class":"LocalizationService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LocalizationTable","tags":[]},{"ValueType":"string","type":"Property","Name":"DevelopmentLanguage","tags":["deprecated","hidden"],"Class":"LocalizationTable"},{"ValueType":"Class:Instance","type":"Property","Name":"Root","tags":["deprecated","hidden"],"Class":"LocalizationTable"},{"ValueType":"string","type":"Property","Name":"SourceLocaleId","tags":[],"Class":"LocalizationTable"},{"ReturnType":"string","Arguments":[],"Name":"GetContents","tags":["deprecated"],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetEntries","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"targetLocaleId","Default":null},{"Type":"string","Name":"key","Default":null}],"Name":"GetString","tags":["deprecated"],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"localeId","Default":null}],"Name":"GetTranslator","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"source","Default":null},{"Type":"string","Name":"context","Default":null}],"Name":"RemoveEntry","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"source","Default":null},{"Type":"string","Name":"context","Default":null},{"Type":"string","Name":"localeId","Default":null}],"Name":"RemoveEntryValue","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"RemoveKey","tags":["deprecated"],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"localeId","Default":null}],"Name":"RemoveTargetLocale","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"contents","Default":null}],"Name":"SetContents","tags":["deprecated"],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Variant","Name":"entries","Default":null}],"Name":"SetEntries","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"targetLocaleId","Default":null},{"Type":"string","Name":"text","Default":null}],"Name":"SetEntry","tags":["deprecated"],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"source","Default":null},{"Type":"string","Name":"context","Default":null},{"Type":"string","Name":"newContext","Default":null}],"Name":"SetEntryContext","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"source","Default":null},{"Type":"string","Name":"context","Default":null},{"Type":"string","Name":"example","Default":null}],"Name":"SetEntryExample","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"source","Default":null},{"Type":"string","Name":"context","Default":null},{"Type":"string","Name":"newKey","Default":null}],"Name":"SetEntryKey","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"source","Default":null},{"Type":"string","Name":"context","Default":null},{"Type":"string","Name":"newSource","Default":null}],"Name":"SetEntrySource","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"source","Default":null},{"Type":"string","Name":"context","Default":null},{"Type":"string","Name":"localeId","Default":null},{"Type":"string","Name":"text","Default":null}],"Name":"SetEntryValue","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetIsExemptFromUGCAnalytics","tags":["RobloxScriptSecurity"],"Class":"LocalizationTable","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"LogService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"source","Default":null}],"Name":"ExecuteScript","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetHttpResultHistory","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetLogHistory","tags":[],"Class":"LogService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RequestHttpResultApproved","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RequestServerHttpResult","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RequestServerOutput","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"Arguments":[{"Name":"httpResult","Type":"Dictionary"}],"Name":"HttpResultOut","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"messageType","Type":"MessageType"}],"Name":"MessageOut","tags":[],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"isApproved","Type":"bool"}],"Name":"OnHttpResultApproved","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"httpResult","Type":"Dictionary"}],"Name":"ServerHttpResultOut","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"messageType","Type":"MessageType"},{"Name":"timestamp","Type":"int"}],"Name":"ServerMessageOut","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LoginService","tags":[]},{"ReturnType":"void","Arguments":[],"Name":"Logout","tags":["RobloxSecurity"],"Class":"LoginService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"PromptLogin","tags":["RobloxSecurity"],"Class":"LoginService","type":"Function"},{"Arguments":[{"Name":"loginError","Type":"string"}],"Name":"LoginFailed","tags":["RobloxSecurity"],"Class":"LoginService","type":"Event"},{"Arguments":[{"Name":"username","Type":"string"}],"Name":"LoginSucceeded","tags":["RobloxSecurity"],"Class":"LoginService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LuaSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AreScriptStartsReported","tags":[],"Class":"LuaSettings"},{"ValueType":"double","type":"Property","Name":"DefaultWaitTime","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcFrequency","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcLimit","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcPause","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcStepMul","tags":[],"Class":"LuaSettings"},{"ValueType":"float","type":"Property","Name":"WaitingThreadsBudget","tags":[],"Class":"LuaSettings"},{"Superclass":"Instance","type":"Class","Name":"LuaSourceContainer","tags":["notbrowsable"]},{"Superclass":"LuaSourceContainer","type":"Class","Name":"BaseScript","tags":[]},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"BaseScript"},{"ValueType":"Content","type":"Property","Name":"LinkedSource","tags":[],"Class":"BaseScript"},{"Superclass":"BaseScript","type":"Class","Name":"CoreScript","tags":["notCreatable"]},{"Superclass":"BaseScript","type":"Class","Name":"Script","tags":[]},{"ValueType":"ProtectedString","type":"Property","Name":"Source","tags":["PluginSecurity"],"Class":"Script"},{"ReturnType":"string","Arguments":[],"Name":"GetHash","tags":["LocalUserSecurity"],"Class":"Script","type":"Function"},{"Superclass":"Script","type":"Class","Name":"LocalScript","tags":[]},{"Superclass":"LuaSourceContainer","type":"Class","Name":"ModuleScript","tags":[]},{"ValueType":"Content","type":"Property","Name":"LinkedSource","tags":[],"Class":"ModuleScript"},{"ValueType":"ProtectedString","type":"Property","Name":"Source","tags":["PluginSecurity"],"Class":"ModuleScript"},{"Superclass":"Instance","type":"Class","Name":"LuaWebService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"MarketplaceService","tags":["notCreatable"]},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"PlayerCanMakePurchases","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int64","Name":"gamePassId","Default":null}],"Name":"PromptGamePassPurchase","tags":[],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"productId","Default":null}],"Name":"PromptNativePurchase","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int64","Name":"productId","Default":null},{"Type":"bool","Name":"equipIfPurchased","Default":"true"},{"Type":"CurrencyType","Name":"currencyType","Default":"Default"}],"Name":"PromptProductPurchase","tags":[],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int64","Name":"assetId","Default":null},{"Type":"bool","Name":"equipIfPurchased","Default":"true"},{"Type":"CurrencyType","Name":"currencyType","Default":"Default"}],"Name":"PromptPurchase","tags":[],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"productId","Default":null}],"Name":"PromptThirdPartyPurchase","tags":["LocalUserSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"assetId","Default":null},{"Type":"int","Name":"robuxAmount","Default":null}],"Name":"ReportAssetSale","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ReportRobuxUpsellStarted","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"ticket","Default":null},{"Type":"int64","Name":"playerId","Default":null},{"Type":"int64","Name":"productId","Default":null}],"Name":"SignalClientPurchaseSuccess","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int64","Name":"gamePassId","Default":null},{"Type":"bool","Name":"success","Default":null}],"Name":"SignalPromptGamePassPurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"int64","Name":"productId","Default":null},{"Type":"bool","Name":"success","Default":null}],"Name":"SignalPromptProductPurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int64","Name":"assetId","Default":null},{"Type":"bool","Name":"success","Default":null}],"Name":"SignalPromptPurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SignalServerLuaDialogClosed","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeveloperProductsAsync","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int64","Name":"assetId","Default":null},{"Type":"InfoType","Name":"infoType","Default":"Asset"}],"Name":"GetProductInfo","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[],"Name":"GetRobuxBalance","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"InfoType","Name":"infoType","Default":null},{"Type":"int64","Name":"productId","Default":null},{"Type":"int","Name":"expectedPrice","Default":null},{"Type":"string","Name":"requestId","Default":null}],"Name":"PerformPurchase","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int64","Name":"assetId","Default":null}],"Name":"PlayerOwnsAsset","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"int64","Name":"gamePassId","Default":null}],"Name":"UserOwnsGamePassAsync","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"ClientLuaDialogRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"ticket","Type":"string"},{"Name":"playerId","Type":"int64"},{"Name":"productId","Type":"int64"}],"Name":"ClientPurchaseSuccess","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"string"},{"Name":"wasPurchased","Type":"bool"}],"Name":"NativePurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"gamePassId","Type":"int64"},{"Name":"wasPurchased","Type":"bool"}],"Name":"PromptGamePassPurchaseFinished","tags":[],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"gamePassId","Type":"int64"}],"Name":"PromptGamePassPurchaseRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"userId","Type":"int64"},{"Name":"productId","Type":"int64"},{"Name":"isPurchased","Type":"bool"}],"Name":"PromptProductPurchaseFinished","tags":["deprecated"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"int64"},{"Name":"equipIfPurchased","Type":"bool"},{"Name":"currencyType","Type":"CurrencyType"}],"Name":"PromptProductPurchaseRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"assetId","Type":"int64"},{"Name":"isPurchased","Type":"bool"}],"Name":"PromptPurchaseFinished","tags":[],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"assetId","Type":"int64"},{"Name":"equipIfPurchased","Type":"bool"},{"Name":"currencyType","Type":"CurrencyType"}],"Name":"PromptPurchaseRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"serverResponseTable","Type":"Dictionary"}],"Name":"ServerPurchaseVerification","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"string"},{"Name":"receipt","Type":"string"},{"Name":"wasPurchased","Type":"bool"}],"Name":"ThirdPartyPurchaseFinished","tags":["LocalUserSecurity"],"Class":"MarketplaceService","type":"Event"},{"ReturnType":"ProductPurchaseDecision","Arguments":[{"Name":"receiptInfo","Type":"Dictionary"}],"Name":"ProcessReceipt","tags":[],"Class":"MarketplaceService","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"Message","tags":["deprecated"]},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"Message"},{"Superclass":"Message","type":"Class","Name":"Hint","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"Mouse","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"Hit","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Content","type":"Property","Name":"Icon","tags":[],"Class":"Mouse"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Origin","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Class:BasePart","type":"Property","Name":"Target","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Class:Instance","type":"Property","Name":"TargetFilter","tags":[],"Class":"Mouse"},{"ValueType":"NormalId","type":"Property","Name":"TargetSurface","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Ray","type":"Property","Name":"UnitRay","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"ViewSizeX","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"ViewSizeY","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"X","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"Y","tags":["readonly"],"Class":"Mouse"},{"ValueType":"CoordinateFrame","type":"Property","Name":"hit","tags":["deprecated","hidden","readonly"],"Class":"Mouse"},{"ValueType":"Class:BasePart","type":"Property","Name":"target","tags":["deprecated","readonly"],"Class":"Mouse"},{"Arguments":[],"Name":"Button1Down","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button1Up","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button2Down","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button2Up","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Idle","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"KeyDown","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"KeyUp","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Move","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"WheelBackward","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"WheelForward","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"keyDown","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Superclass":"Mouse","type":"Class","Name":"PlayerMouse","tags":[]},{"Superclass":"Mouse","type":"Class","Name":"PluginMouse","tags":[]},{"Arguments":[{"Name":"instances","Type":"Objects"}],"Name":"DragEnter","tags":["PluginSecurity"],"Class":"PluginMouse","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"MouseService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"NetworkMarker","tags":["notbrowsable"]},{"Arguments":[],"Name":"Received","tags":[],"Class":"NetworkMarker","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"NetworkPeer","tags":["notbrowsable"]},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"limit","Default":null}],"Name":"SetOutgoingKBPSLimit","tags":["PluginSecurity"],"Class":"NetworkPeer","type":"Function"},{"Superclass":"NetworkPeer","type":"Class","Name":"NetworkClient","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"Ticket","tags":[],"Class":"NetworkClient"},{"Arguments":[{"Name":"peer","Type":"string"},{"Name":"replicator","Type":"Instance"}],"Name":"ConnectionAccepted","tags":[],"Class":"NetworkClient","type":"Event"},{"Arguments":[{"Name":"peer","Type":"string"},{"Name":"code","Type":"int"},{"Name":"reason","Type":"string"}],"Name":"ConnectionFailed","tags":[],"Class":"NetworkClient","type":"Event"},{"Arguments":[{"Name":"peer","Type":"string"}],"Name":"ConnectionRejected","tags":[],"Class":"NetworkClient","type":"Event"},{"Superclass":"NetworkPeer","type":"Class","Name":"NetworkServer","tags":["notCreatable"]},{"ValueType":"int","type":"Property","Name":"Port","tags":["readonly"],"Class":"NetworkServer"},{"ReturnType":"int","Arguments":[],"Name":"GetClientCount","tags":["LocalUserSecurity"],"Class":"NetworkServer","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"NetworkReplicator","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"CloseConnection","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetPlayer","tags":[],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"verbosityLevel","Default":"0"}],"Name":"GetRakStatsString","tags":["PluginSecurity"],"Class":"NetworkReplicator","type":"Function"},{"Superclass":"NetworkReplicator","type":"Class","Name":"ClientReplicator","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"request","Default":null}],"Name":"RequestServerStats","tags":["RobloxScriptSecurity"],"Class":"ClientReplicator","type":"Function"},{"Arguments":[{"Name":"stats","Type":"Dictionary"}],"Name":"StatsReceived","tags":["RobloxScriptSecurity"],"Class":"ClientReplicator","type":"Event"},{"Superclass":"NetworkReplicator","type":"Class","Name":"ServerReplicator","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"NetworkSettings","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"ArePhysicsRejectionsReported","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"ClientPhysicsSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"DataGCRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"DataMtuAdjust","tags":[],"Class":"NetworkSettings"},{"ValueType":"PacketPriority","type":"Property","Name":"DataSendPriority","tags":["hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"DataSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"ExtraMemoryUsed","tags":["PluginSecurity","hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"FreeMemoryMBytes","tags":["PluginSecurity","hidden","readonly"],"Class":"NetworkSettings"},{"ValueType":"double","type":"Property","Name":"IncommingReplicationLag","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"IsQueueErrorComputed","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"NetworkOwnerRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"PhysicsMtuAdjust","tags":[],"Class":"NetworkSettings"},{"ValueType":"PacketPriority","type":"Property","Name":"PhysicsSendPriority","tags":["hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"PhysicsSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"PreferredClientPort","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintBits","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintEvents","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintFilters","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintInstances","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintPhysicsErrors","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintProperties","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintSplitMessage","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintStreamInstanceQuota","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintTouches","tags":[],"Class":"NetworkSettings"},{"ValueType":"double","type":"Property","Name":"ReceiveRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"RenderStreamedRegions","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"ShowActiveAnimationAsset","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"TouchSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"TrackDataTypes","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"TrackPhysicsDetails","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"UseInstancePacketCache","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"UsePhysicsPacketCache","tags":[],"Class":"NetworkSettings"},{"Superclass":"Instance","type":"Class","Name":"NotificationService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"IsLuaChatEnabled","tags":["RobloxScriptSecurity","readonly"],"Class":"NotificationService"},{"ValueType":"bool","type":"Property","Name":"IsLuaGamesPageEnabled","tags":["RobloxScriptSecurity","readonly"],"Class":"NotificationService"},{"ValueType":"bool","type":"Property","Name":"IsLuaHomePageEnabled","tags":["RobloxScriptSecurity","readonly"],"Class":"NotificationService"},{"ReturnType":"void","Arguments":[{"Type":"AppShellActionType","Name":"actionType","Default":null}],"Name":"ActionEnabled","tags":["RobloxScriptSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"AppShellActionType","Name":"actionType","Default":null}],"Name":"ActionTaken","tags":["RobloxScriptSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"CancelAllNotification","tags":["LocalUserSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"int","Name":"alertId","Default":null}],"Name":"CancelNotification","tags":["LocalUserSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"int","Name":"alertId","Default":null},{"Type":"string","Name":"alertMsg","Default":null},{"Type":"int","Name":"minutesToFire","Default":null}],"Name":"ScheduleNotification","tags":["LocalUserSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetScheduledNotifications","tags":["LocalUserSecurity"],"Class":"NotificationService","type":"YieldFunction"},{"Arguments":[{"Name":"connectionName","Type":"string"},{"Name":"connectionState","Type":"ConnectionState"},{"Name":"sequenceNumber","Type":"string"}],"Name":"RobloxConnectionChanged","tags":["RobloxScriptSecurity"],"Class":"NotificationService","type":"Event"},{"Arguments":[{"Name":"eventData","Type":"Map"}],"Name":"RobloxEventReceived","tags":["RobloxScriptSecurity"],"Class":"NotificationService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PVInstance","tags":["notbrowsable"]},{"Superclass":"PVInstance","type":"Class","Name":"BasePart","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Anchored","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BackParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BackParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"BackSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"BackSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BottomParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BottomParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"BottomSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"BottomSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"BrickColor","type":"Property","Name":"BrickColor","tags":[],"Class":"BasePart"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"BasePart"},{"ValueType":"bool","type":"Property","Name":"CanCollide","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"CenterOfMass","tags":["readonly"],"Class":"BasePart"},{"ValueType":"int","type":"Property","Name":"CollisionGroupId","tags":[],"Class":"BasePart"},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"BasePart"},{"ValueType":"PhysicalProperties","type":"Property","Name":"CustomPhysicalProperties","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Elasticity","tags":["deprecated","hidden"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Friction","tags":["deprecated","hidden"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"FrontParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"FrontParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"FrontSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"FrontSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LeftParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LeftParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"LeftSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"LeftSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LocalTransparencyModifier","tags":["hidden"],"Class":"BasePart"},{"ValueType":"bool","type":"Property","Name":"Locked","tags":[],"Class":"BasePart"},{"ValueType":"Material","type":"Property","Name":"Material","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Orientation","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"ReceiveAge","tags":["hidden","readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Reflectance","tags":[],"Class":"BasePart"},{"ValueType":"int","type":"Property","Name":"ResizeIncrement","tags":["readonly"],"Class":"BasePart"},{"ValueType":"Faces","type":"Property","Name":"ResizeableFaces","tags":["readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"RightParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"RightParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"RightSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"RightSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"RotVelocity","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Rotation","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Size","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"SpecificGravity","tags":["deprecated","readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"TopParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"TopParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"TopSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"TopSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Velocity","tags":[],"Class":"BasePart"},{"ValueType":"BrickColor","type":"Property","Name":"brickColor","tags":["deprecated"],"Class":"BasePart"},{"ReturnType":"void","Arguments":[],"Name":"BreakJoints","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"part","Default":null}],"Name":"CanCollideWith","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"CanSetNetworkOwnership","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"GetConnectedParts","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetJoints","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetMass","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetNetworkOwner","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetNetworkOwnershipAuto","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetRenderCFrame","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetRootPart","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetTouchingParts","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsGrounded","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MakeJoints","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"NormalId","Name":"normalId","Default":null},{"Type":"int","Name":"deltaAmount","Default":null}],"Name":"Resize","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"playerInstance","Default":"nil"}],"Name":"SetNetworkOwner","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetNetworkOwnershipAuto","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"breakJoints","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"getMass","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"makeJoints","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"NormalId","Name":"normalId","Default":null},{"Type":"int","Name":"deltaAmount","Default":null}],"Name":"resize","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Objects","Name":"parts","Default":null},{"Type":"CollisionFidelity","Name":"collisionfidelity","Default":"Default"}],"Name":"SubtractAsync","tags":[],"Class":"BasePart","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"Objects","Name":"parts","Default":null},{"Type":"CollisionFidelity","Name":"collisionfidelity","Default":"Default"}],"Name":"UnionAsync","tags":[],"Class":"BasePart","type":"YieldFunction"},{"Arguments":[{"Name":"part","Type":"Instance"}],"Name":"LocalSimulationTouched","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[],"Name":"OutfitChanged","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"StoppedTouching","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"TouchEnded","tags":[],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"Touched","tags":[],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"touched","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Superclass":"BasePart","type":"Class","Name":"CornerWedgePart","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"FormFactorPart","tags":[]},{"ValueType":"FormFactor","type":"Property","Name":"FormFactor","tags":["deprecated"],"Class":"FormFactorPart"},{"ValueType":"FormFactor","type":"Property","Name":"formFactor","tags":["deprecated","hidden"],"Class":"FormFactorPart"},{"Superclass":"FormFactorPart","type":"Class","Name":"Part","tags":[]},{"ValueType":"PartType","type":"Property","Name":"Shape","tags":[],"Class":"Part"},{"Superclass":"Part","type":"Class","Name":"FlagStand","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"FlagStand"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"FlagCaptured","tags":[],"Class":"FlagStand","type":"Event"},{"Superclass":"Part","type":"Class","Name":"Platform","tags":[]},{"Superclass":"Part","type":"Class","Name":"Seat","tags":[]},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"Seat"},{"ValueType":"Class:Humanoid","type":"Property","Name":"Occupant","tags":["readonly"],"Class":"Seat"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"humanoid","Default":null}],"Name":"Sit","tags":[],"Class":"Seat","type":"Function"},{"Superclass":"Part","type":"Class","Name":"SkateboardPlatform","tags":["deprecated"]},{"ValueType":"Class:SkateboardController","type":"Property","Name":"Controller","tags":["readonly"],"Class":"SkateboardPlatform"},{"ValueType":"Class:Humanoid","type":"Property","Name":"ControllingHumanoid","tags":["readonly"],"Class":"SkateboardPlatform"},{"ValueType":"int","type":"Property","Name":"Steer","tags":[],"Class":"SkateboardPlatform"},{"ValueType":"bool","type":"Property","Name":"StickyWheels","tags":[],"Class":"SkateboardPlatform"},{"ValueType":"int","type":"Property","Name":"Throttle","tags":[],"Class":"SkateboardPlatform"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"impulseWorld","Default":null}],"Name":"ApplySpecificImpulse","tags":[],"Class":"SkateboardPlatform","type":"Function"},{"Arguments":[{"Name":"humanoid","Type":"Instance"},{"Name":"skateboardController","Type":"Instance"}],"Name":"Equipped","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"newState","Type":"MoveState"},{"Name":"oldState","Type":"MoveState"}],"Name":"MoveStateChanged","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"}],"Name":"Unequipped","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"},{"Name":"skateboardController","Type":"Instance"}],"Name":"equipped","tags":["deprecated"],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"}],"Name":"unequipped","tags":["deprecated"],"Class":"SkateboardPlatform","type":"Event"},{"Superclass":"Part","type":"Class","Name":"SpawnLocation","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowTeamChangeOnTouch","tags":[],"Class":"SpawnLocation"},{"ValueType":"int","type":"Property","Name":"Duration","tags":[],"Class":"SpawnLocation"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"SpawnLocation"},{"ValueType":"bool","type":"Property","Name":"Neutral","tags":[],"Class":"SpawnLocation"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"SpawnLocation"},{"Superclass":"FormFactorPart","type":"Class","Name":"WedgePart","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"MeshPart","tags":[]},{"ValueType":"Content","type":"Property","Name":"MeshId","tags":["ScriptWriteRestricted: [NotAccessibleSecurity]"],"Class":"MeshPart"},{"ValueType":"Content","type":"Property","Name":"TextureID","tags":[],"Class":"MeshPart"},{"Superclass":"BasePart","type":"Class","Name":"PartOperation","tags":[]},{"ValueType":"int","type":"Property","Name":"TriangleCount","tags":["readonly"],"Class":"PartOperation"},{"ValueType":"bool","type":"Property","Name":"UsePartColor","tags":[],"Class":"PartOperation"},{"Superclass":"PartOperation","type":"Class","Name":"NegateOperation","tags":[]},{"Superclass":"PartOperation","type":"Class","Name":"UnionOperation","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"Terrain","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"IsSmooth","tags":["deprecated","readonly"],"Class":"Terrain"},{"ValueType":"Region3int16","type":"Property","Name":"MaxExtents","tags":["readonly"],"Class":"Terrain"},{"ValueType":"Color3","type":"Property","Name":"WaterColor","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterReflectance","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterTransparency","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterWaveSize","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterWaveSpeed","tags":[],"Class":"Terrain"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"AutowedgeCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3int16","Name":"region","Default":null}],"Name":"AutowedgeCells","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"CellCenterToWorld","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"CellCornerToWorld","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Clear","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ConvertToSmooth","tags":["PluginSecurity","deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Region3int16","Name":"region","Default":null}],"Name":"CopyRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"CountCells","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"center","Default":null},{"Type":"float","Name":"radius","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillBall","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"cframe","Default":null},{"Type":"Vector3","Name":"size","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillBlock","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"GetCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"Color3","Arguments":[{"Type":"Material","Name":"material","Default":null}],"Name":"GetMaterialColor","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"GetWaterCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"region","Default":null},{"Type":"Vector3int16","Name":"corner","Default":null},{"Type":"bool","Name":"pasteEmptyCells","Default":null}],"Name":"PasteRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null}],"Name":"ReadVoxels","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null},{"Type":"CellMaterial","Name":"material","Default":null},{"Type":"CellBlock","Name":"block","Default":null},{"Type":"CellOrientation","Name":"orientation","Default":null}],"Name":"SetCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3int16","Name":"region","Default":null},{"Type":"CellMaterial","Name":"material","Default":null},{"Type":"CellBlock","Name":"block","Default":null},{"Type":"CellOrientation","Name":"orientation","Default":null}],"Name":"SetCells","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Material","Name":"material","Default":null},{"Type":"Color3","Name":"value","Default":null}],"Name":"SetMaterialColor","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null},{"Type":"WaterForce","Name":"force","Default":null},{"Type":"WaterDirection","Name":"direction","Default":null}],"Name":"SetWaterCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCell","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCellPreferEmpty","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCellPreferSolid","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null},{"Type":"Array","Name":"materials","Default":null},{"Type":"Array","Name":"occupancy","Default":null}],"Name":"WriteVoxels","tags":[],"Class":"Terrain","type":"Function"},{"Superclass":"BasePart","type":"Class","Name":"TrussPart","tags":[]},{"ValueType":"Style","type":"Property","Name":"Style","tags":[],"Class":"TrussPart"},{"Superclass":"BasePart","type":"Class","Name":"VehicleSeat","tags":[]},{"ValueType":"int","type":"Property","Name":"AreHingesDetected","tags":["readonly"],"Class":"VehicleSeat"},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"VehicleSeat"},{"ValueType":"bool","type":"Property","Name":"HeadsUpDisplay","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"MaxSpeed","tags":[],"Class":"VehicleSeat"},{"ValueType":"Class:Humanoid","type":"Property","Name":"Occupant","tags":["readonly"],"Class":"VehicleSeat"},{"ValueType":"int","type":"Property","Name":"Steer","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"SteerFloat","tags":[],"Class":"VehicleSeat"},{"ValueType":"int","type":"Property","Name":"Throttle","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"ThrottleFloat","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"Torque","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"TurnSpeed","tags":[],"Class":"VehicleSeat"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"humanoid","Default":null}],"Name":"Sit","tags":[],"Class":"VehicleSeat","type":"Function"},{"Superclass":"PVInstance","type":"Class","Name":"Model","tags":[]},{"ValueType":"Class:BasePart","type":"Property","Name":"PrimaryPart","tags":[],"Class":"Model"},{"ReturnType":"void","Arguments":[],"Name":"BreakJoints","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetExtentsSize","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetModelCFrame","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetModelSize","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetPrimaryPartCFrame","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MakeJoints","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"MoveTo","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ResetOrientationToIdentity","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetIdentityOrientation","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"cframe","Default":null}],"Name":"SetPrimaryPartCFrame","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"delta","Default":null}],"Name":"TranslateBy","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"breakJoints","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"makeJoints","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null}],"Name":"move","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null}],"Name":"moveTo","tags":["deprecated"],"Class":"Model","type":"Function"},{"Superclass":"Model","type":"Class","Name":"Status","tags":["deprecated","notCreatable"]},{"Superclass":"Model","type":"Class","Name":"Workspace","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowThirdPartySales","tags":[],"Class":"Workspace"},{"ValueType":"Class:Camera","type":"Property","Name":"CurrentCamera","tags":[],"Class":"Workspace"},{"ValueType":"double","type":"Property","Name":"DistributedGameTime","tags":[],"Class":"Workspace"},{"ValueType":"float","type":"Property","Name":"FallenPartsDestroyHeight","tags":["ScriptWriteRestricted: [PluginSecurity]"],"Class":"Workspace"},{"ValueType":"bool","type":"Property","Name":"FilteringEnabled","tags":["ScriptWriteRestricted: [PluginSecurity]"],"Class":"Workspace"},{"ValueType":"float","type":"Property","Name":"Gravity","tags":[],"Class":"Workspace"},{"ValueType":"bool","type":"Property","Name":"StreamingEnabled","tags":[],"Class":"Workspace"},{"ValueType":"bool","type":"Property","Name":"TemporaryLegacyPhysicsSolverOverride","tags":[],"Class":"Workspace"},{"ValueType":"Class:Instance","type":"Property","Name":"Terrain","tags":["readonly"],"Class":"Workspace"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"BreakJoints","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"ExperimentalSolverIsEnabled","tags":["LocalUserSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Instance","Name":"ignoreDescendantsInstance","Default":"nil"},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"FindPartOnRay","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Objects","Name":"ignoreDescendantsTable","Default":null},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"FindPartOnRayWithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Objects","Name":"whitelistDescendantsTable","Default":null},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"FindPartOnRayWithWhitelist","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendantsInstance","Default":"nil"},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"FindPartsInRegion3","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Objects","Name":"ignoreDescendantsTable","Default":null},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"FindPartsInRegion3WithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Objects","Name":"whitelistDescendantsTable","Default":null},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"FindPartsInRegion3WithWhiteList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetNumAwakeParts","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetPhysicsAnalyzerBreakOnIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"int","Name":"index","Default":null}],"Name":"GetPhysicsAnalyzerIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetPhysicsThrottling","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetRealPhysicsFPS","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendentsInstance","Default":"nil"}],"Name":"IsRegion3Empty","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Objects","Name":"ignoreDescendentsTable","Default":null}],"Name":"IsRegion3EmptyWithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null},{"Type":"JointCreationMode","Name":"jointType","Default":null}],"Name":"JoinToOutsiders","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"MakeJoints","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"PGSIsEnabled","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null}],"Name":"SetPhysicsAnalyzerBreakOnIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetPhysicsThrottleEnabled","tags":["LocalUserSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"UnjoinFromOutsiders","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ZoomToExtents","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Instance","Name":"ignoreDescendantsInstance","Default":"nil"},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"findPartOnRay","tags":["deprecated"],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendantsInstance","Default":"nil"},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"findPartsInRegion3","tags":["deprecated"],"Class":"Workspace","type":"Function"},{"Arguments":[{"Name":"count","Type":"int"}],"Name":"PhysicsAnalyzerIssuesFound","tags":["PluginSecurity"],"Class":"Workspace","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PackageLink","tags":["notCreatable"]},{"ValueType":"Content","type":"Property","Name":"PackageId","tags":["readonly"],"Class":"PackageLink"},{"ValueType":"int64","type":"Property","Name":"VersionNumber","tags":["readonly"],"Class":"PackageLink"},{"Superclass":"Instance","type":"Class","Name":"Pages","tags":[]},{"ValueType":"bool","type":"Property","Name":"IsFinished","tags":["readonly"],"Class":"Pages"},{"ReturnType":"Array","Arguments":[],"Name":"GetCurrentPage","tags":[],"Class":"Pages","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"AdvanceToNextPageAsync","tags":[],"Class":"Pages","type":"YieldFunction"},{"Superclass":"Pages","type":"Class","Name":"DataStorePages","tags":[]},{"Superclass":"Pages","type":"Class","Name":"FriendPages","tags":[]},{"Superclass":"Pages","type":"Class","Name":"InventoryPages","tags":[]},{"Superclass":"Pages","type":"Class","Name":"StandardPages","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PartOperationAsset","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ParticleEmitter","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Acceleration","tags":[],"Class":"ParticleEmitter"},{"ValueType":"ColorSequence","type":"Property","Name":"Color","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"Drag","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NormalId","type":"Property","Name":"EmissionDirection","tags":[],"Class":"ParticleEmitter"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Lifetime","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"LightEmission","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"LightInfluence","tags":[],"Class":"ParticleEmitter"},{"ValueType":"bool","type":"Property","Name":"LockedToPart","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"Rate","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"RotSpeed","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Rotation","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberSequence","type":"Property","Name":"Size","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Speed","tags":[],"Class":"ParticleEmitter"},{"ValueType":"Vector2","type":"Property","Name":"SpreadAngle","tags":[],"Class":"ParticleEmitter"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberSequence","type":"Property","Name":"Transparency","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"VelocityInheritance","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"VelocitySpread","tags":["deprecated"],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"ZOffset","tags":[],"Class":"ParticleEmitter"},{"ReturnType":"void","Arguments":[],"Name":"Clear","tags":[],"Class":"ParticleEmitter","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"particleCount","Default":"16"}],"Name":"Emit","tags":[],"Class":"ParticleEmitter","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Path","tags":[]},{"ValueType":"PathStatus","type":"Property","Name":"Status","tags":["readonly"],"Class":"Path"},{"ReturnType":"Array","Arguments":[],"Name":"GetPointCoordinates","tags":["deprecated"],"Class":"Path","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetWaypoints","tags":[],"Class":"Path","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"start","Default":null}],"Name":"CheckOcclusionAsync","tags":[],"Class":"Path","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"PathfindingService","tags":["notCreatable"]},{"ValueType":"float","type":"Property","Name":"EmptyCutoff","tags":["deprecated"],"Class":"PathfindingService"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"start","Default":null},{"Type":"Vector3","Name":"finish","Default":null},{"Type":"float","Name":"maxDistance","Default":null}],"Name":"ComputeRawPathAsync","tags":["deprecated"],"Class":"PathfindingService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"start","Default":null},{"Type":"Vector3","Name":"finish","Default":null},{"Type":"float","Name":"maxDistance","Default":null}],"Name":"ComputeSmoothPathAsync","tags":["deprecated"],"Class":"PathfindingService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"start","Default":null},{"Type":"Vector3","Name":"finish","Default":null}],"Name":"FindPathAsync","tags":[],"Class":"PathfindingService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"PhysicsPacketCache","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"PhysicsService","tags":[]},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Instance","Name":"part","Default":null}],"Name":"CollisionGroupContainsPart","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name1","Default":null},{"Type":"string","Name":"name2","Default":null},{"Type":"bool","Name":"collidable","Default":null}],"Name":"CollisionGroupSetCollidable","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name1","Default":null},{"Type":"string","Name":"name2","Default":null}],"Name":"CollisionGroupsAreCollidable","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"CreateCollisionGroup","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"GetCollisionGroupId","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"name","Default":null}],"Name":"GetCollisionGroupName","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetCollisionGroups","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetMaxCollisionGroups","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"part","Default":null},{"Type":"CoordinateFrame","Name":"target","Default":null},{"Type":"float","Name":"translateStiffness","Default":null},{"Type":"float","Name":"rotateStiffness","Default":null}],"Name":"IkSolve","tags":["RobloxScriptSecurity"],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"part","Default":null},{"Type":"CoordinateFrame","Name":"target","Default":null},{"Type":"float","Name":"translateStiffness","Default":null},{"Type":"float","Name":"rotateStiffness","Default":null}],"Name":"LocalIkSolve","tags":["LocalUserSecurity"],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"RemoveCollisionGroup","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"from","Default":null},{"Type":"string","Name":"to","Default":null}],"Name":"RenameCollisionGroup","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"part","Default":null},{"Type":"string","Name":"name","Default":null}],"Name":"SetPartCollisionGroup","tags":[],"Class":"PhysicsService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"PhysicsSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowSleep","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAnchorsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAssembliesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAwakePartsHighlighted","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreBodyTypesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreContactIslandsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreContactPointsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreJointCoordinatesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreMechanismsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreModelCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreOwnersShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"ArePartCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreRegionsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreUnalignedPartsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreWorldCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"DisableCSGv2","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"IsReceiveAgeShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"IsTreeShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"PhysicsAnalyzerEnabled","tags":["PluginSecurity","readonly"],"Class":"PhysicsSettings"},{"ValueType":"EnviromentalPhysicsThrottle","type":"Property","Name":"PhysicsEnvironmentalThrottle","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"ShowDecompositionGeometry","tags":[],"Class":"PhysicsSettings"},{"ValueType":"double","type":"Property","Name":"ThrottleAdjustTime","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"UseCSGv2","tags":[],"Class":"PhysicsSettings"},{"Superclass":"Instance","type":"Class","Name":"Player","tags":[]},{"ValueType":"int","type":"Property","Name":"AccountAge","tags":["readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"AppearanceDidLoad","tags":["RobloxScriptSecurity","deprecated","readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"CameraMaxZoomDistance","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"CameraMinZoomDistance","tags":[],"Class":"Player"},{"ValueType":"CameraMode","type":"Property","Name":"CameraMode","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"CanLoadCharacterAppearance","tags":[],"Class":"Player"},{"ValueType":"Class:Model","type":"Property","Name":"Character","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"CharacterAppearance","tags":["deprecated","notbrowsable"],"Class":"Player"},{"ValueType":"int64","type":"Property","Name":"CharacterAppearanceId","tags":[],"Class":"Player"},{"ValueType":"ChatMode","type":"Property","Name":"ChatMode","tags":["RobloxScriptSecurity","readonly"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"DataComplexity","tags":["deprecated","readonly"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"DataComplexityLimit","tags":["LocalUserSecurity","deprecated"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"DataReady","tags":["deprecated","readonly"],"Class":"Player"},{"ValueType":"DevCameraOcclusionMode","type":"Property","Name":"DevCameraOcclusionMode","tags":[],"Class":"Player"},{"ValueType":"DevComputerCameraMovementMode","type":"Property","Name":"DevComputerCameraMode","tags":[],"Class":"Player"},{"ValueType":"DevComputerMovementMode","type":"Property","Name":"DevComputerMovementMode","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"DevEnableMouseLock","tags":[],"Class":"Player"},{"ValueType":"DevTouchCameraMovementMode","type":"Property","Name":"DevTouchCameraMode","tags":[],"Class":"Player"},{"ValueType":"DevTouchMovementMode","type":"Property","Name":"DevTouchMovementMode","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"DisplayName","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"int64","type":"Property","Name":"FollowUserId","tags":["readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Guest","tags":["RobloxScriptSecurity","readonly"],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"LocaleId","tags":["hidden","readonly"],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"MaximumSimulationRadius","tags":["LocalUserSecurity"],"Class":"Player"},{"ValueType":"MembershipType","type":"Property","Name":"MembershipType","tags":["readonly"],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Neutral","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"OsPlatform","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"Class:Instance","type":"Property","Name":"ReplicationFocus","tags":[],"Class":"Player"},{"ValueType":"Class:SpawnLocation","type":"Property","Name":"RespawnLocation","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"SimulationRadius","tags":["LocalUserSecurity"],"Class":"Player"},{"ValueType":"Class:Team","type":"Property","Name":"Team","tags":[],"Class":"Player"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Teleported","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"TeleportedIn","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"int64","type":"Property","Name":"UserId","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"VRDevice","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"int64","type":"Property","Name":"userId","tags":["deprecated"],"Class":"Player"},{"ReturnType":"void","Arguments":[{"Type":"Array","Name":"userIds","Default":null}],"Name":"AddToBlockList","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearCharacterAppearance","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"float","Arguments":[{"Type":"Vector3","Name":"point","Default":null}],"Name":"DistanceFromCharacter","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"FriendStatus","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"GetFriendStatus","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetGameSessionID","tags":["RobloxSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetJoinData","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetMouse","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetUnder13","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"HasAppearanceLoaded","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsUserAvailableForExperiment","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Kick","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"assetInstance","Default":null}],"Name":"LoadCharacterAppearance","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"LoadData","tags":["LocalUserSecurity","deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"walkDirection","Default":null},{"Type":"bool","Name":"relativeToCamera","Default":"false"}],"Name":"Move","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RemoveCharacter","tags":["LocalUserSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"RequestFriendship","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"RevokeFriendship","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"SaveBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SaveData","tags":["LocalUserSecurity","deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Instance","Name":"value","Default":null}],"Name":"SaveInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"double","Name":"value","Default":null}],"Name":"SaveNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"value","Default":null}],"Name":"SaveString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"accountAge","Default":null}],"Name":"SetAccountAge","tags":["PluginSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"MembershipType","Name":"membershipType","Default":null}],"Name":"SetMembershipType","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetSuperSafeChat","tags":["PluginSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetUnder13","tags":["RobloxSecurity","deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"bool","Name":"blocked","Default":null}],"Name":"UpdatePlayerBlocked","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"saveBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Instance","Name":"value","Default":null}],"Name":"saveInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"double","Name":"value","Default":null}],"Name":"saveNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"value","Default":null}],"Name":"saveString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"maxFriends","Default":"200"}],"Name":"GetFriendsOnline","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int64","Name":"groupId","Default":null}],"Name":"GetRankInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int64","Name":"groupId","Default":null}],"Name":"GetRoleInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"IsBestFriendsWith","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"IsFriendsWith","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"groupId","Default":null}],"Name":"IsInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"void","Arguments":[],"Name":"LoadCharacter","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"void","Arguments":[],"Name":"LoadCharacterBlocking","tags":["LocalUserSecurity"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[],"Name":"WaitForDataReady","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"isFriendsWith","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[],"Name":"waitForDataReady","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterAdded","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterAppearanceLoaded","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterRemoving","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"recipient","Type":"Instance"}],"Name":"Chatted","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"friendStatus","Type":"FriendStatus"}],"Name":"FriendStatusChanged","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"time","Type":"double"}],"Name":"Idled","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"teleportState","Type":"TeleportState"},{"Name":"placeId","Type":"int64"},{"Name":"spawnName","Type":"string"}],"Name":"OnTeleport","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"radius","Type":"float"}],"Name":"SimulationRadiusChanged","tags":["LocalUserSecurity"],"Class":"Player","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PlayerScripts","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"ClearComputerCameraMovementModes","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearComputerMovementModes","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearTouchCameraMovementModes","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearTouchMovementModes","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetRegisteredComputerCameraMovementModes","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetRegisteredComputerMovementModes","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetRegisteredTouchCameraMovementModes","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetRegisteredTouchMovementModes","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ComputerCameraMovementMode","Name":"cameraMovementMode","Default":null}],"Name":"RegisterComputerCameraMovementMode","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ComputerMovementMode","Name":"movementMode","Default":null}],"Name":"RegisterComputerMovementMode","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"TouchCameraMovementMode","Name":"cameraMovementMode","Default":null}],"Name":"RegisterTouchCameraMovementMode","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"TouchMovementMode","Name":"movementMode","Default":null}],"Name":"RegisterTouchMovementMode","tags":[],"Class":"PlayerScripts","type":"Function"},{"Arguments":[],"Name":"ComputerCameraMovementModeRegistered","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Event"},{"Arguments":[],"Name":"ComputerMovementModeRegistered","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Event"},{"Arguments":[],"Name":"TouchCameraMovementModeRegistered","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Event"},{"Arguments":[],"Name":"TouchMovementModeRegistered","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Players","tags":[]},{"ValueType":"bool","type":"Property","Name":"BubbleChat","tags":["readonly"],"Class":"Players"},{"ValueType":"bool","type":"Property","Name":"CharacterAutoLoads","tags":[],"Class":"Players"},{"ValueType":"bool","type":"Property","Name":"ClassicChat","tags":["readonly"],"Class":"Players"},{"ValueType":"Class:Instance","type":"Property","Name":"LocalPlayer","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"MaxPlayers","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"MaxPlayersInternal","tags":["LocalUserSecurity"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"NumPlayers","tags":["deprecated","readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"PreferredPlayers","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"PreferredPlayersInternal","tags":["LocalUserSecurity"],"Class":"Players"},{"ValueType":"Class:Instance","type":"Property","Name":"localPlayer","tags":["deprecated","hidden","readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"numPlayers","tags":["deprecated","hidden","readonly"],"Class":"Players"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null}],"Name":"Chat","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"CreateLocalPlayer","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetPlayerByUserId","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"GetPlayerFromCharacter","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetPlayers","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"reason","Default":null},{"Type":"string","Name":"optionalMessage","Default":null}],"Name":"ReportAbuse","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ChatStyle","Name":"style","Default":"Classic"}],"Name":"SetChatStyle","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null}],"Name":"TeamChat","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null},{"Type":"Instance","Name":"player","Default":null}],"Name":"WhisperChat","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"getPlayerFromCharacter","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"getPlayers","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"playerFromCharacter","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"players","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetCharacterAppearanceAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetCharacterAppearanceInfoAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetFriendsAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetNameFromUserIdAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"int64","Arguments":[{"Type":"string","Name":"userName","Default":null}],"Name":"GetUserIdFromNameAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"ThumbnailType","Name":"thumbnailType","Default":null},{"Type":"ThumbnailSize","Name":"thumbnailSize","Default":null}],"Name":"GetUserThumbnailAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"player","Type":"Instance"},{"Name":"friendRequestEvent","Type":"FriendRequestEvent"}],"Name":"FriendRequestEvent","tags":["RobloxScriptSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"}],"Name":"GameAnnounce","tags":["RobloxScriptSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerAdded","tags":[],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"chatType","Type":"PlayerChatType"},{"Name":"player","Type":"Instance"},{"Name":"message","Type":"string"},{"Name":"targetPlayer","Type":"Instance"}],"Name":"PlayerChatted","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerConnecting","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerDisconnecting","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerRejoining","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerRemoving","tags":[],"Class":"Players","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Plugin","tags":[]},{"ValueType":"bool","type":"Property","Name":"CollisionEnabled","tags":["readonly"],"Class":"Plugin"},{"ValueType":"float","type":"Property","Name":"GridSize","tags":["readonly"],"Class":"Plugin"},{"ValueType":"bool","type":"Property","Name":"UsesAssetInsertionDrag","tags":["RobloxScriptSecurity"],"Class":"Plugin"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"exclusiveMouse","Default":null}],"Name":"Activate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"actionId","Default":null},{"Type":"string","Name":"text","Default":null},{"Type":"string","Name":"statusTip","Default":null},{"Type":"string","Name":"iconName","Default":""}],"Name":"CreatePluginAction","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"CreateToolbar","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Deactivate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"JointCreationMode","Arguments":[],"Name":"GetJoinMode","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetMouse","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"RibbonTool","Arguments":[],"Name":"GetSelectedRibbonTool","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"GetSetting","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"int64","Arguments":[],"Name":"GetStudioUserId","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"rigModel","Default":null}],"Name":"ImportFbxAnimation","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsActivated","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsActivatedWithExclusiveMouse","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Negate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"script","Default":null},{"Type":"int","Name":"lineNumber","Default":"1"}],"Name":"OpenScript","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"OpenWikiPage","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"soundChannel","Default":null}],"Name":"PauseSound","tags":["RobloxScriptSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"soundChannel","Default":null}],"Name":"PlaySound","tags":["RobloxScriptSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"soundChannel","Default":null}],"Name":"ResumeSound","tags":["RobloxScriptSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SaveSelectedToRoblox","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"RibbonTool","Name":"tool","Default":null},{"Type":"UDim2","Name":"position","Default":null}],"Name":"SelectRibbonTool","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Separate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetSetting","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"decal","Default":null}],"Name":"StartDecalDrag","tags":["RobloxScriptSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"PluginDrag","Name":"drag","Default":null}],"Name":"StartDrag","tags":["RobloxScriptSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StopAllSounds","tags":["RobloxScriptSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Union","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"pluginGuiId","Default":null},{"Type":"DockWidgetPluginGuiInfo","Name":"dockWidgetPluginGuiInfo","Default":null}],"Name":"CreateDockWidgetPluginGui","tags":["PluginSecurity"],"Class":"Plugin","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"pluginGuiId","Default":null},{"Type":"Dictionary","Name":"pluginGuiOptions","Default":null}],"Name":"CreateQWidgetPluginGui","tags":["RobloxScriptSecurity"],"Class":"Plugin","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[],"Name":"ImportFbxRig","tags":["PluginSecurity"],"Class":"Plugin","type":"YieldFunction"},{"ReturnType":"int64","Arguments":[{"Type":"string","Name":"assetType","Default":null}],"Name":"PromptForExistingAssetId","tags":["PluginSecurity"],"Class":"Plugin","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"suggestedFileName","Default":""}],"Name":"PromptSaveSelection","tags":["PluginSecurity"],"Class":"Plugin","type":"YieldFunction"},{"Arguments":[],"Name":"Deactivation","tags":["PluginSecurity"],"Class":"Plugin","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PluginAction","tags":[]},{"ValueType":"string","type":"Property","Name":"ActionId","tags":["readonly"],"Class":"PluginAction"},{"ValueType":"string","type":"Property","Name":"StatusTip","tags":["readonly"],"Class":"PluginAction"},{"ValueType":"string","type":"Property","Name":"Text","tags":["readonly"],"Class":"PluginAction"},{"Arguments":[],"Name":"Triggered","tags":["PluginSecurity"],"Class":"PluginAction","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PluginGuiService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"PluginManager","tags":[]},{"ReturnType":"Instance","Arguments":[],"Name":"CreatePlugin","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"filePath","Default":""}],"Name":"ExportPlace","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"filePath","Default":""}],"Name":"ExportSelection","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"PointsService","tags":["notCreatable"]},{"ReturnType":"int","Arguments":[],"Name":"GetAwardablePoints","tags":["deprecated"],"Class":"PointsService","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int64","Name":"userId","Default":null},{"Type":"int","Name":"amount","Default":null}],"Name":"AwardPoints","tags":[],"Class":"PointsService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetGamePointBalance","tags":[],"Class":"PointsService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetPointBalance","tags":["deprecated"],"Class":"PointsService","type":"YieldFunction"},{"Arguments":[{"Name":"userId","Type":"int64"},{"Name":"pointsAwarded","Type":"int"},{"Name":"userBalanceInGame","Type":"int"},{"Name":"userTotalBalance","Type":"int"}],"Name":"PointsAwarded","tags":[],"Class":"PointsService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Pose","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Pose"},{"ValueType":"PoseEasingDirection","type":"Property","Name":"EasingDirection","tags":[],"Class":"Pose"},{"ValueType":"PoseEasingStyle","type":"Property","Name":"EasingStyle","tags":[],"Class":"Pose"},{"ValueType":"float","type":"Property","Name":"MaskWeight","tags":["deprecated"],"Class":"Pose"},{"ValueType":"float","type":"Property","Name":"Weight","tags":[],"Class":"Pose"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"AddSubPose","tags":[],"Class":"Pose","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetSubPoses","tags":[],"Class":"Pose","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"RemoveSubPose","tags":[],"Class":"Pose","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"PostEffect","tags":[]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"PostEffect"},{"Superclass":"PostEffect","type":"Class","Name":"BloomEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Intensity","tags":[],"Class":"BloomEffect"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"BloomEffect"},{"ValueType":"float","type":"Property","Name":"Threshold","tags":[],"Class":"BloomEffect"},{"Superclass":"PostEffect","type":"Class","Name":"BlurEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"BlurEffect"},{"Superclass":"PostEffect","type":"Class","Name":"ColorCorrectionEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"float","type":"Property","Name":"Contrast","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"float","type":"Property","Name":"Saturation","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"Color3","type":"Property","Name":"TintColor","tags":[],"Class":"ColorCorrectionEffect"},{"Superclass":"PostEffect","type":"Class","Name":"SunRaysEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Intensity","tags":[],"Class":"SunRaysEffect"},{"ValueType":"float","type":"Property","Name":"Spread","tags":[],"Class":"SunRaysEffect"},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadata","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataCallbacks","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataClasses","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataEnums","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataEvents","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataFunctions","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataItem","tags":[]},{"ValueType":"bool","type":"Property","Name":"Browsable","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"string","type":"Property","Name":"ClassCategory","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"string","type":"Property","Name":"Constraint","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"bool","type":"Property","Name":"Deprecated","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"bool","type":"Property","Name":"EditingDisabled","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"bool","type":"Property","Name":"IsBackend","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"string","type":"Property","Name":"ScriptContext","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"double","type":"Property","Name":"UIMaximum","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"double","type":"Property","Name":"UIMinimum","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"double","type":"Property","Name":"UINumTicks","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"string","type":"Property","Name":"summary","tags":[],"Class":"ReflectionMetadataItem"},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataClass","tags":[]},{"ValueType":"int","type":"Property","Name":"ExplorerImageIndex","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"int","type":"Property","Name":"ExplorerOrder","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"bool","type":"Property","Name":"Insertable","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"string","type":"Property","Name":"PreferredParent","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"string","type":"Property","Name":"PreferredParents","tags":[],"Class":"ReflectionMetadataClass"},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataEnum","tags":[]},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataEnumItem","tags":[]},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataMember","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataProperties","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataYieldFunctions","tags":[]},{"Superclass":"Instance","type":"Class","Name":"RemoteEvent","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireAllClients","tags":[],"Class":"RemoteEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireClient","tags":[],"Class":"RemoteEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireServer","tags":[],"Class":"RemoteEvent","type":"Function"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnClientEvent","tags":[],"Class":"RemoteEvent","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"arguments","Type":"Tuple"}],"Name":"OnServerEvent","tags":[],"Class":"RemoteEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"RemoteFunction","tags":[]},{"ReturnType":"Tuple","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"InvokeClient","tags":[],"Class":"RemoteFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"InvokeServer","tags":[],"Class":"RemoteFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnClientInvoke","tags":[],"Class":"RemoteFunction","type":"Callback"},{"ReturnType":"Tuple","Arguments":[{"Name":"player","Type":"Instance"},{"Name":"arguments","Type":"Tuple"}],"Name":"OnServerInvoke","tags":[],"Class":"RemoteFunction","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"RenderSettings","tags":["notbrowsable"]},{"ValueType":"int","type":"Property","Name":"AutoFRMLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"EagerBulkExecution","tags":[],"Class":"RenderSettings"},{"ValueType":"QualityLevel","type":"Property","Name":"EditQualityLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"EnableFRM","tags":["hidden"],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ExportMergeByMaterial","tags":[],"Class":"RenderSettings"},{"ValueType":"FramerateManagerMode","type":"Property","Name":"FrameRateManager","tags":[],"Class":"RenderSettings"},{"ValueType":"GraphicsMode","type":"Property","Name":"GraphicsMode","tags":[],"Class":"RenderSettings"},{"ValueType":"int","type":"Property","Name":"MeshCacheSize","tags":[],"Class":"RenderSettings"},{"ValueType":"QualityLevel","type":"Property","Name":"QualityLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ReloadAssets","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"RenderCSGTrianglesDebug","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ShowBoundingBoxes","tags":[],"Class":"RenderSettings"},{"ReturnType":"int","Arguments":[],"Name":"GetMaxQualityLevel","tags":[],"Class":"RenderSettings","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"RenderingTest","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"RenderingTest"},{"ValueType":"int","type":"Property","Name":"ComparisonDiffThreshold","tags":[],"Class":"RenderingTest"},{"ValueType":"RenderingTestComparisonMethod","type":"Property","Name":"ComparisonMethod","tags":[],"Class":"RenderingTest"},{"ValueType":"float","type":"Property","Name":"ComparisonPsnrThreshold","tags":[],"Class":"RenderingTest"},{"ValueType":"string","type":"Property","Name":"Description","tags":[],"Class":"RenderingTest"},{"ValueType":"float","type":"Property","Name":"FieldOfView","tags":[],"Class":"RenderingTest"},{"ValueType":"Vector3","type":"Property","Name":"Orientation","tags":[],"Class":"RenderingTest"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"RenderingTest"},{"ValueType":"int","type":"Property","Name":"QualityLevel","tags":[],"Class":"RenderingTest"},{"ValueType":"bool","type":"Property","Name":"ShouldSkip","tags":[],"Class":"RenderingTest"},{"ValueType":"string","type":"Property","Name":"Ticket","tags":[],"Class":"RenderingTest"},{"Superclass":"Instance","type":"Class","Name":"ReplicatedFirst","tags":["notCreatable"]},{"ReturnType":"bool","Arguments":[],"Name":"IsDefaultLoadingGuiRemoved","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsFinishedReplicating","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RemoveDefaultLoadingScreen","tags":[],"Class":"ReplicatedFirst","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetDefaultLoadingGuiRemoved","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Function"},{"Arguments":[],"Name":"DefaultLoadingGuiRemoved","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Event"},{"Arguments":[],"Name":"FinishedReplicating","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Event"},{"Arguments":[],"Name":"RemoveDefaultLoadingGuiSignal","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ReplicatedStorage","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"RobloxReplicatedStorage","tags":["notCreatable","notbrowsable"]},{"Superclass":"Instance","type":"Class","Name":"RunService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"int","Name":"priority","Default":null},{"Type":"Function","Name":"function","Default":null}],"Name":"BindToRenderStep","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetRobloxVersion","tags":["RobloxScriptSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsClient","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsEdit","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsRunMode","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsRunning","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsServer","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsStudio","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Pause","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Reset","tags":["PluginSecurity","deprecated"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Run","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null}],"Name":"Set3dRenderingEnabled","tags":["RobloxScriptSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"focus","Default":null}],"Name":"SetRobloxGuiFocused","tags":["RobloxScriptSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Stop","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"UnbindFromRenderStep","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null}],"Name":"setThrottleFramerateEnabled","tags":["RobloxScriptSecurity"],"Class":"RunService","type":"Function"},{"Arguments":[{"Name":"step","Type":"double"}],"Name":"Heartbeat","tags":[],"Class":"RunService","type":"Event"},{"Arguments":[{"Name":"step","Type":"double"}],"Name":"RenderStepped","tags":[],"Class":"RunService","type":"Event"},{"Arguments":[{"Name":"time","Type":"double"},{"Name":"step","Type":"double"}],"Name":"Stepped","tags":[],"Class":"RunService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"RuntimeScriptService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ScriptContext","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"ScriptsDisabled","tags":["LocalUserSecurity"],"Class":"ScriptContext"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Instance","Name":"parent","Default":null}],"Name":"AddCoreScriptLocal","tags":["RobloxScriptSecurity"],"Class":"ScriptContext","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"seconds","Default":null}],"Name":"SetTimeout","tags":["PluginSecurity"],"Class":"ScriptContext","type":"Function"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"stackTrace","Type":"string"},{"Name":"script","Type":"Instance"}],"Name":"Error","tags":[],"Class":"ScriptContext","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ScriptDebugger","tags":["notCreatable"]},{"ValueType":"int","type":"Property","Name":"CurrentLine","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"bool","type":"Property","Name":"IsDebugging","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"bool","type":"Property","Name":"IsPaused","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"Class:Instance","type":"Property","Name":"Script","tags":["readonly"],"Class":"ScriptDebugger"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"expression","Default":null}],"Name":"AddWatch","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetBreakpoints","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[],"Name":"GetGlobals","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"GetLocals","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetStack","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"GetUpvalues","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"Instance","Name":"watch","Default":null}],"Name":"GetWatchValue","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetWatches","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"line","Default":null}],"Name":"SetBreakpoint","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetGlobal","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null},{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"SetLocal","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null},{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"SetUpvalue","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepIn","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOut","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOver","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"Arguments":[{"Name":"breakpoint","Type":"Instance"}],"Name":"BreakpointAdded","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"breakpoint","Type":"Instance"}],"Name":"BreakpointRemoved","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"line","Type":"int"}],"Name":"EncounteredBreak","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[],"Name":"Resuming","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"watch","Type":"Instance"}],"Name":"WatchAdded","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"watch","Type":"Instance"}],"Name":"WatchRemoved","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ScriptService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Selection","tags":[]},{"ReturnType":"Objects","Arguments":[],"Name":"Get","tags":["PluginSecurity"],"Class":"Selection","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"selection","Default":null}],"Name":"Set","tags":["PluginSecurity"],"Class":"Selection","type":"Function"},{"Arguments":[],"Name":"SelectionChanged","tags":[],"Class":"Selection","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ServerScriptService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ServerStorage","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ServiceProvider","tags":["notbrowsable"]},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindService","tags":[],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"GetService","tags":[],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"getService","tags":["deprecated"],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"service","tags":["deprecated"],"Class":"ServiceProvider","type":"Function"},{"Arguments":[],"Name":"Close","tags":[],"Class":"ServiceProvider","type":"Event"},{"Arguments":[],"Name":"CloseLate","tags":["LocalUserSecurity"],"Class":"ServiceProvider","type":"Event"},{"Arguments":[{"Name":"service","Type":"Instance"}],"Name":"ServiceAdded","tags":[],"Class":"ServiceProvider","type":"Event"},{"Arguments":[{"Name":"service","Type":"Instance"}],"Name":"ServiceRemoving","tags":[],"Class":"ServiceProvider","type":"Event"},{"Superclass":"ServiceProvider","type":"Class","Name":"DataModel","tags":[]},{"ValueType":"int64","type":"Property","Name":"CreatorId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"CreatorType","type":"Property","Name":"CreatorType","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int64","type":"Property","Name":"GameId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"GearGenreSetting","type":"Property","Name":"GearGenreSetting","tags":["readonly"],"Class":"DataModel"},{"ValueType":"Genre","type":"Property","Name":"Genre","tags":["readonly"],"Class":"DataModel"},{"ValueType":"bool","type":"Property","Name":"IsSFFlagsLoaded","tags":["RobloxScriptSecurity","readonly"],"Class":"DataModel"},{"ValueType":"string","type":"Property","Name":"JobId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int64","type":"Property","Name":"PlaceId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int","type":"Property","Name":"PlaceVersion","tags":["readonly"],"Class":"DataModel"},{"ValueType":"string","type":"Property","Name":"PrivateServerId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int64","type":"Property","Name":"PrivateServerOwnerId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"string","type":"Property","Name":"VIPServerId","tags":["deprecated","hidden","readonly"],"Class":"DataModel"},{"ValueType":"int64","type":"Property","Name":"VIPServerOwnerId","tags":["deprecated","hidden","readonly"],"Class":"DataModel"},{"ValueType":"Class:Workspace","type":"Property","Name":"Workspace","tags":["readonly"],"Class":"DataModel"},{"ValueType":"Class:Instance","type":"Property","Name":"lighting","tags":["deprecated","readonly"],"Class":"DataModel"},{"ValueType":"Class:Workspace","type":"Property","Name":"workspace","tags":["deprecated","readonly"],"Class":"DataModel"},{"ReturnType":"void","Arguments":[{"Type":"Function","Name":"function","Default":null}],"Name":"BindToClose","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"jobname","Default":null},{"Type":"double","Name":"greaterThan","Default":null}],"Name":"GetJobIntervalPeakFraction","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"jobname","Default":null},{"Type":"double","Name":"greaterThan","Default":null}],"Name":"GetJobTimePeakFraction","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetJobsExtendedStats","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetJobsInfo","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetMessage","tags":["deprecated"],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetRemoteBuildMode","tags":["deprecated"],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"GearType","Name":"gearType","Default":null}],"Name":"IsGearTypeAllowed","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsLoaded","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Content","Name":"url","Default":null}],"Name":"Load","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"OpenScreenshotsFolder","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"OpenVideosFolder","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"category","Default":null},{"Type":"string","Name":"action","Default":"custom"},{"Type":"string","Name":"label","Default":"none"},{"Type":"int","Name":"value","Default":"0"}],"Name":"ReportInGoogleAnalytics","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Shutdown","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"HttpGetAsync","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"string","Name":"contentType","Default":"*/*"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"HttpPostAsync","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"SaveFilter","Name":"saveFilter","Default":"SaveAll"}],"Name":"SavePlace","tags":["deprecated"],"Class":"DataModel","type":"YieldFunction"},{"Arguments":[],"Name":"AllowedGearTypeChanged","tags":["deprecated"],"Class":"DataModel","type":"Event"},{"Arguments":[{"Name":"betterQuality","Type":"bool"}],"Name":"GraphicsQualityChangeRequest","tags":[],"Class":"DataModel","type":"Event"},{"Arguments":[{"Name":"object","Type":"Instance"},{"Name":"descriptor","Type":"Property"}],"Name":"ItemChanged","tags":["deprecated"],"Class":"DataModel","type":"Event"},{"Arguments":[],"Name":"Loaded","tags":[],"Class":"DataModel","type":"Event"},{"Arguments":[{"Name":"path","Type":"string"}],"Name":"ScreenshotReady","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Event"},{"ReturnType":"Tuple","Arguments":[],"Name":"OnClose","tags":["deprecated"],"Class":"DataModel","type":"Callback"},{"Superclass":"ServiceProvider","type":"Class","Name":"GenericSettings","tags":[]},{"Superclass":"GenericSettings","type":"Class","Name":"AnalysticsSettings","tags":[]},{"Superclass":"GenericSettings","type":"Class","Name":"GlobalSettings","tags":["notbrowsable"]},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"GetFFlag","tags":[],"Class":"GlobalSettings","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"GetFVariable","tags":[],"Class":"GlobalSettings","type":"Function"},{"Superclass":"GenericSettings","type":"Class","Name":"UserSettings","tags":[]},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"IsUserFeatureEnabled","tags":[],"Class":"UserSettings","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Reset","tags":[],"Class":"UserSettings","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Sky","tags":[]},{"ValueType":"bool","type":"Property","Name":"CelestialBodiesShown","tags":[],"Class":"Sky"},{"ValueType":"float","type":"Property","Name":"MoonAngularSize","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"MoonTextureId","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxBk","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxDn","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxFt","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxLf","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxRt","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxUp","tags":[],"Class":"Sky"},{"ValueType":"int","type":"Property","Name":"StarCount","tags":[],"Class":"Sky"},{"ValueType":"float","type":"Property","Name":"SunAngularSize","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SunTextureId","tags":[],"Class":"Sky"},{"Superclass":"Instance","type":"Class","Name":"Smoke","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Smoke"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"Opacity","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"RiseVelocity","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"Smoke"},{"Superclass":"Instance","type":"Class","Name":"Sound","tags":[]},{"ValueType":"float","type":"Property","Name":"EmitterSize","tags":[],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"IsLoaded","tags":["readonly"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"IsPaused","tags":["readonly"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"IsPlaying","tags":["readonly"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"Looped","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"MaxDistance","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"MinDistance","tags":["deprecated"],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"Pitch","tags":["deprecated"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"PlayOnRemove","tags":[],"Class":"Sound"},{"ValueType":"double","type":"Property","Name":"PlaybackLoudness","tags":["readonly"],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"PlaybackSpeed","tags":[],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"Playing","tags":[],"Class":"Sound"},{"ValueType":"RollOffMode","type":"Property","Name":"RollOffMode","tags":[],"Class":"Sound"},{"ValueType":"Class:SoundGroup","type":"Property","Name":"SoundGroup","tags":[],"Class":"Sound"},{"ValueType":"Content","type":"Property","Name":"SoundId","tags":[],"Class":"Sound"},{"ValueType":"double","type":"Property","Name":"TimeLength","tags":["readonly"],"Class":"Sound"},{"ValueType":"double","type":"Property","Name":"TimePosition","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"Volume","tags":[],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"isPlaying","tags":["deprecated","readonly"],"Class":"Sound"},{"ReturnType":"void","Arguments":[],"Name":"Pause","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Play","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Stop","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"pause","tags":["deprecated"],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"play","tags":["deprecated"],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"stop","tags":["deprecated"],"Class":"Sound","type":"Function"},{"Arguments":[{"Name":"soundId","Type":"string"},{"Name":"numOfTimesLooped","Type":"int"}],"Name":"DidLoop","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Ended","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Loaded","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Paused","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Played","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Resumed","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Stopped","tags":[],"Class":"Sound","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"SoundEffect","tags":[]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"SoundEffect"},{"ValueType":"int","type":"Property","Name":"Priority","tags":[],"Class":"SoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"ChorusSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Depth","tags":[],"Class":"ChorusSoundEffect"},{"ValueType":"float","type":"Property","Name":"Mix","tags":[],"Class":"ChorusSoundEffect"},{"ValueType":"float","type":"Property","Name":"Rate","tags":[],"Class":"ChorusSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"CompressorSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Attack","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"float","type":"Property","Name":"GainMakeup","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"float","type":"Property","Name":"Ratio","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"float","type":"Property","Name":"Release","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"Class:Instance","type":"Property","Name":"SideChain","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"float","type":"Property","Name":"Threshold","tags":[],"Class":"CompressorSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"DistortionSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Level","tags":[],"Class":"DistortionSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"EchoSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Delay","tags":[],"Class":"EchoSoundEffect"},{"ValueType":"float","type":"Property","Name":"DryLevel","tags":[],"Class":"EchoSoundEffect"},{"ValueType":"float","type":"Property","Name":"Feedback","tags":[],"Class":"EchoSoundEffect"},{"ValueType":"float","type":"Property","Name":"WetLevel","tags":[],"Class":"EchoSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"EqualizerSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"HighGain","tags":[],"Class":"EqualizerSoundEffect"},{"ValueType":"float","type":"Property","Name":"LowGain","tags":[],"Class":"EqualizerSoundEffect"},{"ValueType":"float","type":"Property","Name":"MidGain","tags":[],"Class":"EqualizerSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"FlangeSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Depth","tags":[],"Class":"FlangeSoundEffect"},{"ValueType":"float","type":"Property","Name":"Mix","tags":[],"Class":"FlangeSoundEffect"},{"ValueType":"float","type":"Property","Name":"Rate","tags":[],"Class":"FlangeSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"PitchShiftSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Octave","tags":[],"Class":"PitchShiftSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"ReverbSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"DecayTime","tags":[],"Class":"ReverbSoundEffect"},{"ValueType":"float","type":"Property","Name":"Density","tags":[],"Class":"ReverbSoundEffect"},{"ValueType":"float","type":"Property","Name":"Diffusion","tags":[],"Class":"ReverbSoundEffect"},{"ValueType":"float","type":"Property","Name":"DryLevel","tags":[],"Class":"ReverbSoundEffect"},{"ValueType":"float","type":"Property","Name":"WetLevel","tags":[],"Class":"ReverbSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"TremoloSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Depth","tags":[],"Class":"TremoloSoundEffect"},{"ValueType":"float","type":"Property","Name":"Duty","tags":[],"Class":"TremoloSoundEffect"},{"ValueType":"float","type":"Property","Name":"Frequency","tags":[],"Class":"TremoloSoundEffect"},{"Superclass":"Instance","type":"Class","Name":"SoundGroup","tags":[]},{"ValueType":"float","type":"Property","Name":"Volume","tags":[],"Class":"SoundGroup"},{"Superclass":"Instance","type":"Class","Name":"SoundService","tags":["notCreatable"]},{"ValueType":"ReverbType","type":"Property","Name":"AmbientReverb","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"DistanceFactor","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"DopplerScale","tags":[],"Class":"SoundService"},{"ValueType":"bool","type":"Property","Name":"RespectFilteringEnabled","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"RolloffScale","tags":[],"Class":"SoundService"},{"ReturnType":"bool","Arguments":[],"Name":"BeginRecording","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetListener","tags":[],"Class":"SoundService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"sound","Default":null}],"Name":"PlayLocalSound","tags":[],"Class":"SoundService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SoundType","Name":"sound","Default":null}],"Name":"PlayStockSound","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ListenerType","Name":"listenerType","Default":null},{"Type":"Tuple","Name":"listener","Default":null}],"Name":"SetListener","tags":[],"Class":"SoundService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"deviceIndex","Default":null}],"Name":"SetRecordingDevice","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"EndRecording","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetRecordingDevices","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Sparkles","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":["hidden"],"Class":"Sparkles"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Sparkles"},{"ValueType":"Color3","type":"Property","Name":"SparkleColor","tags":[],"Class":"Sparkles"},{"Superclass":"Instance","type":"Class","Name":"SpawnerService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"StarterGear","tags":[]},{"Superclass":"Instance","type":"Class","Name":"StarterPlayer","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AllowCustomAnimations","tags":["ScriptWriteRestricted: [NotAccessibleSecurity]","hidden"],"Class":"StarterPlayer"},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"CameraMaxZoomDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"CameraMinZoomDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"CameraMode","type":"Property","Name":"CameraMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevCameraOcclusionMode","type":"Property","Name":"DevCameraOcclusionMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevComputerCameraMovementMode","type":"Property","Name":"DevComputerCameraMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevComputerMovementMode","type":"Property","Name":"DevComputerMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevTouchCameraMovementMode","type":"Property","Name":"DevTouchCameraMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevTouchMovementMode","type":"Property","Name":"DevTouchMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"bool","type":"Property","Name":"EnableMouseLockOption","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"bool","type":"Property","Name":"LoadCharacterAppearance","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"StarterPlayer"},{"Superclass":"Instance","type":"Class","Name":"StarterPlayerScripts","tags":[]},{"Superclass":"StarterPlayerScripts","type":"Class","Name":"StarterCharacterScripts","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Stats","tags":[]},{"ValueType":"int","type":"Property","Name":"ContactsCount","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"DataReceiveKbps","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"DataSendKbps","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"HeartbeatTimeMs","tags":["readonly"],"Class":"Stats"},{"ValueType":"int","type":"Property","Name":"InstanceCount","tags":["readonly"],"Class":"Stats"},{"ValueType":"int","type":"Property","Name":"MovingPrimitivesCount","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"PhysicsReceiveKbps","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"PhysicsSendKbps","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"PhysicsStepTimeMs","tags":["readonly"],"Class":"Stats"},{"ValueType":"int","type":"Property","Name":"PrimitivesCount","tags":["readonly"],"Class":"Stats"},{"ReturnType":"float","Arguments":[{"Type":"DeveloperMemoryTag","Name":"tag","Default":null}],"Name":"GetMemoryUsageMbForTag","tags":[],"Class":"Stats","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetTotalMemoryUsageMb","tags":[],"Class":"Stats","type":"Function"},{"ReturnType":"Dictionary","Arguments":[{"Type":"TextureQueryType","Name":"queryType","Default":null},{"Type":"int","Name":"pageIndex","Default":null},{"Type":"int","Name":"pageSize","Default":null}],"Name":"GetPaginatedMemoryByTexture","tags":["RobloxScriptSecurity"],"Class":"Stats","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"StatsItem","tags":[]},{"ReturnType":"double","Arguments":[],"Name":"GetValue","tags":["PluginSecurity"],"Class":"StatsItem","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetValueString","tags":["PluginSecurity"],"Class":"StatsItem","type":"Function"},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageItemDouble","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageItemInt","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageTimeIntervalItem","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"TotalCountTimeIntervalItem","tags":[]},{"Superclass":"Instance","type":"Class","Name":"TaskScheduler","tags":[]},{"ValueType":"double","type":"Property","Name":"SchedulerDutyCycle","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"SchedulerRate","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"ThreadPoolConfig","type":"Property","Name":"ThreadPoolConfig","tags":[],"Class":"TaskScheduler"},{"ValueType":"int","type":"Property","Name":"ThreadPoolSize","tags":["readonly"],"Class":"TaskScheduler"},{"Superclass":"Instance","type":"Class","Name":"Team","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoAssignable","tags":[],"Class":"Team"},{"ValueType":"bool","type":"Property","Name":"AutoColorCharacters","tags":["deprecated"],"Class":"Team"},{"ValueType":"int","type":"Property","Name":"Score","tags":["deprecated"],"Class":"Team"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Team"},{"ReturnType":"Objects","Arguments":[],"Name":"GetPlayers","tags":[],"Class":"Team","type":"Function"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerAdded","tags":[],"Class":"Team","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerRemoved","tags":[],"Class":"Team","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Teams","tags":["notCreatable"]},{"ReturnType":"Objects","Arguments":[],"Name":"GetTeams","tags":[],"Class":"Teams","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RebalanceTeams","tags":["deprecated"],"Class":"Teams","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TeleportService","tags":[]},{"ValueType":"bool","type":"Property","Name":"CustomizedTeleportUI","tags":["deprecated"],"Class":"TeleportService"},{"ReturnType":"Instance","Arguments":[],"Name":"GetArrivingTeleportGui","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"Variant","Arguments":[],"Name":"GetLocalPlayerTeleportData","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"setting","Default":null}],"Name":"GetTeleportSetting","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"gui","Default":null}],"Name":"SetTeleportGui","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"setting","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetTeleportSetting","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"placeId","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"Teleport","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"TeleportCancel","tags":["RobloxScriptSecurity"],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"placeId","Default":null},{"Type":"string","Name":"instanceId","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"string","Name":"spawnName","Default":""},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToPlaceInstance","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"placeId","Default":null},{"Type":"string","Name":"reservedServerAccessCode","Default":null},{"Type":"Objects","Name":"players","Default":null},{"Type":"string","Name":"spawnName","Default":""},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToPrivateServer","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"placeId","Default":null},{"Type":"string","Name":"spawnName","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToSpawnByName","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int64","Name":"userId","Default":null}],"Name":"GetPlayerPlaceInstanceAsync","tags":[],"Class":"TeleportService","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"int64","Name":"placeId","Default":null}],"Name":"ReserveServer","tags":[],"Class":"TeleportService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int64","Name":"placeId","Default":null},{"Type":"Objects","Name":"players","Default":null},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportPartyAsync","tags":[],"Class":"TeleportService","type":"YieldFunction"},{"Arguments":[{"Name":"loadingGui","Type":"Instance"},{"Name":"dataTable","Type":"Variant"}],"Name":"LocalPlayerArrivedFromTeleport","tags":[],"Class":"TeleportService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"teleportResult","Type":"TeleportResult"},{"Name":"errorMessage","Type":"string"}],"Name":"TeleportInitFailed","tags":[],"Class":"TeleportService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TerrainRegion","tags":[]},{"ValueType":"bool","type":"Property","Name":"IsSmooth","tags":["deprecated","readonly"],"Class":"TerrainRegion"},{"ValueType":"Vector3","type":"Property","Name":"SizeInCells","tags":["readonly"],"Class":"TerrainRegion"},{"ReturnType":"void","Arguments":[],"Name":"ConvertToSmooth","tags":["PluginSecurity","deprecated"],"Class":"TerrainRegion","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TestService","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoRuns","tags":[],"Class":"TestService"},{"ValueType":"string","type":"Property","Name":"Description","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"ErrorCount","tags":["readonly"],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"ExecuteWithStudioRun","tags":[],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"Is30FpsThrottleEnabled","tags":[],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"IsPhysicsEnvironmentalThrottled","tags":[],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"IsSleepAllowed","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"NumberOfPlayers","tags":[],"Class":"TestService"},{"ValueType":"double","type":"Property","Name":"SimulateSecondsLag","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"TestCount","tags":["readonly"],"Class":"TestService"},{"ValueType":"double","type":"Property","Name":"Timeout","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"WarnCount","tags":["readonly"],"Class":"TestService"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Check","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Checkpoint","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Done","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Error","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Fail","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Message","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Require","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Warn","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Run","tags":["PluginSecurity"],"Class":"TestService","type":"YieldFunction"},{"Arguments":[{"Name":"condition","Type":"bool"},{"Name":"text","Type":"string"},{"Name":"script","Type":"Instance"},{"Name":"line","Type":"int"}],"Name":"ServerCollectConditionalResult","tags":[],"Class":"TestService","type":"Event"},{"Arguments":[{"Name":"text","Type":"string"},{"Name":"script","Type":"Instance"},{"Name":"line","Type":"int"}],"Name":"ServerCollectResult","tags":[],"Class":"TestService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TextFilterResult","tags":["notCreatable"]},{"ReturnType":"string","Arguments":[{"Type":"int64","Name":"toUserId","Default":null}],"Name":"GetChatForUserAsync","tags":[],"Class":"TextFilterResult","type":"YieldFunction"},{"ReturnType":"string","Arguments":[],"Name":"GetNonChatStringForBroadcastAsync","tags":[],"Class":"TextFilterResult","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int64","Name":"toUserId","Default":null}],"Name":"GetNonChatStringForUserAsync","tags":[],"Class":"TextFilterResult","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"TextService","tags":[]},{"ReturnType":"Vector2","Arguments":[{"Type":"string","Name":"string","Default":null},{"Type":"int","Name":"fontSize","Default":null},{"Type":"Font","Name":"font","Default":null},{"Type":"Vector2","Name":"frameSize","Default":null}],"Name":"GetTextSize","tags":[],"Class":"TextService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"int64","Name":"fromUserId","Default":null},{"Type":"TextFilterContext","Name":"textContext","Default":"PrivateChat"}],"Name":"FilterStringAsync","tags":[],"Class":"TextService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"ThirdPartyUserService","tags":["notCreatable"]},{"ReturnType":"string","Arguments":[],"Name":"GetUserDisplayName","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetUserPlatformId","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"HaveActiveUser","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ReturnToEngagement","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ShowAccountPicker","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"UserInputType","Name":"gamepadId","Default":null}],"Name":"RegisterActiveUser","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"YieldFunction"},{"Arguments":[],"Name":"ActiveGamepadAdded","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Event"},{"Arguments":[],"Name":"ActiveGamepadRemoved","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Event"},{"Arguments":[{"Name":"signOutStatus","Type":"int"}],"Name":"ActiveUserSignedOut","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TimerService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"Toolbar","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"string","Name":"tooltip","Default":null},{"Type":"string","Name":"iconname","Default":null}],"Name":"CreateButton","tags":["PluginSecurity"],"Class":"Toolbar","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TouchInputService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"TouchTransmitter","tags":["notCreatable","notbrowsable"]},{"Superclass":"Instance","type":"Class","Name":"Trail","tags":[]},{"ValueType":"Class:Attachment","type":"Property","Name":"Attachment0","tags":[],"Class":"Trail"},{"ValueType":"Class:Attachment","type":"Property","Name":"Attachment1","tags":[],"Class":"Trail"},{"ValueType":"ColorSequence","type":"Property","Name":"Color","tags":[],"Class":"Trail"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Trail"},{"ValueType":"bool","type":"Property","Name":"FaceCamera","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"Lifetime","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"LightEmission","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"LightInfluence","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"MaxLength","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"MinLength","tags":[],"Class":"Trail"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"TextureLength","tags":[],"Class":"Trail"},{"ValueType":"TextureMode","type":"Property","Name":"TextureMode","tags":[],"Class":"Trail"},{"ValueType":"NumberSequence","type":"Property","Name":"Transparency","tags":[],"Class":"Trail"},{"ValueType":"NumberSequence","type":"Property","Name":"WidthScale","tags":[],"Class":"Trail"},{"ReturnType":"void","Arguments":[],"Name":"Clear","tags":[],"Class":"Trail","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Translator","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"LocaleId","tags":["readonly"],"Class":"Translator"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Variant","Name":"args","Default":null}],"Name":"FormatByKey","tags":[],"Class":"Translator","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"Instance","Name":"context","Default":null},{"Type":"string","Name":"text","Default":null}],"Name":"RobloxOnlyTranslate","tags":["RobloxScriptSecurity"],"Class":"Translator","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"Instance","Name":"context","Default":null},{"Type":"string","Name":"text","Default":null}],"Name":"Translate","tags":[],"Class":"Translator","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TweenBase","tags":["notbrowsable"]},{"ValueType":"PlaybackState","type":"Property","Name":"PlaybackState","tags":["readonly"],"Class":"TweenBase"},{"ReturnType":"void","Arguments":[],"Name":"Cancel","tags":[],"Class":"TweenBase","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Pause","tags":[],"Class":"TweenBase","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Play","tags":[],"Class":"TweenBase","type":"Function"},{"Arguments":[{"Name":"playbackState","Type":"PlaybackState"}],"Name":"Completed","tags":[],"Class":"TweenBase","type":"Event"},{"Superclass":"TweenBase","type":"Class","Name":"Tween","tags":[]},{"ValueType":"Class:Instance","type":"Property","Name":"Instance","tags":["readonly"],"Class":"Tween"},{"ValueType":"TweenInfo","type":"Property","Name":"TweenInfo","tags":["readonly"],"Class":"Tween"},{"Superclass":"Instance","type":"Class","Name":"TweenService","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"instance","Default":null},{"Type":"TweenInfo","Name":"tweenInfo","Default":null},{"Type":"Dictionary","Name":"propertyTable","Default":null}],"Name":"Create","tags":[],"Class":"TweenService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"UIBase","tags":[]},{"Superclass":"UIBase","type":"Class","Name":"UIComponent","tags":[]},{"Superclass":"UIComponent","type":"Class","Name":"UIConstraint","tags":[]},{"Superclass":"UIConstraint","type":"Class","Name":"UIAspectRatioConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"AspectRatio","tags":[],"Class":"UIAspectRatioConstraint"},{"ValueType":"AspectType","type":"Property","Name":"AspectType","tags":[],"Class":"UIAspectRatioConstraint"},{"ValueType":"DominantAxis","type":"Property","Name":"DominantAxis","tags":[],"Class":"UIAspectRatioConstraint"},{"Superclass":"UIConstraint","type":"Class","Name":"UISizeConstraint","tags":[]},{"ValueType":"Vector2","type":"Property","Name":"MaxSize","tags":[],"Class":"UISizeConstraint"},{"ValueType":"Vector2","type":"Property","Name":"MinSize","tags":[],"Class":"UISizeConstraint"},{"Superclass":"UIConstraint","type":"Class","Name":"UITextSizeConstraint","tags":[]},{"ValueType":"int","type":"Property","Name":"MaxTextSize","tags":[],"Class":"UITextSizeConstraint"},{"ValueType":"int","type":"Property","Name":"MinTextSize","tags":[],"Class":"UITextSizeConstraint"},{"Superclass":"UIComponent","type":"Class","Name":"UILayout","tags":[]},{"Superclass":"UILayout","type":"Class","Name":"UIGridStyleLayout","tags":["notbrowsable"]},{"ValueType":"Vector2","type":"Property","Name":"AbsoluteContentSize","tags":["readonly"],"Class":"UIGridStyleLayout"},{"ValueType":"FillDirection","type":"Property","Name":"FillDirection","tags":[],"Class":"UIGridStyleLayout"},{"ValueType":"HorizontalAlignment","type":"Property","Name":"HorizontalAlignment","tags":[],"Class":"UIGridStyleLayout"},{"ValueType":"SortOrder","type":"Property","Name":"SortOrder","tags":[],"Class":"UIGridStyleLayout"},{"ValueType":"VerticalAlignment","type":"Property","Name":"VerticalAlignment","tags":[],"Class":"UIGridStyleLayout"},{"ReturnType":"void","Arguments":[],"Name":"ApplyLayout","tags":[],"Class":"UIGridStyleLayout","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Function","Name":"function","Default":"nil"}],"Name":"SetCustomSortFunction","tags":["deprecated"],"Class":"UIGridStyleLayout","type":"Function"},{"Superclass":"UIGridStyleLayout","type":"Class","Name":"UIGridLayout","tags":[]},{"ValueType":"UDim2","type":"Property","Name":"CellPadding","tags":[],"Class":"UIGridLayout"},{"ValueType":"UDim2","type":"Property","Name":"CellSize","tags":[],"Class":"UIGridLayout"},{"ValueType":"int","type":"Property","Name":"FillDirectionMaxCells","tags":[],"Class":"UIGridLayout"},{"ValueType":"StartCorner","type":"Property","Name":"StartCorner","tags":[],"Class":"UIGridLayout"},{"Superclass":"UIGridStyleLayout","type":"Class","Name":"UIListLayout","tags":[]},{"ValueType":"UDim","type":"Property","Name":"Padding","tags":[],"Class":"UIListLayout"},{"Superclass":"UIGridStyleLayout","type":"Class","Name":"UIPageLayout","tags":[]},{"ValueType":"bool","type":"Property","Name":"Animated","tags":[],"Class":"UIPageLayout"},{"ValueType":"bool","type":"Property","Name":"Circular","tags":[],"Class":"UIPageLayout"},{"ValueType":"Class:GuiObject","type":"Property","Name":"CurrentPage","tags":["readonly"],"Class":"UIPageLayout"},{"ValueType":"EasingDirection","type":"Property","Name":"EasingDirection","tags":[],"Class":"UIPageLayout"},{"ValueType":"EasingStyle","type":"Property","Name":"EasingStyle","tags":[],"Class":"UIPageLayout"},{"ValueType":"bool","type":"Property","Name":"GamepadInputEnabled","tags":[],"Class":"UIPageLayout"},{"ValueType":"UDim","type":"Property","Name":"Padding","tags":[],"Class":"UIPageLayout"},{"ValueType":"bool","type":"Property","Name":"ScrollWheelInputEnabled","tags":[],"Class":"UIPageLayout"},{"ValueType":"bool","type":"Property","Name":"TouchInputEnabled","tags":[],"Class":"UIPageLayout"},{"ValueType":"float","type":"Property","Name":"TweenTime","tags":[],"Class":"UIPageLayout"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"page","Default":null}],"Name":"JumpTo","tags":[],"Class":"UIPageLayout","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"index","Default":null}],"Name":"JumpToIndex","tags":[],"Class":"UIPageLayout","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Next","tags":[],"Class":"UIPageLayout","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Previous","tags":[],"Class":"UIPageLayout","type":"Function"},{"Arguments":[{"Name":"page","Type":"Instance"}],"Name":"PageEnter","tags":[],"Class":"UIPageLayout","type":"Event"},{"Arguments":[{"Name":"page","Type":"Instance"}],"Name":"PageLeave","tags":[],"Class":"UIPageLayout","type":"Event"},{"Arguments":[{"Name":"currentPage","Type":"Instance"}],"Name":"Stopped","tags":[],"Class":"UIPageLayout","type":"Event"},{"Superclass":"UIGridStyleLayout","type":"Class","Name":"UITableLayout","tags":[]},{"ValueType":"bool","type":"Property","Name":"FillEmptySpaceColumns","tags":[],"Class":"UITableLayout"},{"ValueType":"bool","type":"Property","Name":"FillEmptySpaceRows","tags":[],"Class":"UITableLayout"},{"ValueType":"TableMajorAxis","type":"Property","Name":"MajorAxis","tags":[],"Class":"UITableLayout"},{"ValueType":"UDim2","type":"Property","Name":"Padding","tags":[],"Class":"UITableLayout"},{"Superclass":"UIComponent","type":"Class","Name":"UIPadding","tags":[]},{"ValueType":"UDim","type":"Property","Name":"PaddingBottom","tags":[],"Class":"UIPadding"},{"ValueType":"UDim","type":"Property","Name":"PaddingLeft","tags":[],"Class":"UIPadding"},{"ValueType":"UDim","type":"Property","Name":"PaddingRight","tags":[],"Class":"UIPadding"},{"ValueType":"UDim","type":"Property","Name":"PaddingTop","tags":[],"Class":"UIPadding"},{"Superclass":"UIComponent","type":"Class","Name":"UIScale","tags":[]},{"ValueType":"float","type":"Property","Name":"Scale","tags":[],"Class":"UIScale"},{"Superclass":"Instance","type":"Class","Name":"UserGameSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllTutorialsDisabled","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"CustomCameraMode","type":"Property","Name":"CameraMode","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"CameraYInverted","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"ChatVisible","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"ComputerCameraMovementMode","type":"Property","Name":"ComputerCameraMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"ComputerMovementMode","type":"Property","Name":"ComputerMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"ControlMode","type":"Property","Name":"ControlMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"Fullscreen","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"float","type":"Property","Name":"GamepadCameraSensitivity","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"HasEverUsedVR","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"IsUsingCameraYInverted","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"IsUsingGamepadCameraSensitivity","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"UserGameSettings"},{"ValueType":"float","type":"Property","Name":"MasterVolume","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"MicroProfilerWebServerEnabled","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"string","type":"Property","Name":"MicroProfilerWebServerIP","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"UserGameSettings"},{"ValueType":"int","type":"Property","Name":"MicroProfilerWebServerPort","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"UserGameSettings"},{"ValueType":"float","type":"Property","Name":"MouseSensitivity","tags":[],"Class":"UserGameSettings"},{"ValueType":"Vector2","type":"Property","Name":"MouseSensitivityFirstPerson","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"Vector2","type":"Property","Name":"MouseSensitivityThirdPerson","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"OnScreenProfilerEnabled","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"string","type":"Property","Name":"OnboardingsCompleted","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"PerformanceStatsVisible","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"RotationType","type":"Property","Name":"RotationType","tags":[],"Class":"UserGameSettings"},{"ValueType":"SavedQualitySetting","type":"Property","Name":"SavedQualityLevel","tags":[],"Class":"UserGameSettings"},{"ValueType":"TouchCameraMovementMode","type":"Property","Name":"TouchCameraMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"TouchMovementMode","type":"Property","Name":"TouchMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"UsedCoreGuiIsVisibleToggle","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"UsedCustomGuiIsVisibleToggle","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"UsedHideHudShortcut","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"VREnabled","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"int","type":"Property","Name":"VRRotationIntensity","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ReturnType":"int","Arguments":[],"Name":"GetCameraYInvertValue","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"onboardingId","Default":null}],"Name":"GetOnboardingCompleted","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"tutorialId","Default":null}],"Name":"GetTutorialState","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"InFullScreen","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"InStudioMode","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"onboardingId","Default":null}],"Name":"ResetOnboardingCompleted","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetCameraYInvertVisible","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetGamepadCameraSensitivityVisible","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"onboardingId","Default":null}],"Name":"SetOnboardingCompleted","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"tutorialId","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"SetTutorialState","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Function"},{"Arguments":[{"Name":"isFullscreen","Type":"bool"}],"Name":"FullscreenChanged","tags":[],"Class":"UserGameSettings","type":"Event"},{"Arguments":[{"Name":"isPerformanceStatsVisible","Type":"bool"}],"Name":"PerformanceStatsVisibleChanged","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Event"},{"Arguments":[{"Name":"isStudioMode","Type":"bool"}],"Name":"StudioModeChanged","tags":[],"Class":"UserGameSettings","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"UserInputService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AccelerometerEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"BottomBarSize","tags":["RobloxScriptSecurity","readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"GamepadEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"GazeSelectionEnabled","tags":["RobloxScriptSecurity","hidden"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"GyroscopeEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"KeyboardEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"LegacyInputEventsEnabled","tags":["RobloxScriptSecurity"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"ModalEnabled","tags":[],"Class":"UserInputService"},{"ValueType":"MouseBehavior","type":"Property","Name":"MouseBehavior","tags":[],"Class":"UserInputService"},{"ValueType":"float","type":"Property","Name":"MouseDeltaSensitivity","tags":[],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"MouseEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"MouseIconEnabled","tags":[],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"NavBarSize","tags":["RobloxScriptSecurity","readonly"],"Class":"UserInputService"},{"ValueType":"double","type":"Property","Name":"OnScreenKeyboardAnimationDuration","tags":["RobloxScriptSecurity","readonly"],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"OnScreenKeyboardPosition","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"OnScreenKeyboardSize","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"OnScreenKeyboardVisible","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"OverrideMouseIconBehavior","type":"Property","Name":"OverrideMouseIconBehavior","tags":["RobloxScriptSecurity"],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"StatusBarSize","tags":["RobloxScriptSecurity","readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"TouchEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"CoordinateFrame","type":"Property","Name":"UserHeadCFrame","tags":["deprecated","readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"VREnabled","tags":["readonly"],"Class":"UserInputService"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null},{"Type":"KeyCode","Name":"gamepadKeyCode","Default":null}],"Name":"GamepadSupports","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetConnectedGamepads","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeviceAcceleration","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeviceGravity","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetDeviceRotation","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetFocusedTextBox","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetGamepadConnected","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetGamepadState","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetKeysPressed","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"UserInputType","Arguments":[],"Name":"GetLastInputType","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetMouseButtonsPressed","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Vector2","Arguments":[],"Name":"GetMouseDelta","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Vector2","Arguments":[],"Name":"GetMouseLocation","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetNavigationGamepads","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Platform","Arguments":[],"Name":"GetPlatform","tags":["RobloxScriptSecurity"],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetSupportedGamepadKeyCodes","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[{"Type":"UserCFrame","Name":"type","Default":null}],"Name":"GetUserCFrame","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null},{"Type":"KeyCode","Name":"gamepadKeyCode","Default":null}],"Name":"IsGamepadButtonDown","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"KeyCode","Name":"keyCode","Default":null}],"Name":"IsKeyDown","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"mouseButton","Default":null}],"Name":"IsMouseButtonPressed","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadEnum","Default":null}],"Name":"IsNavigationGamepad","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RecenterUserHeadCFrame","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"statusBarSize","Default":null},{"Type":"Vector2","Name":"navBarSize","Default":null},{"Type":"Vector2","Name":"bottomBarSize","Default":null}],"Name":"SendAppUISizes","tags":["RobloxScriptSecurity"],"Class":"UserInputService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"gamepadEnum","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetNavigationGamepad","tags":[],"Class":"UserInputService","type":"Function"},{"Arguments":[{"Name":"acceleration","Type":"Instance"}],"Name":"DeviceAccelerationChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gravity","Type":"Instance"}],"Name":"DeviceGravityChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"rotation","Type":"Instance"},{"Name":"cframe","Type":"CoordinateFrame"}],"Name":"DeviceRotationChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gamepadNum","Type":"UserInputType"}],"Name":"GamepadConnected","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gamepadNum","Type":"UserInputType"}],"Name":"GamepadDisconnected","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputBegan","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputEnded","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"JumpRequest","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"lastInputType","Type":"UserInputType"}],"Name":"LastInputTypeChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"position","Type":"Vector2"}],"Name":"StatusBarTapped","tags":["RobloxScriptSecurity"],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"textboxReleased","Type":"Instance"}],"Name":"TextBoxFocusReleased","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"textboxFocused","Type":"Instance"}],"Name":"TextBoxFocused","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchEnded","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchLongPress","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchMoved","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"totalTranslation","Type":"Vector2"},{"Name":"velocity","Type":"Vector2"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchPan","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"scale","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchPinch","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"rotation","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchRotate","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchStarted","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"swipeDirection","Type":"SwipeDirection"},{"Name":"numberOfTouches","Type":"int"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchSwipe","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchTap","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"position","Type":"Vector2"},{"Name":"processedByUI","Type":"bool"}],"Name":"TouchTapInWorld","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"type","Type":"UserCFrame"},{"Name":"value","Type":"CoordinateFrame"}],"Name":"UserCFrameChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"WindowFocusReleased","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"WindowFocused","tags":[],"Class":"UserInputService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"VRService","tags":[]},{"ValueType":"UserCFrame","type":"Property","Name":"GuiInputUserCFrame","tags":[],"Class":"VRService"},{"ValueType":"string","type":"Property","Name":"VRDeviceName","tags":["RobloxScriptSecurity","readonly"],"Class":"VRService"},{"ValueType":"bool","type":"Property","Name":"VREnabled","tags":["readonly"],"Class":"VRService"},{"ReturnType":"VRTouchpadMode","Arguments":[{"Type":"VRTouchpad","Name":"pad","Default":null}],"Name":"GetTouchpadMode","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[{"Type":"UserCFrame","Name":"type","Default":null}],"Name":"GetUserCFrame","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserCFrame","Name":"type","Default":null}],"Name":"GetUserCFrameEnabled","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RecenterUserHeadCFrame","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"cframe","Default":null},{"Type":"UserCFrame","Name":"inputUserCFrame","Default":null}],"Name":"RequestNavigation","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"VRTouchpad","Name":"pad","Default":null},{"Type":"VRTouchpadMode","Name":"mode","Default":null}],"Name":"SetTouchpadMode","tags":[],"Class":"VRService","type":"Function"},{"Arguments":[{"Name":"cframe","Type":"CoordinateFrame"},{"Name":"inputUserCFrame","Type":"UserCFrame"}],"Name":"NavigationRequested","tags":[],"Class":"VRService","type":"Event"},{"Arguments":[{"Name":"pad","Type":"VRTouchpad"},{"Name":"mode","Type":"VRTouchpadMode"}],"Name":"TouchpadModeChanged","tags":[],"Class":"VRService","type":"Event"},{"Arguments":[{"Name":"type","Type":"UserCFrame"},{"Name":"value","Type":"CoordinateFrame"}],"Name":"UserCFrameChanged","tags":[],"Class":"VRService","type":"Event"},{"Arguments":[{"Name":"type","Type":"UserCFrame"},{"Name":"enabled","Type":"bool"}],"Name":"UserCFrameEnabled","tags":[],"Class":"VRService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ValueBase","tags":[]},{"Superclass":"ValueBase","type":"Class","Name":"BinaryStringValue","tags":[]},{"Arguments":[{"Name":"value","Type":"BinaryString"}],"Name":"Changed","tags":[],"Class":"BinaryStringValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"BoolValue","tags":[]},{"ValueType":"bool","type":"Property","Name":"Value","tags":[],"Class":"BoolValue"},{"Arguments":[{"Name":"value","Type":"bool"}],"Name":"Changed","tags":[],"Class":"BoolValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"bool"}],"Name":"changed","tags":["deprecated"],"Class":"BoolValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"BrickColorValue","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"Value","tags":[],"Class":"BrickColorValue"},{"Arguments":[{"Name":"value","Type":"BrickColor"}],"Name":"Changed","tags":[],"Class":"BrickColorValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"BrickColor"}],"Name":"changed","tags":["deprecated"],"Class":"BrickColorValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"CFrameValue","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"Value","tags":[],"Class":"CFrameValue"},{"Arguments":[{"Name":"value","Type":"CoordinateFrame"}],"Name":"Changed","tags":[],"Class":"CFrameValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"CoordinateFrame"}],"Name":"changed","tags":["deprecated"],"Class":"CFrameValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"Color3Value","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Value","tags":[],"Class":"Color3Value"},{"Arguments":[{"Name":"value","Type":"Color3"}],"Name":"Changed","tags":[],"Class":"Color3Value","type":"Event"},{"Arguments":[{"Name":"value","Type":"Color3"}],"Name":"changed","tags":["deprecated"],"Class":"Color3Value","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"DoubleConstrainedValue","tags":["deprecated"]},{"ValueType":"double","type":"Property","Name":"ConstrainedValue","tags":["hidden"],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"MaxValue","tags":[],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"MinValue","tags":[],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"Value","tags":[],"Class":"DoubleConstrainedValue"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"Changed","tags":[],"Class":"DoubleConstrainedValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"changed","tags":["deprecated"],"Class":"DoubleConstrainedValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"IntConstrainedValue","tags":["deprecated"]},{"ValueType":"int64","type":"Property","Name":"ConstrainedValue","tags":["hidden"],"Class":"IntConstrainedValue"},{"ValueType":"int64","type":"Property","Name":"MaxValue","tags":[],"Class":"IntConstrainedValue"},{"ValueType":"int64","type":"Property","Name":"MinValue","tags":[],"Class":"IntConstrainedValue"},{"ValueType":"int64","type":"Property","Name":"Value","tags":[],"Class":"IntConstrainedValue"},{"Arguments":[{"Name":"value","Type":"int64"}],"Name":"Changed","tags":[],"Class":"IntConstrainedValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"int64"}],"Name":"changed","tags":["deprecated"],"Class":"IntConstrainedValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"IntValue","tags":[]},{"ValueType":"int64","type":"Property","Name":"Value","tags":[],"Class":"IntValue"},{"Arguments":[{"Name":"value","Type":"int64"}],"Name":"Changed","tags":[],"Class":"IntValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"int64"}],"Name":"changed","tags":["deprecated"],"Class":"IntValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"NumberValue","tags":[]},{"ValueType":"double","type":"Property","Name":"Value","tags":[],"Class":"NumberValue"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"Changed","tags":[],"Class":"NumberValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"changed","tags":["deprecated"],"Class":"NumberValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"ObjectValue","tags":[]},{"ValueType":"Class:Instance","type":"Property","Name":"Value","tags":[],"Class":"ObjectValue"},{"Arguments":[{"Name":"value","Type":"Instance"}],"Name":"Changed","tags":[],"Class":"ObjectValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"Instance"}],"Name":"changed","tags":["deprecated"],"Class":"ObjectValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"RayValue","tags":[]},{"ValueType":"Ray","type":"Property","Name":"Value","tags":[],"Class":"RayValue"},{"Arguments":[{"Name":"value","Type":"Ray"}],"Name":"Changed","tags":[],"Class":"RayValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"Ray"}],"Name":"changed","tags":["deprecated"],"Class":"RayValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"StringValue","tags":[]},{"ValueType":"string","type":"Property","Name":"Value","tags":[],"Class":"StringValue"},{"Arguments":[{"Name":"value","Type":"string"}],"Name":"Changed","tags":[],"Class":"StringValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"string"}],"Name":"changed","tags":["deprecated"],"Class":"StringValue","type":"Event"},{"Superclass":"ValueBase","type":"Class","Name":"Vector3Value","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Value","tags":[],"Class":"Vector3Value"},{"Arguments":[{"Name":"value","Type":"Vector3"}],"Name":"Changed","tags":[],"Class":"Vector3Value","type":"Event"},{"Arguments":[{"Name":"value","Type":"Vector3"}],"Name":"changed","tags":["deprecated"],"Class":"Vector3Value","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"VirtualInputManager","tags":[]},{"ValueType":"string","type":"Property","Name":"AdditionalLuaState","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager"},{"ReturnType":"void","Arguments":[],"Name":"Dump","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"objectId","Default":null},{"Type":"KeyCode","Name":"keyCode","Default":null},{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"z","Default":null}],"Name":"HandleGamepadAxisInput","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"deviceId","Default":null},{"Type":"KeyCode","Name":"keyCode","Default":null},{"Type":"int","Name":"buttonState","Default":null}],"Name":"HandleGamepadButtonInput","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"deviceId","Default":null}],"Name":"HandleGamepadConnect","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"deviceId","Default":null}],"Name":"HandleGamepadDisconnect","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"z","Default":null}],"Name":"SendAccelerometerEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"z","Default":null}],"Name":"SendGravityEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"quatX","Default":null},{"Type":"float","Name":"quatY","Default":null},{"Type":"float","Name":"quatZ","Default":null},{"Type":"float","Name":"quatW","Default":null}],"Name":"SendGyroscopeEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"isPressed","Default":null},{"Type":"KeyCode","Name":"keyCode","Default":null},{"Type":"bool","Name":"isRepeatedKey","Default":null},{"Type":"Instance","Name":"pluginGui","Default":null}],"Name":"SendKeyEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"mouseButton","Default":null},{"Type":"bool","Name":"isDown","Default":null},{"Type":"Instance","Name":"pluginGui","Default":null}],"Name":"SendMouseButtonEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"Instance","Name":"pluginGui","Default":null}],"Name":"SendMouseMoveEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"bool","Name":"isForwardScroll","Default":null},{"Type":"Instance","Name":"pluginGui","Default":null}],"Name":"SendMouseWheelEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"str","Default":null},{"Type":"Instance","Name":"pluginGui","Default":null}],"Name":"SendTextInputCharacterEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int64","Name":"touchId","Default":null},{"Type":"int","Name":"state","Default":null},{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null}],"Name":"SendTouchEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"fileName","Default":null}],"Name":"StartPlaying","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StartRecording","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StopRecording","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"namespace","Default":null},{"Type":"string","Name":"detail","Default":null},{"Type":"string","Name":"detailType","Default":null}],"Name":"sendRobloxEvent","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Function"},{"Arguments":[{"Name":"additionalLuaState","Type":"string"}],"Name":"PlaybackCompleted","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Event"},{"Arguments":[{"Name":"result","Type":"string"}],"Name":"RecordingCompleted","tags":["RobloxScriptSecurity"],"Class":"VirtualInputManager","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"VirtualUser","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button1Down","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button1Up","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button2Down","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button2Up","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"CaptureController","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"ClickButton1","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"ClickButton2","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"MoveMouse","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"SetKeyDown","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"SetKeyUp","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StartRecording","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"StopRecording","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"TypeKey","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Visit","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"WeldConstraint","tags":[]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"WeldConstraint"},{"ValueType":"Class:BasePart","type":"Property","Name":"Part0","tags":[],"Class":"WeldConstraint"},{"ValueType":"Class:BasePart","type":"Property","Name":"Part1","tags":[],"Class":"WeldConstraint"},{"type":"Enum","Name":"ActionType","tags":[]},{"type":"EnumItem","Name":"Nothing","tags":[],"Value":0,"Enum":"ActionType"},{"type":"EnumItem","Name":"Pause","tags":[],"Value":1,"Enum":"ActionType"},{"type":"EnumItem","Name":"Lose","tags":[],"Value":2,"Enum":"ActionType"},{"type":"EnumItem","Name":"Draw","tags":[],"Value":3,"Enum":"ActionType"},{"type":"EnumItem","Name":"Win","tags":[],"Value":4,"Enum":"ActionType"},{"type":"Enum","Name":"ActuatorRelativeTo","tags":[]},{"type":"EnumItem","Name":"Attachment0","tags":[],"Value":0,"Enum":"ActuatorRelativeTo"},{"type":"EnumItem","Name":"Attachment1","tags":[],"Value":1,"Enum":"ActuatorRelativeTo"},{"type":"EnumItem","Name":"World","tags":[],"Value":2,"Enum":"ActuatorRelativeTo"},{"type":"Enum","Name":"ActuatorType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"ActuatorType"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":1,"Enum":"ActuatorType"},{"type":"EnumItem","Name":"Servo","tags":[],"Value":2,"Enum":"ActuatorType"},{"type":"Enum","Name":"AnimationPriority","tags":[]},{"type":"EnumItem","Name":"Idle","tags":[],"Value":0,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Movement","tags":[],"Value":1,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Action","tags":[],"Value":2,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Core","tags":[],"Value":1000,"Enum":"AnimationPriority"},{"type":"Enum","Name":"AppShellActionType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"OpenApp","tags":[],"Value":1,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"TapChatTab","tags":[],"Value":2,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"TapConversationEntry","tags":[],"Value":3,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"TapAvatarTab","tags":[],"Value":4,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"ReadConversation","tags":[],"Value":5,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"TapGamePageTab","tags":[],"Value":6,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"TapHomePageTab","tags":[],"Value":7,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"GamePageLoaded","tags":[],"Value":8,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"HomePageLoaded","tags":[],"Value":9,"Enum":"AppShellActionType"},{"type":"EnumItem","Name":"AvatarEditorPageLoaded","tags":[],"Value":10,"Enum":"AppShellActionType"},{"type":"Enum","Name":"AspectType","tags":[]},{"type":"EnumItem","Name":"FitWithinMaxSize","tags":[],"Value":0,"Enum":"AspectType"},{"type":"EnumItem","Name":"ScaleWithParentSize","tags":[],"Value":1,"Enum":"AspectType"},{"type":"Enum","Name":"AssetType","tags":[]},{"type":"EnumItem","Name":"Image","tags":[],"Value":1,"Enum":"AssetType"},{"type":"EnumItem","Name":"TeeShirt","tags":[],"Value":2,"Enum":"AssetType"},{"type":"EnumItem","Name":"Audio","tags":[],"Value":3,"Enum":"AssetType"},{"type":"EnumItem","Name":"Mesh","tags":[],"Value":4,"Enum":"AssetType"},{"type":"EnumItem","Name":"Lua","tags":[],"Value":5,"Enum":"AssetType"},{"type":"EnumItem","Name":"Hat","tags":[],"Value":8,"Enum":"AssetType"},{"type":"EnumItem","Name":"Place","tags":[],"Value":9,"Enum":"AssetType"},{"type":"EnumItem","Name":"Model","tags":[],"Value":10,"Enum":"AssetType"},{"type":"EnumItem","Name":"Shirt","tags":[],"Value":11,"Enum":"AssetType"},{"type":"EnumItem","Name":"Pants","tags":[],"Value":12,"Enum":"AssetType"},{"type":"EnumItem","Name":"Decal","tags":[],"Value":13,"Enum":"AssetType"},{"type":"EnumItem","Name":"Head","tags":[],"Value":17,"Enum":"AssetType"},{"type":"EnumItem","Name":"Face","tags":[],"Value":18,"Enum":"AssetType"},{"type":"EnumItem","Name":"Gear","tags":[],"Value":19,"Enum":"AssetType"},{"type":"EnumItem","Name":"Badge","tags":[],"Value":21,"Enum":"AssetType"},{"type":"EnumItem","Name":"Animation","tags":[],"Value":24,"Enum":"AssetType"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":27,"Enum":"AssetType"},{"type":"EnumItem","Name":"RightArm","tags":[],"Value":28,"Enum":"AssetType"},{"type":"EnumItem","Name":"LeftArm","tags":[],"Value":29,"Enum":"AssetType"},{"type":"EnumItem","Name":"LeftLeg","tags":[],"Value":30,"Enum":"AssetType"},{"type":"EnumItem","Name":"RightLeg","tags":[],"Value":31,"Enum":"AssetType"},{"type":"EnumItem","Name":"Package","tags":[],"Value":32,"Enum":"AssetType"},{"type":"EnumItem","Name":"GamePass","tags":[],"Value":34,"Enum":"AssetType"},{"type":"EnumItem","Name":"Plugin","tags":[],"Value":38,"Enum":"AssetType"},{"type":"EnumItem","Name":"MeshPart","tags":[],"Value":40,"Enum":"AssetType"},{"type":"EnumItem","Name":"HairAccessory","tags":[],"Value":41,"Enum":"AssetType"},{"type":"EnumItem","Name":"FaceAccessory","tags":[],"Value":42,"Enum":"AssetType"},{"type":"EnumItem","Name":"NeckAccessory","tags":[],"Value":43,"Enum":"AssetType"},{"type":"EnumItem","Name":"ShoulderAccessory","tags":[],"Value":44,"Enum":"AssetType"},{"type":"EnumItem","Name":"FrontAccessory","tags":[],"Value":45,"Enum":"AssetType"},{"type":"EnumItem","Name":"BackAccessory","tags":[],"Value":46,"Enum":"AssetType"},{"type":"EnumItem","Name":"WaistAccessory","tags":[],"Value":47,"Enum":"AssetType"},{"type":"EnumItem","Name":"ClimbAnimation","tags":[],"Value":48,"Enum":"AssetType"},{"type":"EnumItem","Name":"DeathAnimation","tags":[],"Value":49,"Enum":"AssetType"},{"type":"EnumItem","Name":"FallAnimation","tags":[],"Value":50,"Enum":"AssetType"},{"type":"EnumItem","Name":"IdleAnimation","tags":[],"Value":51,"Enum":"AssetType"},{"type":"EnumItem","Name":"JumpAnimation","tags":[],"Value":52,"Enum":"AssetType"},{"type":"EnumItem","Name":"RunAnimation","tags":[],"Value":53,"Enum":"AssetType"},{"type":"EnumItem","Name":"SwimAnimation","tags":[],"Value":54,"Enum":"AssetType"},{"type":"EnumItem","Name":"WalkAnimation","tags":[],"Value":55,"Enum":"AssetType"},{"type":"EnumItem","Name":"PoseAnimation","tags":[],"Value":56,"Enum":"AssetType"},{"type":"EnumItem","Name":"EarAccessory","tags":[],"Value":57,"Enum":"AssetType"},{"type":"EnumItem","Name":"EyeAccessory","tags":[],"Value":58,"Enum":"AssetType"},{"type":"Enum","Name":"AutoJointsMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"AutoJointsMode"},{"type":"EnumItem","Name":"Explicit","tags":[],"Value":1,"Enum":"AutoJointsMode"},{"type":"EnumItem","Name":"LegacyImplicit","tags":[],"Value":2,"Enum":"AutoJointsMode"},{"type":"Enum","Name":"AvatarContextMenuOption","tags":[]},{"type":"EnumItem","Name":"Friend","tags":[],"Value":0,"Enum":"AvatarContextMenuOption"},{"type":"EnumItem","Name":"Chat","tags":[],"Value":1,"Enum":"AvatarContextMenuOption"},{"type":"EnumItem","Name":"Emote","tags":[],"Value":2,"Enum":"AvatarContextMenuOption"},{"type":"Enum","Name":"AvatarJointPositionType","tags":[]},{"type":"EnumItem","Name":"Fixed","tags":[],"Value":0,"Enum":"AvatarJointPositionType"},{"type":"EnumItem","Name":"ArtistIntent","tags":[],"Value":1,"Enum":"AvatarJointPositionType"},{"type":"Enum","Name":"Axis","tags":[]},{"type":"EnumItem","Name":"X","tags":[],"Value":0,"Enum":"Axis"},{"type":"EnumItem","Name":"Y","tags":[],"Value":1,"Enum":"Axis"},{"type":"EnumItem","Name":"Z","tags":[],"Value":2,"Enum":"Axis"},{"type":"Enum","Name":"BinType","tags":[]},{"type":"EnumItem","Name":"Script","tags":[],"Value":0,"Enum":"BinType"},{"type":"EnumItem","Name":"GameTool","tags":[],"Value":1,"Enum":"BinType"},{"type":"EnumItem","Name":"Grab","tags":[],"Value":2,"Enum":"BinType"},{"type":"EnumItem","Name":"Clone","tags":[],"Value":3,"Enum":"BinType"},{"type":"EnumItem","Name":"Hammer","tags":[],"Value":4,"Enum":"BinType"},{"type":"Enum","Name":"BodyPart","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"BodyPart"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":1,"Enum":"BodyPart"},{"type":"EnumItem","Name":"LeftArm","tags":[],"Value":2,"Enum":"BodyPart"},{"type":"EnumItem","Name":"RightArm","tags":[],"Value":3,"Enum":"BodyPart"},{"type":"EnumItem","Name":"LeftLeg","tags":[],"Value":4,"Enum":"BodyPart"},{"type":"EnumItem","Name":"RightLeg","tags":[],"Value":5,"Enum":"BodyPart"},{"type":"Enum","Name":"BodyPartR15","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"UpperTorso","tags":[],"Value":1,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"LowerTorso","tags":[],"Value":2,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"LeftFoot","tags":[],"Value":3,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"LeftLowerLeg","tags":[],"Value":4,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"LeftUpperLeg","tags":[],"Value":5,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"RightFoot","tags":[],"Value":6,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"RightLowerLeg","tags":[],"Value":7,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"RightUpperLeg","tags":[],"Value":8,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"LeftHand","tags":[],"Value":9,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"LeftLowerArm","tags":[],"Value":10,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"LeftUpperArm","tags":[],"Value":11,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"RightHand","tags":[],"Value":12,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"RightLowerArm","tags":[],"Value":13,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"RightUpperArm","tags":[],"Value":14,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"RootPart","tags":[],"Value":15,"Enum":"BodyPartR15"},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":17,"Enum":"BodyPartR15"},{"type":"Enum","Name":"Button","tags":[]},{"type":"EnumItem","Name":"Jump","tags":[],"Value":32,"Enum":"Button"},{"type":"EnumItem","Name":"Dismount","tags":[],"Value":8,"Enum":"Button"},{"type":"Enum","Name":"ButtonStyle","tags":[]},{"type":"EnumItem","Name":"Custom","tags":[],"Value":0,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxButtonDefault","tags":[],"Value":1,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxButton","tags":[],"Value":2,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundButton","tags":[],"Value":3,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundDefaultButton","tags":[],"Value":4,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundDropdownButton","tags":[],"Value":5,"Enum":"ButtonStyle"},{"type":"Enum","Name":"CameraMode","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"CameraMode"},{"type":"EnumItem","Name":"LockFirstPerson","tags":[],"Value":1,"Enum":"CameraMode"},{"type":"Enum","Name":"CameraPanMode","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"CameraPanMode"},{"type":"EnumItem","Name":"EdgeBump","tags":[],"Value":1,"Enum":"CameraPanMode"},{"type":"Enum","Name":"CameraType","tags":[]},{"type":"EnumItem","Name":"Fixed","tags":[],"Value":0,"Enum":"CameraType"},{"type":"EnumItem","Name":"Watch","tags":[],"Value":2,"Enum":"CameraType"},{"type":"EnumItem","Name":"Attach","tags":[],"Value":1,"Enum":"CameraType"},{"type":"EnumItem","Name":"Track","tags":[],"Value":3,"Enum":"CameraType"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":4,"Enum":"CameraType"},{"type":"EnumItem","Name":"Custom","tags":[],"Value":5,"Enum":"CameraType"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":6,"Enum":"CameraType"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":7,"Enum":"CameraType"},{"type":"Enum","Name":"CellBlock","tags":[]},{"type":"EnumItem","Name":"Solid","tags":[],"Value":0,"Enum":"CellBlock"},{"type":"EnumItem","Name":"VerticalWedge","tags":[],"Value":1,"Enum":"CellBlock"},{"type":"EnumItem","Name":"CornerWedge","tags":[],"Value":2,"Enum":"CellBlock"},{"type":"EnumItem","Name":"InverseCornerWedge","tags":[],"Value":3,"Enum":"CellBlock"},{"type":"EnumItem","Name":"HorizontalWedge","tags":[],"Value":4,"Enum":"CellBlock"},{"type":"Enum","Name":"CellMaterial","tags":[]},{"type":"EnumItem","Name":"Empty","tags":[],"Value":0,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Grass","tags":[],"Value":1,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Sand","tags":[],"Value":2,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":3,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Granite","tags":[],"Value":4,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Asphalt","tags":[],"Value":5,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Iron","tags":[],"Value":6,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Aluminum","tags":[],"Value":7,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Gold","tags":[],"Value":8,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"WoodPlank","tags":[],"Value":9,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"WoodLog","tags":[],"Value":10,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Gravel","tags":[],"Value":11,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"CinderBlock","tags":[],"Value":12,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"MossyStone","tags":[],"Value":13,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Cement","tags":[],"Value":14,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"RedPlastic","tags":[],"Value":15,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"BluePlastic","tags":[],"Value":16,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Water","tags":[],"Value":17,"Enum":"CellMaterial"},{"type":"Enum","Name":"CellOrientation","tags":[]},{"type":"EnumItem","Name":"NegZ","tags":[],"Value":0,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"X","tags":[],"Value":1,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"Z","tags":[],"Value":2,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"NegX","tags":[],"Value":3,"Enum":"CellOrientation"},{"type":"Enum","Name":"CenterDialogType","tags":[]},{"type":"EnumItem","Name":"UnsolicitedDialog","tags":[],"Value":1,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"PlayerInitiatedDialog","tags":[],"Value":2,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"ModalDialog","tags":[],"Value":3,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"QuitDialog","tags":[],"Value":4,"Enum":"CenterDialogType"},{"type":"Enum","Name":"ChatCallbackType","tags":[]},{"type":"EnumItem","Name":"OnCreatingChatWindow","tags":[],"Value":1,"Enum":"ChatCallbackType"},{"type":"EnumItem","Name":"OnClientSendingMessage","tags":[],"Value":2,"Enum":"ChatCallbackType"},{"type":"EnumItem","Name":"OnClientFormattingMessage","tags":[],"Value":3,"Enum":"ChatCallbackType"},{"type":"EnumItem","Name":"OnServerReceivingMessage","tags":[],"Value":17,"Enum":"ChatCallbackType"},{"type":"Enum","Name":"ChatColor","tags":[]},{"type":"EnumItem","Name":"Blue","tags":[],"Value":0,"Enum":"ChatColor"},{"type":"EnumItem","Name":"Green","tags":[],"Value":1,"Enum":"ChatColor"},{"type":"EnumItem","Name":"Red","tags":[],"Value":2,"Enum":"ChatColor"},{"type":"EnumItem","Name":"White","tags":[],"Value":3,"Enum":"ChatColor"},{"type":"Enum","Name":"ChatMode","tags":[]},{"type":"EnumItem","Name":"Menu","tags":[],"Value":0,"Enum":"ChatMode"},{"type":"EnumItem","Name":"TextAndMenu","tags":[],"Value":1,"Enum":"ChatMode"},{"type":"Enum","Name":"ChatPrivacyMode","tags":[]},{"type":"EnumItem","Name":"AllUsers","tags":[],"Value":0,"Enum":"ChatPrivacyMode"},{"type":"EnumItem","Name":"NoOne","tags":[],"Value":1,"Enum":"ChatPrivacyMode"},{"type":"EnumItem","Name":"Friends","tags":[],"Value":2,"Enum":"ChatPrivacyMode"},{"type":"Enum","Name":"ChatStyle","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"ChatStyle"},{"type":"EnumItem","Name":"Bubble","tags":[],"Value":1,"Enum":"ChatStyle"},{"type":"EnumItem","Name":"ClassicAndBubble","tags":[],"Value":2,"Enum":"ChatStyle"},{"type":"Enum","Name":"CollisionFidelity","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CollisionFidelity"},{"type":"EnumItem","Name":"Hull","tags":[],"Value":1,"Enum":"CollisionFidelity"},{"type":"EnumItem","Name":"Box","tags":[],"Value":2,"Enum":"CollisionFidelity"},{"type":"Enum","Name":"ComputerCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ComputerCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"ComputerCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"ComputerCameraMovementMode"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":3,"Enum":"ComputerCameraMovementMode"},{"type":"Enum","Name":"ComputerMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ComputerMovementMode"},{"type":"EnumItem","Name":"KeyboardMouse","tags":[],"Value":1,"Enum":"ComputerMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":2,"Enum":"ComputerMovementMode"},{"type":"Enum","Name":"ConnectionError","tags":[]},{"type":"EnumItem","Name":"OK","tags":[],"Value":0,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectErrors","tags":[],"Value":256,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectBadhash","tags":[],"Value":257,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectSecurityKeyMismatch","tags":[],"Value":258,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectNewSecurityKeyMismatch","tags":[],"Value":272,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectProtocolMismatch","tags":[],"Value":259,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectReceivePacketError","tags":[],"Value":260,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectReceivePacketStreamError","tags":[],"Value":261,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectSendPacketError","tags":[],"Value":262,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectIllegalTeleport","tags":[],"Value":263,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectDuplicatePlayer","tags":[],"Value":264,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectDuplicateTicket","tags":[],"Value":265,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectTimeout","tags":[],"Value":266,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectLuaKick","tags":[],"Value":267,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectOnRemoteSysStats","tags":[],"Value":268,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectHashTimeout","tags":[],"Value":269,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectCloudEditKick","tags":[],"Value":270,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectPlayerless","tags":[],"Value":271,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectEvicted","tags":[],"Value":273,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectDevMaintenance","tags":[],"Value":274,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectRobloxMaintenance","tags":[],"Value":275,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectRejoin","tags":[],"Value":276,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"DisconnectConnectionLost","tags":[],"Value":277,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchErrors","tags":[],"Value":512,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchDisabled","tags":[],"Value":515,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelauchError","tags":[],"Value":516,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchGameEnded","tags":[],"Value":517,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchGameFull","tags":[],"Value":518,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchUserLeft","tags":[],"Value":522,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchRestricted","tags":[],"Value":523,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchUnauthorized","tags":[],"Value":524,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchFlooded","tags":[],"Value":525,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchHashExpired","tags":[],"Value":526,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchHashException","tags":[],"Value":527,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchPartyCannotFit","tags":[],"Value":528,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchHttpError","tags":[],"Value":529,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchCustomMessage","tags":[],"Value":610,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"PlacelaunchOtherError","tags":[],"Value":611,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"TeleportErrors","tags":[],"Value":768,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"TeleportFailure","tags":[],"Value":769,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"TeleportGameNotFound","tags":[],"Value":770,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"TeleportGameEnded","tags":[],"Value":771,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"TeleportGameFull","tags":[],"Value":772,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"TeleportUnauthorized","tags":[],"Value":773,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"TeleportFlooded","tags":[],"Value":774,"Enum":"ConnectionError"},{"type":"EnumItem","Name":"TeleportIsTeleporting","tags":[],"Value":775,"Enum":"ConnectionError"},{"type":"Enum","Name":"ConnectionState","tags":[]},{"type":"EnumItem","Name":"Connected","tags":[],"Value":0,"Enum":"ConnectionState"},{"type":"EnumItem","Name":"Disconnected","tags":[],"Value":1,"Enum":"ConnectionState"},{"type":"Enum","Name":"ContextActionPriority","tags":[]},{"type":"EnumItem","Name":"Low","tags":[],"Value":1000,"Enum":"ContextActionPriority"},{"type":"EnumItem","Name":"Medium","tags":[],"Value":2000,"Enum":"ContextActionPriority"},{"type":"EnumItem","Name":"Default","tags":[],"Value":2000,"Enum":"ContextActionPriority"},{"type":"EnumItem","Name":"High","tags":[],"Value":3000,"Enum":"ContextActionPriority"},{"type":"Enum","Name":"ContextActionResult","tags":[]},{"type":"EnumItem","Name":"Pass","tags":[],"Value":1,"Enum":"ContextActionResult"},{"type":"EnumItem","Name":"Sink","tags":[],"Value":0,"Enum":"ContextActionResult"},{"type":"Enum","Name":"ControlMode","tags":[]},{"type":"EnumItem","Name":"MouseLockSwitch","tags":[],"Value":1,"Enum":"ControlMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"ControlMode"},{"type":"Enum","Name":"CoreGuiType","tags":[]},{"type":"EnumItem","Name":"PlayerList","tags":[],"Value":0,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Health","tags":[],"Value":1,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Backpack","tags":[],"Value":2,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Chat","tags":[],"Value":3,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"All","tags":[],"Value":4,"Enum":"CoreGuiType"},{"type":"Enum","Name":"CreatorType","tags":[]},{"type":"EnumItem","Name":"User","tags":[],"Value":0,"Enum":"CreatorType"},{"type":"EnumItem","Name":"Group","tags":[],"Value":1,"Enum":"CreatorType"},{"type":"Enum","Name":"CurrencyType","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CurrencyType"},{"type":"EnumItem","Name":"Robux","tags":[],"Value":1,"Enum":"CurrencyType"},{"type":"EnumItem","Name":"Tix","tags":[],"Value":2,"Enum":"CurrencyType"},{"type":"Enum","Name":"CustomCameraMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CustomCameraMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"CustomCameraMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"CustomCameraMode"},{"type":"Enum","Name":"DataStoreRequestType","tags":[]},{"type":"EnumItem","Name":"GetAsync","tags":[],"Value":0,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"SetIncrementAsync","tags":[],"Value":1,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"UpdateAsync","tags":[],"Value":2,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"GetSortedAsync","tags":[],"Value":3,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"SetIncrementSortedAsync","tags":[],"Value":4,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"OnUpdate","tags":[],"Value":5,"Enum":"DataStoreRequestType"},{"type":"Enum","Name":"DevCameraOcclusionMode","tags":[]},{"type":"EnumItem","Name":"Zoom","tags":[],"Value":0,"Enum":"DevCameraOcclusionMode"},{"type":"EnumItem","Name":"Invisicam","tags":[],"Value":1,"Enum":"DevCameraOcclusionMode"},{"type":"Enum","Name":"DevComputerCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevComputerCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"DevComputerCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"DevComputerCameraMovementMode"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":3,"Enum":"DevComputerCameraMovementMode"},{"type":"Enum","Name":"DevComputerMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"KeyboardMouse","tags":[],"Value":1,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":2,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":3,"Enum":"DevComputerMovementMode"},{"type":"Enum","Name":"DevTouchCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevTouchCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"DevTouchCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"DevTouchCameraMovementMode"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":3,"Enum":"DevTouchCameraMovementMode"},{"type":"Enum","Name":"DevTouchMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Thumbstick","tags":[],"Value":1,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"DPad","tags":[],"Value":2,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Thumbpad","tags":[],"Value":3,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":4,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":5,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"DynamicThumbstick","tags":[],"Value":6,"Enum":"DevTouchMovementMode"},{"type":"Enum","Name":"DeveloperMemoryTag","tags":[]},{"type":"EnumItem","Name":"Internal","tags":[],"Value":0,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"HttpCache","tags":[],"Value":1,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Instances","tags":[],"Value":2,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Signals","tags":[],"Value":3,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"LuaHeap","tags":[],"Value":4,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Script","tags":[],"Value":5,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"PhysicsCollision","tags":[],"Value":6,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"PhysicsParts","tags":[],"Value":7,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsSolidModels","tags":[],"Value":8,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsMeshParts","tags":[],"Value":9,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsParticles","tags":[],"Value":10,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsParts","tags":[],"Value":11,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsSpatialHash","tags":[],"Value":12,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsTerrain","tags":[],"Value":13,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsTexture","tags":[],"Value":14,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsTextureCharacter","tags":[],"Value":15,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Sounds","tags":[],"Value":16,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"StreamingSounds","tags":[],"Value":17,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"TerrainVoxels","tags":[],"Value":18,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Gui","tags":[],"Value":20,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Animation","tags":[],"Value":21,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Navigation","tags":[],"Value":22,"Enum":"DeveloperMemoryTag"},{"type":"Enum","Name":"DialogBehaviorType","tags":[]},{"type":"EnumItem","Name":"SinglePlayer","tags":[],"Value":0,"Enum":"DialogBehaviorType"},{"type":"EnumItem","Name":"MultiplePlayers","tags":[],"Value":1,"Enum":"DialogBehaviorType"},{"type":"Enum","Name":"DialogPurpose","tags":[]},{"type":"EnumItem","Name":"Quest","tags":[],"Value":0,"Enum":"DialogPurpose"},{"type":"EnumItem","Name":"Help","tags":[],"Value":1,"Enum":"DialogPurpose"},{"type":"EnumItem","Name":"Shop","tags":[],"Value":2,"Enum":"DialogPurpose"},{"type":"Enum","Name":"DialogTone","tags":[]},{"type":"EnumItem","Name":"Neutral","tags":[],"Value":0,"Enum":"DialogTone"},{"type":"EnumItem","Name":"Friendly","tags":[],"Value":1,"Enum":"DialogTone"},{"type":"EnumItem","Name":"Enemy","tags":[],"Value":2,"Enum":"DialogTone"},{"type":"Enum","Name":"DominantAxis","tags":[]},{"type":"EnumItem","Name":"Width","tags":[],"Value":0,"Enum":"DominantAxis"},{"type":"EnumItem","Name":"Height","tags":[],"Value":1,"Enum":"DominantAxis"},{"type":"Enum","Name":"EasingDirection","tags":[]},{"type":"EnumItem","Name":"In","tags":[],"Value":0,"Enum":"EasingDirection"},{"type":"EnumItem","Name":"Out","tags":[],"Value":1,"Enum":"EasingDirection"},{"type":"EnumItem","Name":"InOut","tags":[],"Value":2,"Enum":"EasingDirection"},{"type":"Enum","Name":"EasingStyle","tags":[]},{"type":"EnumItem","Name":"Linear","tags":[],"Value":0,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Sine","tags":[],"Value":1,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Back","tags":[],"Value":2,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quad","tags":[],"Value":3,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quart","tags":[],"Value":4,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quint","tags":[],"Value":5,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Bounce","tags":[],"Value":6,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Elastic","tags":[],"Value":7,"Enum":"EasingStyle"},{"type":"Enum","Name":"ElasticBehavior","tags":[]},{"type":"EnumItem","Name":"WhenScrollable","tags":[],"Value":0,"Enum":"ElasticBehavior"},{"type":"EnumItem","Name":"Always","tags":[],"Value":1,"Enum":"ElasticBehavior"},{"type":"EnumItem","Name":"Never","tags":[],"Value":2,"Enum":"ElasticBehavior"},{"type":"Enum","Name":"EnviromentalPhysicsThrottle","tags":[]},{"type":"EnumItem","Name":"DefaultAuto","tags":[],"Value":0,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Disabled","tags":[],"Value":1,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Always","tags":[],"Value":2,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip2","tags":[],"Value":3,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip4","tags":[],"Value":4,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip8","tags":[],"Value":5,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip16","tags":[],"Value":6,"Enum":"EnviromentalPhysicsThrottle"},{"type":"Enum","Name":"ErrorReporting","tags":[]},{"type":"EnumItem","Name":"DontReport","tags":[],"Value":0,"Enum":"ErrorReporting"},{"type":"EnumItem","Name":"Prompt","tags":[],"Value":1,"Enum":"ErrorReporting"},{"type":"EnumItem","Name":"Report","tags":[],"Value":2,"Enum":"ErrorReporting"},{"type":"Enum","Name":"ExplosionType","tags":[]},{"type":"EnumItem","Name":"NoCraters","tags":[],"Value":0,"Enum":"ExplosionType"},{"type":"EnumItem","Name":"Craters","tags":[],"Value":1,"Enum":"ExplosionType"},{"type":"EnumItem","Name":"CratersAndDebris","tags":[],"Value":2,"Enum":"ExplosionType"},{"type":"Enum","Name":"FillDirection","tags":[]},{"type":"EnumItem","Name":"Horizontal","tags":[],"Value":0,"Enum":"FillDirection"},{"type":"EnumItem","Name":"Vertical","tags":[],"Value":1,"Enum":"FillDirection"},{"type":"Enum","Name":"FilterResult","tags":[]},{"type":"EnumItem","Name":"Rejected","tags":[],"Value":1,"Enum":"FilterResult"},{"type":"EnumItem","Name":"Accepted","tags":[],"Value":0,"Enum":"FilterResult"},{"type":"Enum","Name":"Font","tags":[]},{"type":"EnumItem","Name":"Legacy","tags":[],"Value":0,"Enum":"Font"},{"type":"EnumItem","Name":"Arial","tags":[],"Value":1,"Enum":"Font"},{"type":"EnumItem","Name":"ArialBold","tags":[],"Value":2,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSans","tags":[],"Value":3,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansBold","tags":[],"Value":4,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansSemibold","tags":[],"Value":16,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansLight","tags":[],"Value":5,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansItalic","tags":[],"Value":6,"Enum":"Font"},{"type":"EnumItem","Name":"Bodoni","tags":[],"Value":7,"Enum":"Font"},{"type":"EnumItem","Name":"Garamond","tags":[],"Value":8,"Enum":"Font"},{"type":"EnumItem","Name":"Cartoon","tags":[],"Value":9,"Enum":"Font"},{"type":"EnumItem","Name":"Code","tags":[],"Value":10,"Enum":"Font"},{"type":"EnumItem","Name":"Highway","tags":[],"Value":11,"Enum":"Font"},{"type":"EnumItem","Name":"SciFi","tags":[],"Value":12,"Enum":"Font"},{"type":"EnumItem","Name":"Arcade","tags":[],"Value":13,"Enum":"Font"},{"type":"EnumItem","Name":"Fantasy","tags":[],"Value":14,"Enum":"Font"},{"type":"EnumItem","Name":"Antique","tags":[],"Value":15,"Enum":"Font"},{"type":"Enum","Name":"FontSize","tags":[]},{"type":"EnumItem","Name":"Size8","tags":[],"Value":0,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size9","tags":[],"Value":1,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size10","tags":[],"Value":2,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size11","tags":[],"Value":3,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size12","tags":[],"Value":4,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size14","tags":[],"Value":5,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size18","tags":[],"Value":6,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size24","tags":[],"Value":7,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size36","tags":[],"Value":8,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size48","tags":[],"Value":9,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size28","tags":[],"Value":10,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size32","tags":[],"Value":11,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size42","tags":[],"Value":12,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size60","tags":[],"Value":13,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size96","tags":[],"Value":14,"Enum":"FontSize"},{"type":"Enum","Name":"FormFactor","tags":[]},{"type":"EnumItem","Name":"Symmetric","tags":[],"Value":0,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":1,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Plate","tags":[],"Value":2,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Custom","tags":[],"Value":3,"Enum":"FormFactor"},{"type":"Enum","Name":"FrameStyle","tags":[]},{"type":"EnumItem","Name":"Custom","tags":[],"Value":0,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatBlue","tags":[],"Value":1,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"RobloxSquare","tags":[],"Value":2,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"RobloxRound","tags":[],"Value":3,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatGreen","tags":[],"Value":4,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatRed","tags":[],"Value":5,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"DropShadow","tags":[],"Value":6,"Enum":"FrameStyle"},{"type":"Enum","Name":"FramerateManagerMode","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"FramerateManagerMode"},{"type":"EnumItem","Name":"On","tags":[],"Value":1,"Enum":"FramerateManagerMode"},{"type":"EnumItem","Name":"Off","tags":[],"Value":2,"Enum":"FramerateManagerMode"},{"type":"Enum","Name":"FriendRequestEvent","tags":[]},{"type":"EnumItem","Name":"Issue","tags":[],"Value":0,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Revoke","tags":[],"Value":1,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Accept","tags":[],"Value":2,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Deny","tags":[],"Value":3,"Enum":"FriendRequestEvent"},{"type":"Enum","Name":"FriendStatus","tags":[]},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":0,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"NotFriend","tags":[],"Value":1,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"Friend","tags":[],"Value":2,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"FriendRequestSent","tags":[],"Value":3,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"FriendRequestReceived","tags":[],"Value":4,"Enum":"FriendStatus"},{"type":"Enum","Name":"FunctionalTestResult","tags":[]},{"type":"EnumItem","Name":"Passed","tags":[],"Value":0,"Enum":"FunctionalTestResult"},{"type":"EnumItem","Name":"Warning","tags":[],"Value":1,"Enum":"FunctionalTestResult"},{"type":"EnumItem","Name":"Error","tags":[],"Value":2,"Enum":"FunctionalTestResult"},{"type":"Enum","Name":"GameAvatarType","tags":[]},{"type":"EnumItem","Name":"R6","tags":[],"Value":0,"Enum":"GameAvatarType"},{"type":"EnumItem","Name":"R15","tags":[],"Value":1,"Enum":"GameAvatarType"},{"type":"EnumItem","Name":"PlayerChoice","tags":[],"Value":2,"Enum":"GameAvatarType"},{"type":"Enum","Name":"GearGenreSetting","tags":[]},{"type":"EnumItem","Name":"AllGenres","tags":[],"Value":0,"Enum":"GearGenreSetting"},{"type":"EnumItem","Name":"MatchingGenreOnly","tags":[],"Value":1,"Enum":"GearGenreSetting"},{"type":"Enum","Name":"GearType","tags":[]},{"type":"EnumItem","Name":"MeleeWeapons","tags":[],"Value":0,"Enum":"GearType"},{"type":"EnumItem","Name":"RangedWeapons","tags":[],"Value":1,"Enum":"GearType"},{"type":"EnumItem","Name":"Explosives","tags":[],"Value":2,"Enum":"GearType"},{"type":"EnumItem","Name":"PowerUps","tags":[],"Value":3,"Enum":"GearType"},{"type":"EnumItem","Name":"NavigationEnhancers","tags":[],"Value":4,"Enum":"GearType"},{"type":"EnumItem","Name":"MusicalInstruments","tags":[],"Value":5,"Enum":"GearType"},{"type":"EnumItem","Name":"SocialItems","tags":[],"Value":6,"Enum":"GearType"},{"type":"EnumItem","Name":"BuildingTools","tags":[],"Value":7,"Enum":"GearType"},{"type":"EnumItem","Name":"Transport","tags":[],"Value":8,"Enum":"GearType"},{"type":"Enum","Name":"Genre","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"Genre"},{"type":"EnumItem","Name":"TownAndCity","tags":[],"Value":1,"Enum":"Genre"},{"type":"EnumItem","Name":"Fantasy","tags":[],"Value":2,"Enum":"Genre"},{"type":"EnumItem","Name":"SciFi","tags":[],"Value":3,"Enum":"Genre"},{"type":"EnumItem","Name":"Ninja","tags":[],"Value":4,"Enum":"Genre"},{"type":"EnumItem","Name":"Scary","tags":[],"Value":5,"Enum":"Genre"},{"type":"EnumItem","Name":"Pirate","tags":[],"Value":6,"Enum":"Genre"},{"type":"EnumItem","Name":"Adventure","tags":[],"Value":7,"Enum":"Genre"},{"type":"EnumItem","Name":"Sports","tags":[],"Value":8,"Enum":"Genre"},{"type":"EnumItem","Name":"Funny","tags":[],"Value":9,"Enum":"Genre"},{"type":"EnumItem","Name":"WildWest","tags":[],"Value":10,"Enum":"Genre"},{"type":"EnumItem","Name":"War","tags":[],"Value":11,"Enum":"Genre"},{"type":"EnumItem","Name":"SkatePark","tags":[],"Value":12,"Enum":"Genre"},{"type":"EnumItem","Name":"Tutorial","tags":[],"Value":13,"Enum":"Genre"},{"type":"Enum","Name":"GraphicsMode","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":1,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Direct3D9","tags":[],"Value":3,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Direct3D11","tags":[],"Value":2,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"OpenGL","tags":[],"Value":4,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Metal","tags":[],"Value":5,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Vulkan","tags":[],"Value":6,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"NoGraphics","tags":[],"Value":7,"Enum":"GraphicsMode"},{"type":"Enum","Name":"HandlesStyle","tags":[]},{"type":"EnumItem","Name":"Resize","tags":[],"Value":0,"Enum":"HandlesStyle"},{"type":"EnumItem","Name":"Movement","tags":[],"Value":1,"Enum":"HandlesStyle"},{"type":"Enum","Name":"HorizontalAlignment","tags":[]},{"type":"EnumItem","Name":"Center","tags":[],"Value":0,"Enum":"HorizontalAlignment"},{"type":"EnumItem","Name":"Left","tags":[],"Value":1,"Enum":"HorizontalAlignment"},{"type":"EnumItem","Name":"Right","tags":[],"Value":2,"Enum":"HorizontalAlignment"},{"type":"Enum","Name":"HttpCachePolicy","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"HttpCachePolicy"},{"type":"EnumItem","Name":"Full","tags":[],"Value":1,"Enum":"HttpCachePolicy"},{"type":"EnumItem","Name":"DataOnly","tags":[],"Value":2,"Enum":"HttpCachePolicy"},{"type":"EnumItem","Name":"Default","tags":[],"Value":3,"Enum":"HttpCachePolicy"},{"type":"EnumItem","Name":"InternalRedirectRefresh","tags":[],"Value":4,"Enum":"HttpCachePolicy"},{"type":"Enum","Name":"HttpContentType","tags":[]},{"type":"EnumItem","Name":"ApplicationJson","tags":[],"Value":0,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"ApplicationXml","tags":[],"Value":1,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"ApplicationUrlEncoded","tags":[],"Value":2,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"TextPlain","tags":[],"Value":3,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"TextXml","tags":[],"Value":4,"Enum":"HttpContentType"},{"type":"Enum","Name":"HttpError","tags":[]},{"type":"EnumItem","Name":"OK","tags":[],"Value":0,"Enum":"HttpError"},{"type":"EnumItem","Name":"InvalidUrl","tags":[],"Value":1,"Enum":"HttpError"},{"type":"EnumItem","Name":"DnsResolve","tags":[],"Value":2,"Enum":"HttpError"},{"type":"EnumItem","Name":"ConnectFail","tags":[],"Value":3,"Enum":"HttpError"},{"type":"EnumItem","Name":"OutOfMemory","tags":[],"Value":4,"Enum":"HttpError"},{"type":"EnumItem","Name":"TimedOut","tags":[],"Value":5,"Enum":"HttpError"},{"type":"EnumItem","Name":"TooManyRedirects","tags":[],"Value":6,"Enum":"HttpError"},{"type":"EnumItem","Name":"InvalidRedirect","tags":[],"Value":7,"Enum":"HttpError"},{"type":"EnumItem","Name":"NetFail","tags":[],"Value":8,"Enum":"HttpError"},{"type":"EnumItem","Name":"Aborted","tags":[],"Value":9,"Enum":"HttpError"},{"type":"EnumItem","Name":"SslConnectFail","tags":[],"Value":10,"Enum":"HttpError"},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":11,"Enum":"HttpError"},{"type":"Enum","Name":"HttpRequestType","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"HttpRequestType"},{"type":"EnumItem","Name":"MarketplaceService","tags":[],"Value":2,"Enum":"HttpRequestType"},{"type":"EnumItem","Name":"Players","tags":[],"Value":7,"Enum":"HttpRequestType"},{"type":"EnumItem","Name":"Chat","tags":[],"Value":15,"Enum":"HttpRequestType"},{"type":"EnumItem","Name":"Avatar","tags":[],"Value":16,"Enum":"HttpRequestType"},{"type":"Enum","Name":"HumanoidDisplayDistanceType","tags":[]},{"type":"EnumItem","Name":"Viewer","tags":[],"Value":0,"Enum":"HumanoidDisplayDistanceType"},{"type":"EnumItem","Name":"Subject","tags":[],"Value":1,"Enum":"HumanoidDisplayDistanceType"},{"type":"EnumItem","Name":"None","tags":[],"Value":2,"Enum":"HumanoidDisplayDistanceType"},{"type":"Enum","Name":"HumanoidHealthDisplayType","tags":[]},{"type":"EnumItem","Name":"DisplayWhenDamaged","tags":[],"Value":0,"Enum":"HumanoidHealthDisplayType"},{"type":"EnumItem","Name":"AlwaysOn","tags":[],"Value":1,"Enum":"HumanoidHealthDisplayType"},{"type":"EnumItem","Name":"AlwaysOff","tags":[],"Value":2,"Enum":"HumanoidHealthDisplayType"},{"type":"Enum","Name":"HumanoidRigType","tags":[]},{"type":"EnumItem","Name":"R6","tags":[],"Value":0,"Enum":"HumanoidRigType"},{"type":"EnumItem","Name":"R15","tags":[],"Value":1,"Enum":"HumanoidRigType"},{"type":"Enum","Name":"HumanoidStateType","tags":[]},{"type":"EnumItem","Name":"FallingDown","tags":[],"Value":0,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Running","tags":[],"Value":8,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"RunningNoPhysics","tags":[],"Value":10,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Climbing","tags":[],"Value":12,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"StrafingNoPhysics","tags":[],"Value":11,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Ragdoll","tags":[],"Value":1,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"GettingUp","tags":[],"Value":2,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Jumping","tags":[],"Value":3,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Landed","tags":[],"Value":7,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Flying","tags":[],"Value":6,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Freefall","tags":[],"Value":5,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Seated","tags":[],"Value":13,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"PlatformStanding","tags":[],"Value":14,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Dead","tags":[],"Value":15,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Swimming","tags":[],"Value":4,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Physics","tags":[],"Value":16,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"None","tags":[],"Value":18,"Enum":"HumanoidStateType"},{"type":"Enum","Name":"InOut","tags":[]},{"type":"EnumItem","Name":"Edge","tags":[],"Value":0,"Enum":"InOut"},{"type":"EnumItem","Name":"Inset","tags":[],"Value":1,"Enum":"InOut"},{"type":"EnumItem","Name":"Center","tags":[],"Value":2,"Enum":"InOut"},{"type":"Enum","Name":"InfoType","tags":[]},{"type":"EnumItem","Name":"Asset","tags":[],"Value":0,"Enum":"InfoType"},{"type":"EnumItem","Name":"Product","tags":[],"Value":1,"Enum":"InfoType"},{"type":"EnumItem","Name":"GamePass","tags":[],"Value":2,"Enum":"InfoType"},{"type":"Enum","Name":"InitialDockState","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":0,"Enum":"InitialDockState"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":1,"Enum":"InitialDockState"},{"type":"EnumItem","Name":"Left","tags":[],"Value":2,"Enum":"InitialDockState"},{"type":"EnumItem","Name":"Right","tags":[],"Value":3,"Enum":"InitialDockState"},{"type":"EnumItem","Name":"Float","tags":[],"Value":4,"Enum":"InitialDockState"},{"type":"Enum","Name":"InputType","tags":[]},{"type":"EnumItem","Name":"NoInput","tags":[],"Value":0,"Enum":"InputType"},{"type":"EnumItem","Name":"Constant","tags":[],"Value":12,"Enum":"InputType"},{"type":"EnumItem","Name":"Sin","tags":[],"Value":13,"Enum":"InputType"},{"type":"Enum","Name":"JointCreationMode","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"JointCreationMode"},{"type":"EnumItem","Name":"Surface","tags":[],"Value":1,"Enum":"JointCreationMode"},{"type":"EnumItem","Name":"None","tags":[],"Value":2,"Enum":"JointCreationMode"},{"type":"Enum","Name":"JointType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":28,"Enum":"JointType"},{"type":"EnumItem","Name":"Rotate","tags":[],"Value":7,"Enum":"JointType"},{"type":"EnumItem","Name":"RotateP","tags":[],"Value":8,"Enum":"JointType"},{"type":"EnumItem","Name":"RotateV","tags":[],"Value":9,"Enum":"JointType"},{"type":"EnumItem","Name":"Glue","tags":[],"Value":10,"Enum":"JointType"},{"type":"EnumItem","Name":"Weld","tags":[],"Value":1,"Enum":"JointType"},{"type":"EnumItem","Name":"Snap","tags":[],"Value":3,"Enum":"JointType"},{"type":"Enum","Name":"KeyCode","tags":[]},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":0,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Backspace","tags":[],"Value":8,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Tab","tags":[],"Value":9,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Clear","tags":[],"Value":12,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Return","tags":[],"Value":13,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Pause","tags":[],"Value":19,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Escape","tags":[],"Value":27,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Space","tags":[],"Value":32,"Enum":"KeyCode"},{"type":"EnumItem","Name":"QuotedDouble","tags":[],"Value":34,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Hash","tags":[],"Value":35,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Dollar","tags":[],"Value":36,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Percent","tags":[],"Value":37,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Ampersand","tags":[],"Value":38,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Quote","tags":[],"Value":39,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftParenthesis","tags":[],"Value":40,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightParenthesis","tags":[],"Value":41,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Asterisk","tags":[],"Value":42,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Plus","tags":[],"Value":43,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Comma","tags":[],"Value":44,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Minus","tags":[],"Value":45,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Period","tags":[],"Value":46,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Slash","tags":[],"Value":47,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Zero","tags":[],"Value":48,"Enum":"KeyCode"},{"type":"EnumItem","Name":"One","tags":[],"Value":49,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Two","tags":[],"Value":50,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Three","tags":[],"Value":51,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Four","tags":[],"Value":52,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Five","tags":[],"Value":53,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Six","tags":[],"Value":54,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Seven","tags":[],"Value":55,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Eight","tags":[],"Value":56,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Nine","tags":[],"Value":57,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Colon","tags":[],"Value":58,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Semicolon","tags":[],"Value":59,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LessThan","tags":[],"Value":60,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Equals","tags":[],"Value":61,"Enum":"KeyCode"},{"type":"EnumItem","Name":"GreaterThan","tags":[],"Value":62,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Question","tags":[],"Value":63,"Enum":"KeyCode"},{"type":"EnumItem","Name":"At","tags":[],"Value":64,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftBracket","tags":[],"Value":91,"Enum":"KeyCode"},{"type":"EnumItem","Name":"BackSlash","tags":[],"Value":92,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightBracket","tags":[],"Value":93,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Caret","tags":[],"Value":94,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Underscore","tags":[],"Value":95,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Backquote","tags":[],"Value":96,"Enum":"KeyCode"},{"type":"EnumItem","Name":"A","tags":[],"Value":97,"Enum":"KeyCode"},{"type":"EnumItem","Name":"B","tags":[],"Value":98,"Enum":"KeyCode"},{"type":"EnumItem","Name":"C","tags":[],"Value":99,"Enum":"KeyCode"},{"type":"EnumItem","Name":"D","tags":[],"Value":100,"Enum":"KeyCode"},{"type":"EnumItem","Name":"E","tags":[],"Value":101,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F","tags":[],"Value":102,"Enum":"KeyCode"},{"type":"EnumItem","Name":"G","tags":[],"Value":103,"Enum":"KeyCode"},{"type":"EnumItem","Name":"H","tags":[],"Value":104,"Enum":"KeyCode"},{"type":"EnumItem","Name":"I","tags":[],"Value":105,"Enum":"KeyCode"},{"type":"EnumItem","Name":"J","tags":[],"Value":106,"Enum":"KeyCode"},{"type":"EnumItem","Name":"K","tags":[],"Value":107,"Enum":"KeyCode"},{"type":"EnumItem","Name":"L","tags":[],"Value":108,"Enum":"KeyCode"},{"type":"EnumItem","Name":"M","tags":[],"Value":109,"Enum":"KeyCode"},{"type":"EnumItem","Name":"N","tags":[],"Value":110,"Enum":"KeyCode"},{"type":"EnumItem","Name":"O","tags":[],"Value":111,"Enum":"KeyCode"},{"type":"EnumItem","Name":"P","tags":[],"Value":112,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Q","tags":[],"Value":113,"Enum":"KeyCode"},{"type":"EnumItem","Name":"R","tags":[],"Value":114,"Enum":"KeyCode"},{"type":"EnumItem","Name":"S","tags":[],"Value":115,"Enum":"KeyCode"},{"type":"EnumItem","Name":"T","tags":[],"Value":116,"Enum":"KeyCode"},{"type":"EnumItem","Name":"U","tags":[],"Value":117,"Enum":"KeyCode"},{"type":"EnumItem","Name":"V","tags":[],"Value":118,"Enum":"KeyCode"},{"type":"EnumItem","Name":"W","tags":[],"Value":119,"Enum":"KeyCode"},{"type":"EnumItem","Name":"X","tags":[],"Value":120,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Y","tags":[],"Value":121,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Z","tags":[],"Value":122,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftCurly","tags":[],"Value":123,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Pipe","tags":[],"Value":124,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightCurly","tags":[],"Value":125,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Tilde","tags":[],"Value":126,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Delete","tags":[],"Value":127,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadZero","tags":[],"Value":256,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadOne","tags":[],"Value":257,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadTwo","tags":[],"Value":258,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadThree","tags":[],"Value":259,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadFour","tags":[],"Value":260,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadFive","tags":[],"Value":261,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadSix","tags":[],"Value":262,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadSeven","tags":[],"Value":263,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEight","tags":[],"Value":264,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadNine","tags":[],"Value":265,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadPeriod","tags":[],"Value":266,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadDivide","tags":[],"Value":267,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadMultiply","tags":[],"Value":268,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadMinus","tags":[],"Value":269,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadPlus","tags":[],"Value":270,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEnter","tags":[],"Value":271,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEquals","tags":[],"Value":272,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Up","tags":[],"Value":273,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Down","tags":[],"Value":274,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Right","tags":[],"Value":275,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Left","tags":[],"Value":276,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Insert","tags":[],"Value":277,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Home","tags":[],"Value":278,"Enum":"KeyCode"},{"type":"EnumItem","Name":"End","tags":[],"Value":279,"Enum":"KeyCode"},{"type":"EnumItem","Name":"PageUp","tags":[],"Value":280,"Enum":"KeyCode"},{"type":"EnumItem","Name":"PageDown","tags":[],"Value":281,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftShift","tags":[],"Value":304,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightShift","tags":[],"Value":303,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftMeta","tags":[],"Value":310,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightMeta","tags":[],"Value":309,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftAlt","tags":[],"Value":308,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightAlt","tags":[],"Value":307,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftControl","tags":[],"Value":306,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightControl","tags":[],"Value":305,"Enum":"KeyCode"},{"type":"EnumItem","Name":"CapsLock","tags":[],"Value":301,"Enum":"KeyCode"},{"type":"EnumItem","Name":"NumLock","tags":[],"Value":300,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ScrollLock","tags":[],"Value":302,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftSuper","tags":[],"Value":311,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightSuper","tags":[],"Value":312,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Mode","tags":[],"Value":313,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Compose","tags":[],"Value":314,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Help","tags":[],"Value":315,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Print","tags":[],"Value":316,"Enum":"KeyCode"},{"type":"EnumItem","Name":"SysReq","tags":[],"Value":317,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Break","tags":[],"Value":318,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Menu","tags":[],"Value":319,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Power","tags":[],"Value":320,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Euro","tags":[],"Value":321,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Undo","tags":[],"Value":322,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F1","tags":[],"Value":282,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F2","tags":[],"Value":283,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F3","tags":[],"Value":284,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F4","tags":[],"Value":285,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F5","tags":[],"Value":286,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F6","tags":[],"Value":287,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F7","tags":[],"Value":288,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F8","tags":[],"Value":289,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F9","tags":[],"Value":290,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F10","tags":[],"Value":291,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F11","tags":[],"Value":292,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F12","tags":[],"Value":293,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F13","tags":[],"Value":294,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F14","tags":[],"Value":295,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F15","tags":[],"Value":296,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World0","tags":[],"Value":160,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World1","tags":[],"Value":161,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World2","tags":[],"Value":162,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World3","tags":[],"Value":163,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World4","tags":[],"Value":164,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World5","tags":[],"Value":165,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World6","tags":[],"Value":166,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World7","tags":[],"Value":167,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World8","tags":[],"Value":168,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World9","tags":[],"Value":169,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World10","tags":[],"Value":170,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World11","tags":[],"Value":171,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World12","tags":[],"Value":172,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World13","tags":[],"Value":173,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World14","tags":[],"Value":174,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World15","tags":[],"Value":175,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World16","tags":[],"Value":176,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World17","tags":[],"Value":177,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World18","tags":[],"Value":178,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World19","tags":[],"Value":179,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World20","tags":[],"Value":180,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World21","tags":[],"Value":181,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World22","tags":[],"Value":182,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World23","tags":[],"Value":183,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World24","tags":[],"Value":184,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World25","tags":[],"Value":185,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World26","tags":[],"Value":186,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World27","tags":[],"Value":187,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World28","tags":[],"Value":188,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World29","tags":[],"Value":189,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World30","tags":[],"Value":190,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World31","tags":[],"Value":191,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World32","tags":[],"Value":192,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World33","tags":[],"Value":193,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World34","tags":[],"Value":194,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World35","tags":[],"Value":195,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World36","tags":[],"Value":196,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World37","tags":[],"Value":197,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World38","tags":[],"Value":198,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World39","tags":[],"Value":199,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World40","tags":[],"Value":200,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World41","tags":[],"Value":201,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World42","tags":[],"Value":202,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World43","tags":[],"Value":203,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World44","tags":[],"Value":204,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World45","tags":[],"Value":205,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World46","tags":[],"Value":206,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World47","tags":[],"Value":207,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World48","tags":[],"Value":208,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World49","tags":[],"Value":209,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World50","tags":[],"Value":210,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World51","tags":[],"Value":211,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World52","tags":[],"Value":212,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World53","tags":[],"Value":213,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World54","tags":[],"Value":214,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World55","tags":[],"Value":215,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World56","tags":[],"Value":216,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World57","tags":[],"Value":217,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World58","tags":[],"Value":218,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World59","tags":[],"Value":219,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World60","tags":[],"Value":220,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World61","tags":[],"Value":221,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World62","tags":[],"Value":222,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World63","tags":[],"Value":223,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World64","tags":[],"Value":224,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World65","tags":[],"Value":225,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World66","tags":[],"Value":226,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World67","tags":[],"Value":227,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World68","tags":[],"Value":228,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World69","tags":[],"Value":229,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World70","tags":[],"Value":230,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World71","tags":[],"Value":231,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World72","tags":[],"Value":232,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World73","tags":[],"Value":233,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World74","tags":[],"Value":234,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World75","tags":[],"Value":235,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World76","tags":[],"Value":236,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World77","tags":[],"Value":237,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World78","tags":[],"Value":238,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World79","tags":[],"Value":239,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World80","tags":[],"Value":240,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World81","tags":[],"Value":241,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World82","tags":[],"Value":242,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World83","tags":[],"Value":243,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World84","tags":[],"Value":244,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World85","tags":[],"Value":245,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World86","tags":[],"Value":246,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World87","tags":[],"Value":247,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World88","tags":[],"Value":248,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World89","tags":[],"Value":249,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World90","tags":[],"Value":250,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World91","tags":[],"Value":251,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World92","tags":[],"Value":252,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World93","tags":[],"Value":253,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World94","tags":[],"Value":254,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World95","tags":[],"Value":255,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonX","tags":[],"Value":1000,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonY","tags":[],"Value":1001,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonA","tags":[],"Value":1002,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonB","tags":[],"Value":1003,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR1","tags":[],"Value":1004,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL1","tags":[],"Value":1005,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR2","tags":[],"Value":1006,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL2","tags":[],"Value":1007,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR3","tags":[],"Value":1008,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL3","tags":[],"Value":1009,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonStart","tags":[],"Value":1010,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonSelect","tags":[],"Value":1011,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadLeft","tags":[],"Value":1012,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadRight","tags":[],"Value":1013,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadUp","tags":[],"Value":1014,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadDown","tags":[],"Value":1015,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Thumbstick1","tags":[],"Value":1016,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Thumbstick2","tags":[],"Value":1017,"Enum":"KeyCode"},{"type":"Enum","Name":"KeywordFilterType","tags":[]},{"type":"EnumItem","Name":"Include","tags":[],"Value":0,"Enum":"KeywordFilterType"},{"type":"EnumItem","Name":"Exclude","tags":[],"Value":1,"Enum":"KeywordFilterType"},{"type":"Enum","Name":"Language","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"Language"},{"type":"Enum","Name":"LeftRight","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":0,"Enum":"LeftRight"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"LeftRight"},{"type":"EnumItem","Name":"Right","tags":[],"Value":2,"Enum":"LeftRight"},{"type":"Enum","Name":"LevelOfDetailSetting","tags":[]},{"type":"EnumItem","Name":"High","tags":[],"Value":2,"Enum":"LevelOfDetailSetting"},{"type":"EnumItem","Name":"Medium","tags":[],"Value":1,"Enum":"LevelOfDetailSetting"},{"type":"EnumItem","Name":"Low","tags":[],"Value":0,"Enum":"LevelOfDetailSetting"},{"type":"Enum","Name":"Limb","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"Limb"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":1,"Enum":"Limb"},{"type":"EnumItem","Name":"LeftArm","tags":[],"Value":2,"Enum":"Limb"},{"type":"EnumItem","Name":"RightArm","tags":[],"Value":3,"Enum":"Limb"},{"type":"EnumItem","Name":"LeftLeg","tags":[],"Value":4,"Enum":"Limb"},{"type":"EnumItem","Name":"RightLeg","tags":[],"Value":5,"Enum":"Limb"},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":6,"Enum":"Limb"},{"type":"Enum","Name":"ListenerType","tags":[]},{"type":"EnumItem","Name":"Camera","tags":[],"Value":0,"Enum":"ListenerType"},{"type":"EnumItem","Name":"CFrame","tags":[],"Value":1,"Enum":"ListenerType"},{"type":"EnumItem","Name":"ObjectPosition","tags":[],"Value":2,"Enum":"ListenerType"},{"type":"EnumItem","Name":"ObjectCFrame","tags":[],"Value":3,"Enum":"ListenerType"},{"type":"Enum","Name":"Material","tags":[]},{"type":"EnumItem","Name":"Plastic","tags":[],"Value":256,"Enum":"Material"},{"type":"EnumItem","Name":"Wood","tags":[],"Value":512,"Enum":"Material"},{"type":"EnumItem","Name":"Slate","tags":[],"Value":800,"Enum":"Material"},{"type":"EnumItem","Name":"Concrete","tags":[],"Value":816,"Enum":"Material"},{"type":"EnumItem","Name":"CorrodedMetal","tags":[],"Value":1040,"Enum":"Material"},{"type":"EnumItem","Name":"DiamondPlate","tags":[],"Value":1056,"Enum":"Material"},{"type":"EnumItem","Name":"Foil","tags":[],"Value":1072,"Enum":"Material"},{"type":"EnumItem","Name":"Grass","tags":[],"Value":1280,"Enum":"Material"},{"type":"EnumItem","Name":"Ice","tags":[],"Value":1536,"Enum":"Material"},{"type":"EnumItem","Name":"Marble","tags":[],"Value":784,"Enum":"Material"},{"type":"EnumItem","Name":"Granite","tags":[],"Value":832,"Enum":"Material"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":848,"Enum":"Material"},{"type":"EnumItem","Name":"Pebble","tags":[],"Value":864,"Enum":"Material"},{"type":"EnumItem","Name":"Sand","tags":[],"Value":1296,"Enum":"Material"},{"type":"EnumItem","Name":"Fabric","tags":[],"Value":1312,"Enum":"Material"},{"type":"EnumItem","Name":"SmoothPlastic","tags":[],"Value":272,"Enum":"Material"},{"type":"EnumItem","Name":"Metal","tags":[],"Value":1088,"Enum":"Material"},{"type":"EnumItem","Name":"WoodPlanks","tags":[],"Value":528,"Enum":"Material"},{"type":"EnumItem","Name":"Cobblestone","tags":[],"Value":880,"Enum":"Material"},{"type":"EnumItem","Name":"Air","tags":["notbrowsable"],"Value":1792,"Enum":"Material"},{"type":"EnumItem","Name":"Water","tags":["notbrowsable"],"Value":2048,"Enum":"Material"},{"type":"EnumItem","Name":"Rock","tags":["notbrowsable"],"Value":896,"Enum":"Material"},{"type":"EnumItem","Name":"Glacier","tags":["notbrowsable"],"Value":1552,"Enum":"Material"},{"type":"EnumItem","Name":"Snow","tags":["notbrowsable"],"Value":1328,"Enum":"Material"},{"type":"EnumItem","Name":"Sandstone","tags":["notbrowsable"],"Value":912,"Enum":"Material"},{"type":"EnumItem","Name":"Mud","tags":["notbrowsable"],"Value":1344,"Enum":"Material"},{"type":"EnumItem","Name":"Basalt","tags":["notbrowsable"],"Value":788,"Enum":"Material"},{"type":"EnumItem","Name":"Ground","tags":["notbrowsable"],"Value":1360,"Enum":"Material"},{"type":"EnumItem","Name":"CrackedLava","tags":["notbrowsable"],"Value":804,"Enum":"Material"},{"type":"EnumItem","Name":"Neon","tags":[],"Value":288,"Enum":"Material"},{"type":"EnumItem","Name":"Glass","tags":[],"Value":1568,"Enum":"Material"},{"type":"EnumItem","Name":"Asphalt","tags":["notbrowsable"],"Value":1376,"Enum":"Material"},{"type":"EnumItem","Name":"LeafyGrass","tags":["notbrowsable"],"Value":1284,"Enum":"Material"},{"type":"EnumItem","Name":"Salt","tags":["notbrowsable"],"Value":1392,"Enum":"Material"},{"type":"EnumItem","Name":"Limestone","tags":["notbrowsable"],"Value":820,"Enum":"Material"},{"type":"EnumItem","Name":"Pavement","tags":["notbrowsable"],"Value":836,"Enum":"Material"},{"type":"Enum","Name":"MembershipType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"MembershipType"},{"type":"EnumItem","Name":"BuildersClub","tags":[],"Value":1,"Enum":"MembershipType"},{"type":"EnumItem","Name":"TurboBuildersClub","tags":[],"Value":2,"Enum":"MembershipType"},{"type":"EnumItem","Name":"OutrageousBuildersClub","tags":[],"Value":3,"Enum":"MembershipType"},{"type":"Enum","Name":"MeshType","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"MeshType"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":1,"Enum":"MeshType"},{"type":"EnumItem","Name":"Wedge","tags":[],"Value":2,"Enum":"MeshType"},{"type":"EnumItem","Name":"Prism","tags":["deprecated"],"Value":7,"Enum":"MeshType"},{"type":"EnumItem","Name":"Pyramid","tags":["deprecated"],"Value":8,"Enum":"MeshType"},{"type":"EnumItem","Name":"ParallelRamp","tags":["deprecated"],"Value":9,"Enum":"MeshType"},{"type":"EnumItem","Name":"RightAngleRamp","tags":["deprecated"],"Value":10,"Enum":"MeshType"},{"type":"EnumItem","Name":"CornerWedge","tags":["deprecated"],"Value":11,"Enum":"MeshType"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":6,"Enum":"MeshType"},{"type":"EnumItem","Name":"Sphere","tags":[],"Value":3,"Enum":"MeshType"},{"type":"EnumItem","Name":"Cylinder","tags":[],"Value":4,"Enum":"MeshType"},{"type":"EnumItem","Name":"FileMesh","tags":[],"Value":5,"Enum":"MeshType"},{"type":"Enum","Name":"MessageType","tags":[]},{"type":"EnumItem","Name":"MessageOutput","tags":[],"Value":0,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageInfo","tags":[],"Value":1,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageWarning","tags":[],"Value":2,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageError","tags":[],"Value":3,"Enum":"MessageType"},{"type":"Enum","Name":"MouseBehavior","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"MouseBehavior"},{"type":"EnumItem","Name":"LockCenter","tags":[],"Value":1,"Enum":"MouseBehavior"},{"type":"EnumItem","Name":"LockCurrentPosition","tags":[],"Value":2,"Enum":"MouseBehavior"},{"type":"Enum","Name":"MoveState","tags":[]},{"type":"EnumItem","Name":"Stopped","tags":[],"Value":0,"Enum":"MoveState"},{"type":"EnumItem","Name":"Coasting","tags":[],"Value":1,"Enum":"MoveState"},{"type":"EnumItem","Name":"Pushing","tags":[],"Value":2,"Enum":"MoveState"},{"type":"EnumItem","Name":"Stopping","tags":[],"Value":3,"Enum":"MoveState"},{"type":"EnumItem","Name":"AirFree","tags":[],"Value":4,"Enum":"MoveState"},{"type":"Enum","Name":"NameOcclusion","tags":[]},{"type":"EnumItem","Name":"OccludeAll","tags":[],"Value":2,"Enum":"NameOcclusion"},{"type":"EnumItem","Name":"EnemyOcclusion","tags":[],"Value":1,"Enum":"NameOcclusion"},{"type":"EnumItem","Name":"NoOcclusion","tags":[],"Value":0,"Enum":"NameOcclusion"},{"type":"Enum","Name":"NetworkOwnership","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"NetworkOwnership"},{"type":"EnumItem","Name":"Manual","tags":[],"Value":1,"Enum":"NetworkOwnership"},{"type":"EnumItem","Name":"OnContact","tags":[],"Value":2,"Enum":"NetworkOwnership"},{"type":"Enum","Name":"NormalId","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":1,"Enum":"NormalId"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":4,"Enum":"NormalId"},{"type":"EnumItem","Name":"Back","tags":[],"Value":2,"Enum":"NormalId"},{"type":"EnumItem","Name":"Front","tags":[],"Value":5,"Enum":"NormalId"},{"type":"EnumItem","Name":"Right","tags":[],"Value":0,"Enum":"NormalId"},{"type":"EnumItem","Name":"Left","tags":[],"Value":3,"Enum":"NormalId"},{"type":"Enum","Name":"OverrideMouseIconBehavior","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"OverrideMouseIconBehavior"},{"type":"EnumItem","Name":"ForceShow","tags":[],"Value":1,"Enum":"OverrideMouseIconBehavior"},{"type":"EnumItem","Name":"ForceHide","tags":[],"Value":2,"Enum":"OverrideMouseIconBehavior"},{"type":"Enum","Name":"PacketPriority","tags":[]},{"type":"EnumItem","Name":"IMMEDIATE_PRIORITY","tags":[],"Value":0,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"HIGH_PRIORITY","tags":[],"Value":1,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"MEDIUM_PRIORITY","tags":[],"Value":2,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"LOW_PRIORITY","tags":[],"Value":3,"Enum":"PacketPriority"},{"type":"Enum","Name":"PartType","tags":[]},{"type":"EnumItem","Name":"Ball","tags":[],"Value":0,"Enum":"PartType"},{"type":"EnumItem","Name":"Block","tags":[],"Value":1,"Enum":"PartType"},{"type":"EnumItem","Name":"Cylinder","tags":[],"Value":2,"Enum":"PartType"},{"type":"Enum","Name":"PathStatus","tags":[]},{"type":"EnumItem","Name":"Success","tags":[],"Value":0,"Enum":"PathStatus"},{"type":"EnumItem","Name":"ClosestNoPath","tags":["deprecated"],"Value":1,"Enum":"PathStatus"},{"type":"EnumItem","Name":"ClosestOutOfRange","tags":["deprecated"],"Value":2,"Enum":"PathStatus"},{"type":"EnumItem","Name":"FailStartNotEmpty","tags":["deprecated"],"Value":3,"Enum":"PathStatus"},{"type":"EnumItem","Name":"FailFinishNotEmpty","tags":["deprecated"],"Value":4,"Enum":"PathStatus"},{"type":"EnumItem","Name":"NoPath","tags":[],"Value":5,"Enum":"PathStatus"},{"type":"Enum","Name":"PathWaypointAction","tags":[]},{"type":"EnumItem","Name":"Walk","tags":[],"Value":0,"Enum":"PathWaypointAction"},{"type":"EnumItem","Name":"Jump","tags":[],"Value":1,"Enum":"PathWaypointAction"},{"type":"Enum","Name":"Platform","tags":[]},{"type":"EnumItem","Name":"Windows","tags":[],"Value":0,"Enum":"Platform"},{"type":"EnumItem","Name":"OSX","tags":[],"Value":1,"Enum":"Platform"},{"type":"EnumItem","Name":"IOS","tags":[],"Value":2,"Enum":"Platform"},{"type":"EnumItem","Name":"Android","tags":[],"Value":3,"Enum":"Platform"},{"type":"EnumItem","Name":"XBoxOne","tags":[],"Value":4,"Enum":"Platform"},{"type":"EnumItem","Name":"PS4","tags":[],"Value":5,"Enum":"Platform"},{"type":"EnumItem","Name":"PS3","tags":[],"Value":6,"Enum":"Platform"},{"type":"EnumItem","Name":"XBox360","tags":[],"Value":7,"Enum":"Platform"},{"type":"EnumItem","Name":"WiiU","tags":[],"Value":8,"Enum":"Platform"},{"type":"EnumItem","Name":"NX","tags":[],"Value":9,"Enum":"Platform"},{"type":"EnumItem","Name":"Ouya","tags":[],"Value":10,"Enum":"Platform"},{"type":"EnumItem","Name":"AndroidTV","tags":[],"Value":11,"Enum":"Platform"},{"type":"EnumItem","Name":"Chromecast","tags":[],"Value":12,"Enum":"Platform"},{"type":"EnumItem","Name":"Linux","tags":[],"Value":13,"Enum":"Platform"},{"type":"EnumItem","Name":"SteamOS","tags":[],"Value":14,"Enum":"Platform"},{"type":"EnumItem","Name":"WebOS","tags":[],"Value":15,"Enum":"Platform"},{"type":"EnumItem","Name":"DOS","tags":[],"Value":16,"Enum":"Platform"},{"type":"EnumItem","Name":"BeOS","tags":[],"Value":17,"Enum":"Platform"},{"type":"EnumItem","Name":"UWP","tags":[],"Value":18,"Enum":"Platform"},{"type":"EnumItem","Name":"None","tags":[],"Value":19,"Enum":"Platform"},{"type":"Enum","Name":"PlaybackState","tags":[]},{"type":"EnumItem","Name":"Begin","tags":[],"Value":0,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Delayed","tags":[],"Value":1,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Playing","tags":[],"Value":2,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Paused","tags":[],"Value":3,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Completed","tags":[],"Value":4,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Cancelled","tags":[],"Value":5,"Enum":"PlaybackState"},{"type":"Enum","Name":"PlayerActions","tags":[]},{"type":"EnumItem","Name":"CharacterForward","tags":[],"Value":0,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterBackward","tags":[],"Value":1,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterLeft","tags":[],"Value":2,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterRight","tags":[],"Value":3,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterJump","tags":[],"Value":4,"Enum":"PlayerActions"},{"type":"Enum","Name":"PlayerChatType","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"PlayerChatType"},{"type":"EnumItem","Name":"Team","tags":[],"Value":1,"Enum":"PlayerChatType"},{"type":"EnumItem","Name":"Whisper","tags":[],"Value":2,"Enum":"PlayerChatType"},{"type":"Enum","Name":"PoseEasingDirection","tags":[]},{"type":"EnumItem","Name":"Out","tags":[],"Value":1,"Enum":"PoseEasingDirection"},{"type":"EnumItem","Name":"InOut","tags":[],"Value":2,"Enum":"PoseEasingDirection"},{"type":"EnumItem","Name":"In","tags":[],"Value":0,"Enum":"PoseEasingDirection"},{"type":"Enum","Name":"PoseEasingStyle","tags":[]},{"type":"EnumItem","Name":"Linear","tags":[],"Value":0,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Constant","tags":[],"Value":1,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Elastic","tags":[],"Value":2,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Cubic","tags":[],"Value":3,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Bounce","tags":[],"Value":4,"Enum":"PoseEasingStyle"},{"type":"Enum","Name":"PrivilegeType","tags":[]},{"type":"EnumItem","Name":"Owner","tags":[],"Value":255,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Admin","tags":[],"Value":240,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Member","tags":[],"Value":128,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Visitor","tags":[],"Value":10,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Banned","tags":[],"Value":0,"Enum":"PrivilegeType"},{"type":"Enum","Name":"ProductPurchaseDecision","tags":[]},{"type":"EnumItem","Name":"NotProcessedYet","tags":[],"Value":0,"Enum":"ProductPurchaseDecision"},{"type":"EnumItem","Name":"PurchaseGranted","tags":[],"Value":1,"Enum":"ProductPurchaseDecision"},{"type":"Enum","Name":"QualityLevel","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level01","tags":[],"Value":1,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level02","tags":[],"Value":2,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level03","tags":[],"Value":3,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level04","tags":[],"Value":4,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level05","tags":[],"Value":5,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level06","tags":[],"Value":6,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level07","tags":[],"Value":7,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level08","tags":[],"Value":8,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level09","tags":[],"Value":9,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level10","tags":[],"Value":10,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level11","tags":[],"Value":11,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level12","tags":[],"Value":12,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level13","tags":[],"Value":13,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level14","tags":[],"Value":14,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level15","tags":[],"Value":15,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level16","tags":[],"Value":16,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level17","tags":[],"Value":17,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level18","tags":[],"Value":18,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level19","tags":[],"Value":19,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level20","tags":[],"Value":20,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level21","tags":[],"Value":21,"Enum":"QualityLevel"},{"type":"Enum","Name":"R15CollisionType","tags":[]},{"type":"EnumItem","Name":"OuterBox","tags":[],"Value":0,"Enum":"R15CollisionType"},{"type":"EnumItem","Name":"InnerBox","tags":[],"Value":1,"Enum":"R15CollisionType"},{"type":"Enum","Name":"RenderPriority","tags":[]},{"type":"EnumItem","Name":"First","tags":[],"Value":0,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Input","tags":[],"Value":100,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Camera","tags":[],"Value":200,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Character","tags":[],"Value":300,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Last","tags":[],"Value":2000,"Enum":"RenderPriority"},{"type":"Enum","Name":"RenderingTestComparisonMethod","tags":[]},{"type":"EnumItem","Name":"psnr","tags":[],"Value":0,"Enum":"RenderingTestComparisonMethod"},{"type":"EnumItem","Name":"diff","tags":[],"Value":1,"Enum":"RenderingTestComparisonMethod"},{"type":"Enum","Name":"ReverbType","tags":[]},{"type":"EnumItem","Name":"NoReverb","tags":[],"Value":0,"Enum":"ReverbType"},{"type":"EnumItem","Name":"GenericReverb","tags":[],"Value":1,"Enum":"ReverbType"},{"type":"EnumItem","Name":"PaddedCell","tags":[],"Value":2,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Room","tags":[],"Value":3,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Bathroom","tags":[],"Value":4,"Enum":"ReverbType"},{"type":"EnumItem","Name":"LivingRoom","tags":[],"Value":5,"Enum":"ReverbType"},{"type":"EnumItem","Name":"StoneRoom","tags":[],"Value":6,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Auditorium","tags":[],"Value":7,"Enum":"ReverbType"},{"type":"EnumItem","Name":"ConcertHall","tags":[],"Value":8,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Cave","tags":[],"Value":9,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Arena","tags":[],"Value":10,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Hangar","tags":[],"Value":11,"Enum":"ReverbType"},{"type":"EnumItem","Name":"CarpettedHallway","tags":[],"Value":12,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Hallway","tags":[],"Value":13,"Enum":"ReverbType"},{"type":"EnumItem","Name":"StoneCorridor","tags":[],"Value":14,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Alley","tags":[],"Value":15,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Forest","tags":[],"Value":16,"Enum":"ReverbType"},{"type":"EnumItem","Name":"City","tags":[],"Value":17,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Mountains","tags":[],"Value":18,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Quarry","tags":[],"Value":19,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Plain","tags":[],"Value":20,"Enum":"ReverbType"},{"type":"EnumItem","Name":"ParkingLot","tags":[],"Value":21,"Enum":"ReverbType"},{"type":"EnumItem","Name":"SewerPipe","tags":[],"Value":22,"Enum":"ReverbType"},{"type":"EnumItem","Name":"UnderWater","tags":[],"Value":23,"Enum":"ReverbType"},{"type":"Enum","Name":"RibbonTool","tags":[]},{"type":"EnumItem","Name":"Select","tags":[],"Value":0,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Scale","tags":[],"Value":1,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Rotate","tags":[],"Value":2,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Move","tags":[],"Value":3,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Transform","tags":[],"Value":4,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"ColorPicker","tags":[],"Value":5,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"MaterialPicker","tags":[],"Value":6,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Group","tags":[],"Value":7,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Ungroup","tags":[],"Value":8,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"None","tags":[],"Value":9,"Enum":"RibbonTool"},{"type":"Enum","Name":"RollOffMode","tags":[]},{"type":"EnumItem","Name":"Inverse","tags":[],"Value":0,"Enum":"RollOffMode"},{"type":"EnumItem","Name":"Linear","tags":[],"Value":1,"Enum":"RollOffMode"},{"type":"EnumItem","Name":"InverseTapered","tags":[],"Value":3,"Enum":"RollOffMode"},{"type":"EnumItem","Name":"LinearSquare","tags":[],"Value":2,"Enum":"RollOffMode"},{"type":"Enum","Name":"RotationType","tags":[]},{"type":"EnumItem","Name":"MovementRelative","tags":[],"Value":0,"Enum":"RotationType"},{"type":"EnumItem","Name":"CameraRelative","tags":[],"Value":1,"Enum":"RotationType"},{"type":"Enum","Name":"RuntimeUndoBehavior","tags":[]},{"type":"EnumItem","Name":"Aggregate","tags":[],"Value":0,"Enum":"RuntimeUndoBehavior"},{"type":"EnumItem","Name":"Snapshot","tags":[],"Value":1,"Enum":"RuntimeUndoBehavior"},{"type":"EnumItem","Name":"Hybrid","tags":[],"Value":2,"Enum":"RuntimeUndoBehavior"},{"type":"Enum","Name":"SaveFilter","tags":[]},{"type":"EnumItem","Name":"SaveAll","tags":[],"Value":2,"Enum":"SaveFilter"},{"type":"EnumItem","Name":"SaveWorld","tags":[],"Value":0,"Enum":"SaveFilter"},{"type":"EnumItem","Name":"SaveGame","tags":[],"Value":1,"Enum":"SaveFilter"},{"type":"Enum","Name":"SavedQualitySetting","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel1","tags":[],"Value":1,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel2","tags":[],"Value":2,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel3","tags":[],"Value":3,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel4","tags":[],"Value":4,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel5","tags":[],"Value":5,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel6","tags":[],"Value":6,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel7","tags":[],"Value":7,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel8","tags":[],"Value":8,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel9","tags":[],"Value":9,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel10","tags":[],"Value":10,"Enum":"SavedQualitySetting"},{"type":"Enum","Name":"ScaleType","tags":[]},{"type":"EnumItem","Name":"Stretch","tags":[],"Value":0,"Enum":"ScaleType"},{"type":"EnumItem","Name":"Slice","tags":[],"Value":1,"Enum":"ScaleType"},{"type":"EnumItem","Name":"Tile","tags":[],"Value":2,"Enum":"ScaleType"},{"type":"EnumItem","Name":"Fit","tags":[],"Value":3,"Enum":"ScaleType"},{"type":"EnumItem","Name":"Crop","tags":[],"Value":4,"Enum":"ScaleType"},{"type":"Enum","Name":"ScreenOrientation","tags":[]},{"type":"EnumItem","Name":"LandscapeLeft","tags":[],"Value":0,"Enum":"ScreenOrientation"},{"type":"EnumItem","Name":"LandscapeRight","tags":[],"Value":1,"Enum":"ScreenOrientation"},{"type":"EnumItem","Name":"LandscapeSensor","tags":[],"Value":2,"Enum":"ScreenOrientation"},{"type":"EnumItem","Name":"Portrait","tags":[],"Value":3,"Enum":"ScreenOrientation"},{"type":"EnumItem","Name":"Sensor","tags":[],"Value":4,"Enum":"ScreenOrientation"},{"type":"Enum","Name":"ScrollBarInset","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"ScrollBarInset"},{"type":"EnumItem","Name":"ScrollBar","tags":[],"Value":1,"Enum":"ScrollBarInset"},{"type":"EnumItem","Name":"Always","tags":[],"Value":2,"Enum":"ScrollBarInset"},{"type":"Enum","Name":"ScrollingDirection","tags":[]},{"type":"EnumItem","Name":"X","tags":[],"Value":1,"Enum":"ScrollingDirection"},{"type":"EnumItem","Name":"Y","tags":[],"Value":2,"Enum":"ScrollingDirection"},{"type":"EnumItem","Name":"XY","tags":[],"Value":4,"Enum":"ScrollingDirection"},{"type":"Enum","Name":"SizeConstraint","tags":[]},{"type":"EnumItem","Name":"RelativeXY","tags":[],"Value":0,"Enum":"SizeConstraint"},{"type":"EnumItem","Name":"RelativeXX","tags":[],"Value":1,"Enum":"SizeConstraint"},{"type":"EnumItem","Name":"RelativeYY","tags":[],"Value":2,"Enum":"SizeConstraint"},{"type":"Enum","Name":"SortOrder","tags":[]},{"type":"EnumItem","Name":"LayoutOrder","tags":[],"Value":2,"Enum":"SortOrder"},{"type":"EnumItem","Name":"Name","tags":[],"Value":0,"Enum":"SortOrder"},{"type":"EnumItem","Name":"Custom","tags":["deprecated"],"Value":1,"Enum":"SortOrder"},{"type":"Enum","Name":"SoundType","tags":[]},{"type":"EnumItem","Name":"NoSound","tags":[],"Value":0,"Enum":"SoundType"},{"type":"EnumItem","Name":"Boing","tags":[],"Value":1,"Enum":"SoundType"},{"type":"EnumItem","Name":"Bomb","tags":[],"Value":2,"Enum":"SoundType"},{"type":"EnumItem","Name":"Break","tags":[],"Value":3,"Enum":"SoundType"},{"type":"EnumItem","Name":"Click","tags":[],"Value":4,"Enum":"SoundType"},{"type":"EnumItem","Name":"Clock","tags":[],"Value":5,"Enum":"SoundType"},{"type":"EnumItem","Name":"Slingshot","tags":[],"Value":6,"Enum":"SoundType"},{"type":"EnumItem","Name":"Page","tags":[],"Value":7,"Enum":"SoundType"},{"type":"EnumItem","Name":"Ping","tags":[],"Value":8,"Enum":"SoundType"},{"type":"EnumItem","Name":"Snap","tags":[],"Value":9,"Enum":"SoundType"},{"type":"EnumItem","Name":"Splat","tags":[],"Value":10,"Enum":"SoundType"},{"type":"EnumItem","Name":"Step","tags":[],"Value":11,"Enum":"SoundType"},{"type":"EnumItem","Name":"StepOn","tags":[],"Value":12,"Enum":"SoundType"},{"type":"EnumItem","Name":"Swoosh","tags":[],"Value":13,"Enum":"SoundType"},{"type":"EnumItem","Name":"Victory","tags":[],"Value":14,"Enum":"SoundType"},{"type":"Enum","Name":"SpecialKey","tags":[]},{"type":"EnumItem","Name":"Insert","tags":[],"Value":0,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"Home","tags":[],"Value":1,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"End","tags":[],"Value":2,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"PageUp","tags":[],"Value":3,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"PageDown","tags":[],"Value":4,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"ChatHotkey","tags":[],"Value":5,"Enum":"SpecialKey"},{"type":"Enum","Name":"StartCorner","tags":[]},{"type":"EnumItem","Name":"TopLeft","tags":[],"Value":0,"Enum":"StartCorner"},{"type":"EnumItem","Name":"TopRight","tags":[],"Value":1,"Enum":"StartCorner"},{"type":"EnumItem","Name":"BottomLeft","tags":[],"Value":2,"Enum":"StartCorner"},{"type":"EnumItem","Name":"BottomRight","tags":[],"Value":3,"Enum":"StartCorner"},{"type":"Enum","Name":"Status","tags":[]},{"type":"EnumItem","Name":"Poison","tags":["deprecated"],"Value":0,"Enum":"Status"},{"type":"EnumItem","Name":"Confusion","tags":["deprecated"],"Value":1,"Enum":"Status"},{"type":"Enum","Name":"Style","tags":[]},{"type":"EnumItem","Name":"AlternatingSupports","tags":[],"Value":0,"Enum":"Style"},{"type":"EnumItem","Name":"BridgeStyleSupports","tags":[],"Value":1,"Enum":"Style"},{"type":"EnumItem","Name":"NoSupports","tags":[],"Value":2,"Enum":"Style"},{"type":"Enum","Name":"SurfaceConstraint","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"Hinge","tags":[],"Value":1,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"SteppingMotor","tags":[],"Value":2,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":3,"Enum":"SurfaceConstraint"},{"type":"Enum","Name":"SurfaceType","tags":[]},{"type":"EnumItem","Name":"Smooth","tags":[],"Value":0,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Glue","tags":[],"Value":1,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Weld","tags":[],"Value":2,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Studs","tags":[],"Value":3,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Inlet","tags":[],"Value":4,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Universal","tags":[],"Value":5,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Hinge","tags":[],"Value":6,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":7,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"SteppingMotor","tags":[],"Value":8,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"SmoothNoOutlines","tags":[],"Value":10,"Enum":"SurfaceType"},{"type":"Enum","Name":"SwipeDirection","tags":[]},{"type":"EnumItem","Name":"Right","tags":[],"Value":0,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Left","tags":[],"Value":1,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Up","tags":[],"Value":2,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Down","tags":[],"Value":3,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"None","tags":[],"Value":4,"Enum":"SwipeDirection"},{"type":"Enum","Name":"TableMajorAxis","tags":[]},{"type":"EnumItem","Name":"RowMajor","tags":[],"Value":0,"Enum":"TableMajorAxis"},{"type":"EnumItem","Name":"ColumnMajor","tags":[],"Value":1,"Enum":"TableMajorAxis"},{"type":"Enum","Name":"Technology","tags":[]},{"type":"EnumItem","Name":"Legacy","tags":[],"Value":0,"Enum":"Technology"},{"type":"EnumItem","Name":"Voxel","tags":[],"Value":1,"Enum":"Technology"},{"type":"Enum","Name":"TeleportResult","tags":[]},{"type":"EnumItem","Name":"Success","tags":[],"Value":0,"Enum":"TeleportResult"},{"type":"EnumItem","Name":"Failure","tags":[],"Value":1,"Enum":"TeleportResult"},{"type":"EnumItem","Name":"GameNotFound","tags":[],"Value":2,"Enum":"TeleportResult"},{"type":"EnumItem","Name":"GameEnded","tags":[],"Value":3,"Enum":"TeleportResult"},{"type":"EnumItem","Name":"GameFull","tags":[],"Value":4,"Enum":"TeleportResult"},{"type":"EnumItem","Name":"Unauthorized","tags":[],"Value":5,"Enum":"TeleportResult"},{"type":"EnumItem","Name":"Flooded","tags":[],"Value":6,"Enum":"TeleportResult"},{"type":"EnumItem","Name":"IsTeleporting","tags":[],"Value":7,"Enum":"TeleportResult"},{"type":"Enum","Name":"TeleportState","tags":[]},{"type":"EnumItem","Name":"RequestedFromServer","tags":[],"Value":0,"Enum":"TeleportState"},{"type":"EnumItem","Name":"Started","tags":[],"Value":1,"Enum":"TeleportState"},{"type":"EnumItem","Name":"WaitingForServer","tags":[],"Value":2,"Enum":"TeleportState"},{"type":"EnumItem","Name":"Failed","tags":[],"Value":3,"Enum":"TeleportState"},{"type":"EnumItem","Name":"InProgress","tags":[],"Value":4,"Enum":"TeleportState"},{"type":"Enum","Name":"TeleportType","tags":[]},{"type":"EnumItem","Name":"ToPlace","tags":[],"Value":0,"Enum":"TeleportType"},{"type":"EnumItem","Name":"ToInstance","tags":[],"Value":1,"Enum":"TeleportType"},{"type":"EnumItem","Name":"ToReservedServer","tags":[],"Value":2,"Enum":"TeleportType"},{"type":"Enum","Name":"TextFilterContext","tags":[]},{"type":"EnumItem","Name":"PublicChat","tags":[],"Value":1,"Enum":"TextFilterContext"},{"type":"EnumItem","Name":"PrivateChat","tags":[],"Value":2,"Enum":"TextFilterContext"},{"type":"Enum","Name":"TextTruncate","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"TextTruncate"},{"type":"EnumItem","Name":"AtEnd","tags":[],"Value":1,"Enum":"TextTruncate"},{"type":"Enum","Name":"TextXAlignment","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":0,"Enum":"TextXAlignment"},{"type":"EnumItem","Name":"Center","tags":[],"Value":2,"Enum":"TextXAlignment"},{"type":"EnumItem","Name":"Right","tags":[],"Value":1,"Enum":"TextXAlignment"},{"type":"Enum","Name":"TextYAlignment","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":0,"Enum":"TextYAlignment"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"TextYAlignment"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":2,"Enum":"TextYAlignment"},{"type":"Enum","Name":"TextureMode","tags":[]},{"type":"EnumItem","Name":"Stretch","tags":[],"Value":0,"Enum":"TextureMode"},{"type":"EnumItem","Name":"Wrap","tags":[],"Value":1,"Enum":"TextureMode"},{"type":"EnumItem","Name":"Static","tags":[],"Value":2,"Enum":"TextureMode"},{"type":"Enum","Name":"TextureQueryType","tags":[]},{"type":"EnumItem","Name":"NonHumanoid","tags":[],"Value":0,"Enum":"TextureQueryType"},{"type":"EnumItem","Name":"NonHumanoidOrphaned","tags":[],"Value":1,"Enum":"TextureQueryType"},{"type":"EnumItem","Name":"Humanoid","tags":[],"Value":2,"Enum":"TextureQueryType"},{"type":"EnumItem","Name":"HumanoidOrphaned","tags":[],"Value":3,"Enum":"TextureQueryType"},{"type":"Enum","Name":"ThreadPoolConfig","tags":[]},{"type":"EnumItem","Name":"Auto","tags":[],"Value":0,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore1","tags":[],"Value":101,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore2","tags":[],"Value":102,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore3","tags":[],"Value":103,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore4","tags":[],"Value":104,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads1","tags":[],"Value":1,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads2","tags":[],"Value":2,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads3","tags":[],"Value":3,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads4","tags":[],"Value":4,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads8","tags":[],"Value":8,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads16","tags":[],"Value":16,"Enum":"ThreadPoolConfig"},{"type":"Enum","Name":"ThrottlingPriority","tags":[]},{"type":"EnumItem","Name":"Extreme","tags":[],"Value":2,"Enum":"ThrottlingPriority"},{"type":"EnumItem","Name":"ElevatedOnServer","tags":[],"Value":1,"Enum":"ThrottlingPriority"},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ThrottlingPriority"},{"type":"Enum","Name":"ThumbnailSize","tags":[]},{"type":"EnumItem","Name":"Size48x48","tags":[],"Value":0,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size180x180","tags":[],"Value":1,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size420x420","tags":[],"Value":2,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size60x60","tags":[],"Value":3,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size100x100","tags":[],"Value":4,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size150x150","tags":[],"Value":5,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size352x352","tags":[],"Value":6,"Enum":"ThumbnailSize"},{"type":"Enum","Name":"ThumbnailType","tags":[]},{"type":"EnumItem","Name":"HeadShot","tags":[],"Value":0,"Enum":"ThumbnailType"},{"type":"EnumItem","Name":"AvatarBust","tags":[],"Value":1,"Enum":"ThumbnailType"},{"type":"EnumItem","Name":"AvatarThumbnail","tags":[],"Value":2,"Enum":"ThumbnailType"},{"type":"Enum","Name":"TickCountSampleMethod","tags":[]},{"type":"EnumItem","Name":"Fast","tags":[],"Value":0,"Enum":"TickCountSampleMethod"},{"type":"EnumItem","Name":"Benchmark","tags":[],"Value":1,"Enum":"TickCountSampleMethod"},{"type":"EnumItem","Name":"Precise","tags":[],"Value":2,"Enum":"TickCountSampleMethod"},{"type":"Enum","Name":"TopBottom","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":0,"Enum":"TopBottom"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"TopBottom"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":2,"Enum":"TopBottom"},{"type":"Enum","Name":"TouchCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"TouchCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"TouchCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"TouchCameraMovementMode"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":3,"Enum":"TouchCameraMovementMode"},{"type":"Enum","Name":"TouchMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"Thumbstick","tags":[],"Value":1,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"DPad","tags":[],"Value":2,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"Thumbpad","tags":[],"Value":3,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":4,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"DynamicThumbstick","tags":[],"Value":5,"Enum":"TouchMovementMode"},{"type":"Enum","Name":"TweenStatus","tags":[]},{"type":"EnumItem","Name":"Canceled","tags":[],"Value":0,"Enum":"TweenStatus"},{"type":"EnumItem","Name":"Completed","tags":[],"Value":1,"Enum":"TweenStatus"},{"type":"Enum","Name":"UiMessageType","tags":[]},{"type":"EnumItem","Name":"UiMessageError","tags":[],"Value":0,"Enum":"UiMessageType"},{"type":"EnumItem","Name":"UiMessageInfo","tags":[],"Value":1,"Enum":"UiMessageType"},{"type":"Enum","Name":"UploadSetting","tags":[]},{"type":"EnumItem","Name":"Never","tags":[],"Value":0,"Enum":"UploadSetting"},{"type":"EnumItem","Name":"Ask","tags":[],"Value":1,"Enum":"UploadSetting"},{"type":"EnumItem","Name":"Always","tags":[],"Value":2,"Enum":"UploadSetting"},{"type":"Enum","Name":"UserCFrame","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"UserCFrame"},{"type":"EnumItem","Name":"LeftHand","tags":[],"Value":1,"Enum":"UserCFrame"},{"type":"EnumItem","Name":"RightHand","tags":[],"Value":2,"Enum":"UserCFrame"},{"type":"Enum","Name":"UserInputState","tags":[]},{"type":"EnumItem","Name":"Begin","tags":[],"Value":0,"Enum":"UserInputState"},{"type":"EnumItem","Name":"Change","tags":[],"Value":1,"Enum":"UserInputState"},{"type":"EnumItem","Name":"End","tags":[],"Value":2,"Enum":"UserInputState"},{"type":"EnumItem","Name":"Cancel","tags":[],"Value":3,"Enum":"UserInputState"},{"type":"EnumItem","Name":"None","tags":[],"Value":4,"Enum":"UserInputState"},{"type":"Enum","Name":"UserInputType","tags":[]},{"type":"EnumItem","Name":"MouseButton1","tags":[],"Value":0,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseButton2","tags":[],"Value":1,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseButton3","tags":[],"Value":2,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseWheel","tags":[],"Value":3,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseMovement","tags":[],"Value":4,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Touch","tags":[],"Value":7,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Keyboard","tags":[],"Value":8,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Focus","tags":[],"Value":9,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Accelerometer","tags":[],"Value":10,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gyro","tags":[],"Value":11,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad1","tags":[],"Value":12,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad2","tags":[],"Value":13,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad3","tags":[],"Value":14,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad4","tags":[],"Value":15,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad5","tags":[],"Value":16,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad6","tags":[],"Value":17,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad7","tags":[],"Value":18,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad8","tags":[],"Value":19,"Enum":"UserInputType"},{"type":"EnumItem","Name":"TextInput","tags":[],"Value":20,"Enum":"UserInputType"},{"type":"EnumItem","Name":"None","tags":[],"Value":21,"Enum":"UserInputType"},{"type":"Enum","Name":"VRTouchpad","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":0,"Enum":"VRTouchpad"},{"type":"EnumItem","Name":"Right","tags":[],"Value":1,"Enum":"VRTouchpad"},{"type":"Enum","Name":"VRTouchpadMode","tags":[]},{"type":"EnumItem","Name":"Touch","tags":[],"Value":0,"Enum":"VRTouchpadMode"},{"type":"EnumItem","Name":"VirtualThumbstick","tags":[],"Value":1,"Enum":"VRTouchpadMode"},{"type":"EnumItem","Name":"ABXY","tags":[],"Value":2,"Enum":"VRTouchpadMode"},{"type":"Enum","Name":"VerticalAlignment","tags":[]},{"type":"EnumItem","Name":"Center","tags":[],"Value":0,"Enum":"VerticalAlignment"},{"type":"EnumItem","Name":"Top","tags":[],"Value":1,"Enum":"VerticalAlignment"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":2,"Enum":"VerticalAlignment"},{"type":"Enum","Name":"VerticalScrollBarPosition","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":1,"Enum":"VerticalScrollBarPosition"},{"type":"EnumItem","Name":"Right","tags":[],"Value":0,"Enum":"VerticalScrollBarPosition"},{"type":"Enum","Name":"VibrationMotor","tags":[]},{"type":"EnumItem","Name":"Large","tags":[],"Value":0,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"Small","tags":[],"Value":1,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"LeftTrigger","tags":[],"Value":2,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"RightTrigger","tags":[],"Value":3,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"LeftHand","tags":[],"Value":4,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"RightHand","tags":[],"Value":5,"Enum":"VibrationMotor"},{"type":"Enum","Name":"VideoQualitySettings","tags":[]},{"type":"EnumItem","Name":"LowResolution","tags":[],"Value":0,"Enum":"VideoQualitySettings"},{"type":"EnumItem","Name":"MediumResolution","tags":[],"Value":1,"Enum":"VideoQualitySettings"},{"type":"EnumItem","Name":"HighResolution","tags":[],"Value":2,"Enum":"VideoQualitySettings"},{"type":"Enum","Name":"VirtualInputMode","tags":[]},{"type":"EnumItem","Name":"Recording","tags":[],"Value":1,"Enum":"VirtualInputMode"},{"type":"EnumItem","Name":"Playing","tags":[],"Value":2,"Enum":"VirtualInputMode"},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"VirtualInputMode"},{"type":"Enum","Name":"WaterDirection","tags":[]},{"type":"EnumItem","Name":"NegX","tags":[],"Value":0,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"X","tags":[],"Value":1,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"NegY","tags":[],"Value":2,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"Y","tags":[],"Value":3,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"NegZ","tags":[],"Value":4,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"Z","tags":[],"Value":5,"Enum":"WaterDirection"},{"type":"Enum","Name":"WaterForce","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Small","tags":[],"Value":1,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Medium","tags":[],"Value":2,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Strong","tags":[],"Value":3,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Max","tags":[],"Value":4,"Enum":"WaterForce"},{"type":"Enum","Name":"ZIndexBehavior","tags":[]},{"type":"EnumItem","Name":"Global","tags":[],"Value":0,"Enum":"ZIndexBehavior"},{"type":"EnumItem","Name":"Sibling","tags":[],"Value":1,"Enum":"ZIndexBehavior"}]
]===]

return function() return json end;
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="BindableFunction" referent="RBX91F42A251E204D36A24CC454EF3A863A">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetAwaiting</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX4A3C6A8088CB426BA5B4A57E921994C0">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetApi</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableEvent" referent="RBXF85D8320CFA147069AA29D5AD1F68138">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SetAwaiting</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Frame" referent="RBX18FD98A2BB224F5D98A677C99DA84024">
			<Properties>
				<bool name="Active">false</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.145098045</R>
					<G>0.145098045</G>
					<B>0.164705887</B>
				</Color3>
				<float name="BackgroundTransparency">0.100000001</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">ExplorerPanel</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>0</XO>
					<YS>0</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>300</XO>
					<YS>0.5</YS>
					<YO>0</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">true</bool>
				<int name="ZIndex">1</int>
			</Properties>
			<Item class="LocalScript" referent="RBX434DC48D0AC44B1983757D52CB66214C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">true</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Exploring</string>
					<string name="ScriptGuid">{AE0ED51C-AE2F-40E6-B5E1-DAFCD45D7859}</string>
					<ProtectedString name="Source"><![CDATA[-- < Aliases > --
local game = game
local workspace = workspace
local pcall = pcall
local unpack = unpack
local next = next
local tick = tick
local ipairs = ipairs
local script = script
local tostring = tostring
local type = type
local typeof = typeof
local Instance_new = Instance.new
local UDim2_new = UDim2.new
local Vector2_new = Vector2.new
local Vector3_new = Vector3.new
local NumberRange_new = NumberRange.new
local Color3_new = Color3.new
local Color3_fromRGB = Color3.fromRGB
local table_insert = table.insert
local table_remove = table.remove
local table_sort = table.sort
local table_concat = table.concat
local table_clear = table.clear
local string_split = string.split
local string_find = string.find
local string_match = string.match
local string_lower = string.lower
local string_sub = string.sub
local string_byte = string.byte
local string_gsub = string.gsub
local string_rep = string.rep
local math_floor = math.floor
local math_ceil = math.ceil
local math_random = math.random
local math_huge = math.huge
-- < Services > --
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
-- < Class Aliases > --
local IsA = game.IsA
local ClearAllChildren = game.ClearAllChildren
local IsAncestorOf = game.IsAncestorOf
local WaitForChild = game.WaitForChild
local FindFirstChildOfClass = game.FindFirstChildOfClass
local GetPropertyChangedSignal = game.GetPropertyChangedSignal
local GetChildren = game.GetChildren
local GetDescendants = game.GetDescendants
local Clone = game.Clone
local Destroy = game.Destroy
local Wait, Connect, Disconnect = (function()
	local A = game.Changed
	local B = A.Connect
	local C = B(A, function()end)
	local D = C.Disconnect
	D(C)
	return A.Wait, B, D
end)()
-- < Upvalues > --
local RenderStepped = RunService.RenderStepped
local Bindables = WaitForChild(script.Parent.Parent, "Bindables", 300)
local GetSpecials_Bindable = WaitForChild(Bindables, "GetSpecials", 300)
local GetSetting_Bindable = WaitForChild(Bindables, "GetSetting", 300)
local GetOption_Bindable = WaitForChild(Bindables, "GetOption", 300)
local GetAwaiting_Bindable = WaitForChild(Bindables, "GetAwaiting", 300)
local GetSelection_Bindable = WaitForChild(Bindables, "GetSelection", 300)
local GetApi_Bindable = WaitForChild(Bindables, "GetApi", 300)
local GetPrint_Bindable = WaitForChild(Bindables, "GetPrint", 300)
local OpenScript_Bindable = WaitForChild(Bindables, "OpenScript", 300)
local SelectionChanged_Bindable = WaitForChild(Bindables, "SelectionChanged", 300)
local SetAwaiting_Bindable = WaitForChild(Bindables, "SetAwaiting", 300)
local SetOption_Bindable = WaitForChild(Bindables, "SetOption", 300)
local SetSelection_Bindable = WaitForChild(Bindables, "SetSelection", 300)
local Specials = GetSpecials_Bindable:Invoke()
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Option = {
	Modifiable = true, -- can modify object parents in the hierarchy
	Selectable = true -- can select objects
}
local GUI_SIZE = 16 -- general size of GUI objects, in pixels
local ENTRY_PADDING, ENTRY_MARGIN = 1, 1 -- padding between items within each entry and padding between each entry
local explorerPanel = script.Parent
local Dex = explorerPanel.Parent
local HoldingCtrl, HoldingShift = false, false
-- < Custom Aliases > --
local getinstancelist = Specials.getinstancelist
local writeinstance = Specials.writeinstance
local fireclickdetector = Specials.fireclickdetector
local firetouchinterest = Specials.firetouchinterest
local fireproximityprompt = Specials.fireproximityprompt
local wait = function(p1)
	local A = p1 and p1 or 0
	if A ~= 0 then
		for B = 0, A * 60 do
			Wait(RenderStepped)
		end
	end
	return
end
-- < Source > --
local DexOutput, DexOutputMain = Instance_new("Folder"), Instance_new("ScreenGui")
DexOutput.Name = "Output"
DexOutputMain.Name = "Dex Output"
DexOutputMain.Parent = DexOutput

local print = function(...)
	local A = Instance_new("Dialog")
	for _,v in next, {...} do
		A.Name = tostring(v) .. " "
	end
	A.Parent = DexOutputMain
end

GetPrint_Bindable.OnInvoke = function() 
	return print 
end

local ENTRY_SIZE = GUI_SIZE + ENTRY_PADDING * 2
local ENTRY_BOUND = ENTRY_SIZE + ENTRY_MARGIN
local HEADER_SIZE = ENTRY_SIZE * 2

local FONT = 'SourceSans'
local FONT_SIZE 

do
	local size,s,n = {8,9,10,11,12,14,18,24,36,48}, nil, math_huge
	for i = 1, #size do
		if size[i] <= GUI_SIZE then
			FONT_SIZE = i - 1
		end
	end
end

local GuiColor = {
	Background = Color3_fromRGB(37, 37, 42),
	Border = Color3_fromRGB(20, 20, 25),
	Selected = Color3_fromRGB(5, 100, 145),
	BorderSelected = Color3_fromRGB(2, 125, 145),
	Text = Color3_fromRGB(245, 245, 250),
	TextDisabled = Color3_fromRGB(190, 190, 195),
	TextSelected = Color3_fromRGB(255, 255, 255),
	Button = Color3_fromRGB(31, 31, 35),
	ButtonBorder = Color3_fromRGB(135, 135, 140),
	ButtonSelected = Color3_fromRGB(0, 170, 155),
	Field = Color3_fromRGB(37, 37, 42),
	FieldBorder = Color3_fromRGB(50, 50, 55),
	TitleBackground = Color3_fromRGB(10, 10, 15)
}
-- Icon map constants
local ActionTextures = {
	Copy = {"rbxasset://textures/TerrainTools/icon_regions_copy.png","rbxasset://textures/TerrainTools/icon_regions_copy.png"},
	Paste = {"rbxasset://textures/TerrainTools/icon_regions_paste.png","rbxasset://textures/TerrainTools/icon_regions_paste.png"},
	Delete = {"rbxasset://textures/TerrainTools/icon_regions_delete.png","rbxasset://textures/TerrainTools/icon_regions_delete.png"},
	Starred = {"rbxasset://textures/StudioToolbox/AssetPreview/star_filled.png","rbxasset://textures/StudioToolbox/AssetPreview/star_filled.png"},
	AddStar = {"rbxasset://textures/StudioToolbox/AssetPreview/star_stroke.png","rbxasset://textures/StudioToolbox/AssetPreview/star_stroke.png"}
}

local NodeTextures = {"rbxasset://textures/AnimationEditor/btn_expand.png", "rbxasset://textures/AnimationEditor/btn_collapse.png"}

local ExplorerIndex, ReflectionMetadata = {
	ValueBase = 4,
	DataModelMesh = 8,
	SurfaceAppearance = 10,
	BodyMover = 14,
	WorldRoot = 19,
	CorePackages = 20,
	UIComponent = 26,
	Atmosphere = 28,
	NetworkReplicator = 29,
	JointsService = 34,
	BasePlayerGui = 46,
	PluginDebugService = 46,
	RobloxPluginGuiService = 46,
	SelectionLasso = 57,
	RobloxReplicatedStorage = 70,
	StandalonePluginScripts = 78,
	PostEffect = 83,
	SoundEffect = 84,
	Plugin = 86,
	Motor6D = 106,
	LineHandleAdornment = 107,
	ImageHandleAdornment = 108,
	CylinderHandleAdornment = 109,
	ConeHandleAdornment = 110,
	BoxHandleAdornment = 111,
	SphereHandleAdornment = 112,
	ReplicatedScriptService = 113,
	Bone = 114,
	VideoFrame = 120
}, "https://anaminus.github.io/rbx/json/rmd/latest.json"

for _, Metadata in next, HttpService:JSONDecode(game:HttpGetAsync(ReflectionMetadata)) do
	if Metadata.ExplorerImageIndex > 0 and Metadata.ExplorerImageIndex <= 120 then
		ExplorerIndex[Metadata.Name] = Metadata.ExplorerImageIndex
	end
end

local function Create(p1, p2)
	local A = type(p1) == 'string' and Instance_new(p1) or p1
	for B, C in next, p2 do
		if type(B) == 'number' then
			C.Parent = A
		else
			A[B] = C
		end
	end
	return A
end

local barActive, activeOptions = false, {}

local function createDDown(dBut, callback,...)
	if barActive then
		for _,v in next, activeOptions do 
			Destroy(v)
		end
		table_clear(activeOptions)
		barActive = false
		return
	else
		barActive = true
	end
	local slots, base = {...}, dBut
	for i,v in next, slots do
		local newOption = Clone(base)
		newOption.ZIndex = 2
		newOption.Name = "Option " .. tostring(i)
		newOption.BackgroundTransparency = 0
		table_insert(activeOptions, newOption)
		newOption.Position = UDim2_new(-.4, dBut.Position.X.Offset, dBut.Position.Y.Scale, dBut.Position.Y.Offset + (#activeOptions * dBut.Size.Y.Offset))
		newOption.Text = slots[i]
		newOption.Parent = base.Parent.Parent.Parent
		Connect(newOption.MouseButton1Down, function()
			dBut.Text = slots[i]
			callback(slots[i])
			for _,v in next, activeOptions do
				Destroy(v)
			end
			table_clear(activeOptions)
			barActive = false
		end)
	end
end

local function EventConnect(event,func)
	return Connect(event, function(...)
		local a = {...}
		pcall(function()
			func(unpack(a))
		end)
	end)
end

function GetScreen(screen)
	if screen == nil then return nil end
	while not IsA(screen, "ScreenGui") do
		screen = screen.Parent
		if screen == nil then return nil end
	end
	return screen
end

do
	local ZIndexLock = {}
	local function SetZIndex(object,z)
		if not ZIndexLock[object] then
			ZIndexLock[object] = true
			if IsA(object, 'GuiObject') then
				object.ZIndex = z
			end
			local children = GetChildren(object)
			for i = 1,#children do
				SetZIndex(children[i],z)
			end
			ZIndexLock[object] = nil
		end
	end
	function SetZIndexOnChanged(object)
		return Connect(GetPropertyChangedSignal(object, "ZIndex"), function()
			SetZIndex(object, object.ZIndex)
		end)
	end
end

local Icon 
do
	local iconMap = 'rbxasset://textures/ClassImages.png'

	function Icon(IconFrame,index)
		local mapSize = Vector2_new(1920,16)
		local iconSize = 16
		local class = 'Frame'
		if type(IconFrame) == 'string' then
			class = IconFrame
			IconFrame = nil
		end
		if not IconFrame then
			IconFrame = Create(class,{
				Name = "IconFrame",
				BackgroundTransparency = 1,
				ClipsDescendants = true,
				Create('ImageLabel',{
					Name = "IconMap",
					Active = false,
					BackgroundTransparency = 1,
					Image = iconMap,
					Size = UDim2_new(0,iconSize,0,mapSize.Y)
				})
			})
		end
		local IconMap = WaitForChild(IconFrame, "IconMap", 300)
		IconMap.ImageRectOffset = Vector2_new(iconSize * index,0)
		IconMap.ImageRectSize = Vector2_new(iconSize, iconSize)
		return IconFrame
	end
end

function SpecialIcon(IconFrame,texture,iconSize)
	local class = 'Frame'
	if type(IconFrame) == 'string' then
		class = IconFrame
		IconFrame = nil
	end
	if not IconFrame then
		IconFrame = Create(class,{
			Name = "IconFrame",
			BackgroundTransparency = 1,
			ClipsDescendants = true,
			Create('ImageLabel',{
				Name = "SpecialIcon",
				Active = true,
				BackgroundTransparency = 1,
				Image = texture,
				Size = iconSize or UDim2_new(0,16,0,16)
			})
		})
	end
	return IconFrame
end

do
	local function ResetButtonColor(button)
		local active = button.Active
		button.Active = not active
		button.Active = active
	end

	local function ArrowGraphic(size,dir,scaled,template)
		local Frame = Create('Frame',{
			Name = "Arrow Graphic",
			BorderSizePixel = 0,
			Size = UDim2_new(0,size,0,size),
			Transparency = 1
		})

		if not template then
			template = Create('Frame',{
				BorderSizePixel = 0
			})
		end

		template.BackgroundColor3 = Color3_new(1, 1, 1)

		local transform
		if dir == nil or dir == 'Up' then
			function transform(p,s) return p,s end
		elseif dir == 'Down' then
			function transform(p,s) return UDim2_new(0,p.X.Offset,0,size-p.Y.Offset-1),s end
		elseif dir == 'Left' then
			function transform(p,s) return UDim2_new(0,p.Y.Offset,0,p.X.Offset),UDim2_new(0,s.Y.Offset,0,s.X.Offset) end
		elseif dir == 'Right' then
			function transform(p,s) return UDim2_new(0,size-p.Y.Offset-1,0,p.X.Offset),UDim2_new(0,s.Y.Offset,0,s.X.Offset) end
		end

		local scale
		if scaled then
			function scale(p,s) return UDim2_new(p.X.Offset/size,0,p.Y.Offset/size,0),UDim2_new(s.X.Offset/size,0,s.Y.Offset/size,0) end
		else
			function scale(p,s) return p,s end
		end

		local o = math_floor(size/4)
		if size%2 == 0 then
			local n = size/2-1
			for i = 0,n do
				local t = Clone(template)
				local p,s = scale(transform(
					UDim2_new(0,n-i,0,o+i),
					UDim2_new(0,(i+1)*2,0,1)
					))
				t.Position = p
				t.Size = s
				t.Parent = Frame
			end
		else
			local n = (size-1)/2
			for i = 0,n do
				local t = Clone(template)
				local p,s = scale(transform(
					UDim2_new(0,n-i,0,o+i),
					UDim2_new(0,i*2+1,0,1)
					))
				t.Position = p
				t.Size = s
				t.Parent = Frame
			end
		end
		if size%4 > 1 then
			local t = Clone(template)
			local p,s = scale(transform(
				UDim2_new(0,0,0,size-o-1),
				UDim2_new(0,size,0,1)
				))
			t.Position = p
			t.Size = s
			t.Parent = Frame
		end

		for _, v in ipairs(GetChildren(Frame)) do
			v.BackgroundColor3 = Color3_new(1, 1, 1)
		end

		return Frame
	end

	local function GripGraphic(size,dir,spacing,scaled,template)
		local Frame = Create('Frame',{
			Name = "Grip Graphic",
			BorderSizePixel = 0,
			Size = UDim2_new(0,size.X,0,size.Y),
			Transparency = 1
		})

		if not template then
			template = Create('Frame',{
				BorderSizePixel = 0
			})
		end

		spacing = spacing or 2

		local scale = function(p)
			return scaled and UDim2_new(p.X.Offset / size.X, 0, p.Y.Offset / size.Y, 0) or p
		end

		if dir == 'Vertical' then
			for i=0,size.X-1,spacing do
				local t = Clone(template)
				t.Size = scale(UDim2_new(0,1,0, size.Y))
				t.Position = scale(UDim2_new(0,i,0,0))
				t.Parent = Frame
			end
		elseif dir == nil or dir == 'Horizontal' then
			for i=0,size.Y-1,spacing do
				local t = Clone(template)
				t.Size = scale(UDim2_new(0,size.X,0,1))
				t.Position = scale(UDim2_new(0,0,0,i))
				t.Parent = Frame
			end
		end

		return Frame
	end

	function ScrollBar(horizontal)
		local ScrollFrame = Create('Frame',{
			Name = "ScrollFrame",
			BorderSizePixel = 0,
			Position = horizontal and UDim2_new(0,0,1,-GUI_SIZE) or UDim2_new(1,-GUI_SIZE,0,0),
			Size = horizontal and UDim2_new(1,0,0,GUI_SIZE) or UDim2_new(0,GUI_SIZE,1,0),
			BackgroundTransparency = 1,
			Create('ImageButton',{
				Name = "ScrollDown",
				Position = horizontal and UDim2_new(1,-GUI_SIZE,0,0) or UDim2_new(0,0,1,-GUI_SIZE),
				Size = UDim2_new(0, GUI_SIZE, 0, GUI_SIZE),
				BackgroundColor3 = GuiColor.Button,
				BorderColor3 = GuiColor.Border
			}),
			Create('ImageButton',{
				Name = "ScrollUp",
				Size = UDim2_new(0, GUI_SIZE, 0, GUI_SIZE),
				BackgroundColor3 = GuiColor.Button,
				BorderColor3 = GuiColor.Border
			}),
			Create('ImageButton',{
				Name = "ScrollBar",
				Size = horizontal and UDim2_new(1,-GUI_SIZE*2,1,0) or UDim2_new(1,0,1,-GUI_SIZE*2),
				Position = horizontal and UDim2_new(0,GUI_SIZE,0,0) or UDim2_new(0,0,0,GUI_SIZE),
				AutoButtonColor = false,
				BackgroundColor3 = Color3_new(1/4, 1/4, 1/4),
				BorderColor3 = GuiColor.Border,
				Create('ImageButton',{
					Name = "ScrollThumb",
					AutoButtonColor = false,
					Size = UDim2_new(0, GUI_SIZE, 0, GUI_SIZE),
					BackgroundColor3 = GuiColor.Button,
					BorderColor3 = GuiColor.Border
				})
			})
		})

		local graphicTemplate = Create('Frame',{
			Name="Graphic",
			BorderSizePixel = 0,
			BackgroundColor3 = GuiColor.Border
		})
		local graphicSize = GUI_SIZE/2

		local ScrollDownFrame = ScrollFrame.ScrollDown
		local ScrollDownGraphic = ArrowGraphic(graphicSize,horizontal and 'Right' or 'Down',true,graphicTemplate)
		ScrollDownGraphic.Position = UDim2_new(.5,-graphicSize/2,.5,-graphicSize/2)
		ScrollDownGraphic.Parent = ScrollDownFrame
		local ScrollUpFrame = ScrollFrame.ScrollUp
		local ScrollUpGraphic = ArrowGraphic(graphicSize,horizontal and 'Left' or 'Up',true,graphicTemplate)
		ScrollUpGraphic.Position = UDim2_new(.5,-graphicSize/2,.5,-graphicSize/2)
		ScrollUpGraphic.Parent = ScrollUpFrame
		local ScrollBarFrame = ScrollFrame.ScrollBar
		local ScrollThumbFrame = ScrollBarFrame.ScrollThumb
		do
			local size = GUI_SIZE*3/8
			local Decal = GripGraphic(Vector2_new(size,size),horizontal and 'Vertical' or 'Horizontal',2,graphicTemplate)
			Decal.Position = UDim2_new(.5,-size/2,.5,-size/2)
			Decal.Parent = ScrollThumbFrame
		end

		local Class = setmetatable({
			GUI = ScrollFrame,
			ScrollIndex = 0,
			VisibleSpace = 0,
			TotalSpace = 0,
			PageIncrement = 1
		},{
			__index = {
				GetScrollPercent = function(self)
					return self.ScrollIndex/(self.TotalSpace-self.VisibleSpace)
				end,
				CanScrollDown = function(self)
					return self.ScrollIndex + self.VisibleSpace < self.TotalSpace
				end,
				CanScrollUp = function(self)
					return self.ScrollIndex > 0
				end,
				CanScrollRight = function(self)
					return self.ScrollIndex + self.VisibleSpace < self.TotalSpace
				end,
				CanScrollLeft = function(self)
					return self.ScrollIndex > 0
				end,
				ScrollDown = function(self)
					self.ScrollIndex += self.PageIncrement
					self:Update()
				end,
				ScrollUp = function(self)
					self.ScrollIndex -= self.PageIncrement
					self:Update()
				end,
				ScrollRight = function(self)
					self.ScrollIndex += self.PageIncrement
					self:Update()
				end,
				ScrollLeft = function(self)
					self.ScrollIndex -= self.PageIncrement
					self:Update()
				end,
				ScrollTo = function(self,index)
					self.ScrollIndex = index
					self:Update()
				end,
				SetScrollPercent = function(self,percent)
					self.ScrollIndex = math_floor((self.TotalSpace - self.VisibleSpace)*percent + .5)
					self:Update()
				end
			}
		})

		local UpdateScrollThumb
		if horizontal then
			function UpdateScrollThumb()
				ScrollThumbFrame.Size = UDim2_new(Class.VisibleSpace/Class.TotalSpace,0,0,GUI_SIZE)
				if ScrollThumbFrame.AbsoluteSize.X < GUI_SIZE then
					ScrollThumbFrame.Size = UDim2_new(0,GUI_SIZE,0,GUI_SIZE)
				end
				local barSize = ScrollBarFrame.AbsoluteSize.X
				ScrollThumbFrame.Position = UDim2_new(Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.X)/barSize,0,0,0)
			end
		else
			function UpdateScrollThumb()
				ScrollThumbFrame.Size = UDim2_new(0,GUI_SIZE,Class.VisibleSpace/Class.TotalSpace,0)
				if ScrollThumbFrame.AbsoluteSize.Y < GUI_SIZE then
					ScrollThumbFrame.Size = UDim2_new(0,GUI_SIZE,0,GUI_SIZE)
				end
				local barSize = ScrollBarFrame.AbsoluteSize.Y
				ScrollThumbFrame.Position = UDim2_new(0,0,Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.Y)/barSize,0)
			end
		end

		local lastDown, lastUp
		local scrollStyle = {BackgroundColor3=Color3_new(1, 1, 1),BackgroundTransparency=0}
		local scrollStyle_ds = {BackgroundColor3=Color3_new(1, 1, 1),BackgroundTransparency=.7}

		local function Update()
			local t, v, s = Class.TotalSpace, Class.VisibleSpace, Class.ScrollIndex
			if v <= t then
				if s > 0 then
					if s + v > t then
						Class.ScrollIndex = t - v
					end
				else
					Class.ScrollIndex = 0
				end
			else
				Class.ScrollIndex = 0
			end

			if Class.UpdateCallback then
				if Class.UpdateCallback(Class) == false then
					return
				end
			end

			local down = Class:CanScrollDown()
			local up = Class:CanScrollUp()
			if down ~= lastDown then
				lastDown = down
				ScrollDownFrame.Active = down
				ScrollDownFrame.AutoButtonColor = down
				local children = GetChildren(ScrollDownGraphic)
				local style = down and scrollStyle or scrollStyle_ds
				for i = 1,#children do
					Create(children[i],style)
				end
			end
			if up ~= lastUp then
				lastUp = up
				ScrollUpFrame.Active = up
				ScrollUpFrame.AutoButtonColor = up
				local children = GetChildren(ScrollUpGraphic)
				local style = up and scrollStyle or scrollStyle_ds
				for i = 1,#children do
					Create(children[i],style)
				end
			end
			ScrollThumbFrame.Visible = down or up
			UpdateScrollThumb()
		end
		Class.Update = Update

		SetZIndexOnChanged(ScrollFrame)

		local MouseDrag = Create('ImageButton',{
			Name = "MouseDrag",
			Position = UDim2_new(-.25,0,-.25,0),
			Size = UDim2_new(1.5,0,1.5,0),
			Transparency = 1,
			AutoButtonColor = false,
			Active = true,
			ZIndex = 10
		})

		local scrollEventID = 0
		Connect(ScrollDownFrame.MouseButton1Down, function()
			scrollEventID = tick()
			local current = scrollEventID
			local up_con
			up_con = Connect(MouseDrag.MouseButton1Up, function()
				scrollEventID = tick()
				MouseDrag.Parent = nil
				ResetButtonColor(ScrollDownFrame)
				Disconnect(up_con)
				drag = nil
			end)
			MouseDrag.Parent = GetScreen(ScrollFrame)
			Class:ScrollDown()
			wait(.2)
			while scrollEventID == current do
				Class:ScrollDown()
				if not Class:CanScrollDown() then break end
				wait()
			end
		end)

		Connect(ScrollDownFrame.MouseButton1Up, function()
			scrollEventID = tick()
		end)

		Connect(ScrollUpFrame.MouseButton1Down, function()
			scrollEventID = tick()
			local current = scrollEventID
			local up_con
			up_con = Connect(MouseDrag.MouseButton1Up, function()
				scrollEventID = tick()
				MouseDrag.Parent = nil
				ResetButtonColor(ScrollUpFrame)
				Disconnect(up_con)
				drag = nil
			end)
			MouseDrag.Parent = GetScreen(ScrollFrame)
			Class:ScrollUp()
			wait(.2)
			while scrollEventID == current do
				Class:ScrollUp()
				if not Class:CanScrollUp() then break end
				wait()
			end
		end)

		Connect(ScrollUpFrame.MouseButton1Up, function()
			scrollEventID = tick()
		end)

		if horizontal then
			Connect(ScrollBarFrame.MouseButton1Down, function(x,y)
				scrollEventID = tick()
				local current = scrollEventID
				local up_con
				up_con = Connect(MouseDrag.MouseButton1Up, function()
					scrollEventID = tick()
					MouseDrag.Parent = nil
					ResetButtonColor(ScrollUpFrame)
					Disconnect(up_con)
					drag = nil
				end)
				MouseDrag.Parent = GetScreen(ScrollFrame)
				if x > ScrollThumbFrame.AbsolutePosition.X then
					Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
					wait(.2)
					while scrollEventID == current do
						if x < ScrollThumbFrame.AbsolutePosition.X + ScrollThumbFrame.AbsoluteSize.X then break end
						Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
						wait()
					end
				else
					Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
					wait(.2)
					while scrollEventID == current do
						if x > ScrollThumbFrame.AbsolutePosition.X then break end
						Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
						wait()
					end
				end
			end)
		else
			Connect(ScrollBarFrame.MouseButton1Down, function(x,y)
				scrollEventID = tick()
				local current = scrollEventID
				local up_con
				up_con = Connect(MouseDrag.MouseButton1Up, function()
					scrollEventID = tick()
					MouseDrag.Parent = nil
					ResetButtonColor(ScrollUpFrame)
					Disconnect(up_con)
					drag = nil
				end)
				MouseDrag.Parent = GetScreen(ScrollFrame)
				if y > ScrollThumbFrame.AbsolutePosition.Y then
					Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
					wait(.2)
					while scrollEventID == current do
						if y < ScrollThumbFrame.AbsolutePosition.Y + ScrollThumbFrame.AbsoluteSize.Y then break end
						Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
						wait()
					end
				else
					Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
					wait(.2)
					while scrollEventID == current do
						if y > ScrollThumbFrame.AbsolutePosition.Y then break end
						Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
						wait()
					end
				end
			end)
		end

		if horizontal then
			Connect(ScrollThumbFrame.MouseButton1Down, function(x,y)
				scrollEventID = tick()
				local mouse_offset = x - ScrollThumbFrame.AbsolutePosition.X
				local drag_con
				local up_con
				drag_con = Connect(MouseDrag.MouseMoved, function(x,y)
					local bar_abs_pos = ScrollBarFrame.AbsolutePosition.X
					local bar_drag = ScrollBarFrame.AbsoluteSize.X - ScrollThumbFrame.AbsoluteSize.X
					local bar_abs_one = bar_abs_pos + bar_drag
					x -= mouse_offset
					x = x < bar_abs_pos and bar_abs_pos or x > bar_abs_one and bar_abs_one or x
					x -= bar_abs_pos
					Class:SetScrollPercent(x/(bar_drag))
				end)
				up_con = Connect(MouseDrag.MouseButton1Up, function()
					scrollEventID = tick()
					MouseDrag.Parent = nil
					ResetButtonColor(ScrollThumbFrame)
					Disconnect(drag_con)
					drag_con = nil
					Disconnect(up_con)
					drag = nil
				end)
				MouseDrag.Parent = GetScreen(ScrollFrame)
			end)
		else
			Connect(ScrollThumbFrame.MouseButton1Down, function(x,y)
				scrollEventID = tick()
				local mouse_offset = y - ScrollThumbFrame.AbsolutePosition.Y
				local drag_con, up_con
				drag_con = Connect(MouseDrag.MouseMoved, function(x,y)
					local bar_abs_pos = ScrollBarFrame.AbsolutePosition.Y
					local bar_drag = ScrollBarFrame.AbsoluteSize.Y - ScrollThumbFrame.AbsoluteSize.Y
					local bar_abs_one = bar_abs_pos + bar_drag
					y -= mouse_offset
					y = y < bar_abs_pos and bar_abs_pos or y > bar_abs_one and bar_abs_one or y
					y -= bar_abs_pos
					Class:SetScrollPercent(y/(bar_drag))
				end)
				up_con = Connect(MouseDrag.MouseButton1Up, function()
					scrollEventID = tick()
					MouseDrag.Parent = nil
					ResetButtonColor(ScrollThumbFrame)
					Disconnect(drag_con)
					drag_con = nil
					Disconnect(up_con)
					drag = nil
				end)
				MouseDrag.Parent = GetScreen(ScrollFrame)
			end)
		end

		function Class:Destroy()
			Destroy(ScrollFrame)
			Destroy(MouseDrag)
			for k in next, Class do
				Class[k] = nil
			end
			setmetatable(Class, nil)
		end
		Update()
		return Class
	end
end
----------------------------------------------------------------
Create(explorerPanel,{
	BackgroundColor3 = GuiColor.Field,
	BorderColor3 = GuiColor.Border,
	Active = true
})

local ConfirmationWindow = WaitForChild(Dex, "Confirmation")
local CautionWindow = WaitForChild(Dex, "Caution")
local TableCautionWindow = WaitForChild(Dex, "TableCaution")

local RemoteWindow = WaitForChild(Dex, "CallRemote")

local ScriptEditor = WaitForChild(Dex, "ScriptEditor")

local CurrentRemoteWindow

local lastSelectedNode

local DexStorage, DexStorageMain, DexStorageEnabled

if saveinstance then
	DexStorageEnabled = true
end

if DexStorageEnabled then
	DexStorage = Create('Folder',{
		Name = "Dex"
	})
	DexStorageMain = Create('Folder',{
		Name = "DexStorage",
		Parent = DexStorage
	})
end

local RunningScriptsStorage, RunningScriptsStorageMain, RunningScriptsStorageEnabled

if getscripts then 
	RunningScriptsStorageEnabled = true 
end

if RunningScriptsStorageEnabled then
	RunningScriptsStorage = Create('Folder',{
		Name = "Dex Internal Storage",
	})
	RunningScriptsStorageMain = Create('Folder',{
		Name = "Running Scripts",
		Parent = RunningScriptsStorage
	})
	if not GetSetting_Bindable:Invoke("RSSIncludeRL") then
		for _, RunningScript in next, getscripts() do
			local runningScript
			RunningScript.Archivable = true
			runningScript = Clone(RunningScript)
			pcall(function()
				runningScript.Disabled = true
			end)
			runningScript.Parent = RunningScriptsStorageMain
		end
	else
		for _, Instance in next, getinstancelist() do
			if typeof(Instance) == "Instance" and IsA(Instance, "LuaSourceContainer") then
				Instance.Archivable = true
				local Script = Clone(Instance)
				pcall(function()
					Script.Disabled = true
				end)
				Script.Parent = RunningScriptsStorageMain
			end
		end
	end
end

local NilStorage, NilStorageMain, NilStorageEnabled

if getnilinstances then 
	NilStorageEnabled = true
end

if NilStorageEnabled then
	NilStorage = Create('Folder',{
		Name = "Dex Internal Storage",
	})
	NilStorageMain = Create('Folder',{
		Name = "Nil Instances",
		Parent = NilStorage
	})
	for _, NilInstance in next, getnilinstances() do
		local nilInstance
		NilInstance.Archivable = true
		pcall(function()
			nilInstance = Clone(NilInstance)
			nilInstance.Disabled = true
			nilInstance.Parent = NilStorageMain
		end)
	end
end

local listFrame = Create('Frame',{
	Name = "List",
	BorderSizePixel = 0,
	BackgroundTransparency = 1,
	ClipsDescendants = true,
	Position = UDim2_new(0,0,0,HEADER_SIZE),
	Size = UDim2_new(1,-GUI_SIZE,1,-HEADER_SIZE),
	Parent = explorerPanel
})

local scrollBar = ScrollBar(false)
scrollBar.PageIncrement = 1
Create(scrollBar.GUI,{
	Position = UDim2_new(1,-GUI_SIZE,0,HEADER_SIZE),
	Size = UDim2_new(0,GUI_SIZE,1,-HEADER_SIZE),
	Parent = explorerPanel
})

local scrollBarH = ScrollBar(true)
scrollBarH.PageIncrement = GUI_SIZE
Create(scrollBarH.GUI,{
	Position = UDim2_new(0,0,1,-GUI_SIZE),
	Size = UDim2_new(1,-GUI_SIZE,0,GUI_SIZE),
	Visible = false,
	Parent = explorerPanel
})

local headerFrame = Create('Frame',{
	Name = "Header",
	BorderSizePixel = 0,
	BackgroundColor3 = GuiColor.Background,
	BorderColor3 = GuiColor.Border,
	Position = UDim2_new(),
	Size = UDim2_new(1,0,0,HEADER_SIZE),
	Parent = explorerPanel,
	Create('TextLabel',{
		Text = "Explorer",
		BackgroundTransparency = 1,
		TextColor3 = GuiColor.Text,
		TextXAlignment = 'Left',
		Font = FONT,
		FontSize = FONT_SIZE,
		Position = UDim2_new(0,4,0,0),
		Size = UDim2_new(1,-4,.5,0)
	})
})

local explorerFilter = 	Create('TextBox',{
	Text = "Filter Instances",
	BackgroundTransparency = .8,
	TextColor3 = GuiColor.Text,
	TextXAlignment = 'Left',
	Font = FONT,
	FontSize = FONT_SIZE,
	Position = UDim2_new(0,4,.5,0),
	Size = UDim2_new(1,-8,.5,-2)
})

explorerFilter.Parent = headerFrame

SetZIndexOnChanged(explorerPanel)

local Styles = {
	Font = Enum.Font.Arial,
	Margin = 5,
	Black = Color3_fromRGB(0,0,5),
	Black2 = Color3_fromRGB(24, 24, 29),
	White = Color3_fromRGB(244,244,249),
	WhiteOver = Color3_fromRGB(200,200,205),
	Hover = Color3_fromRGB(2, 128, 149),
	Hover2 = Color3_fromRGB(5, 102, 146)
}

local Row = {
	Font = Styles.Font,
	FontSize = Enum.FontSize.Size14,
	TextXAlignment = Enum.TextXAlignment.Left,
	TextColor = Styles.White,
	TextColorOver = Styles.WhiteOver,
	TextLockedColor = Color3_fromRGB(155,155,160),
	Height = 24,
	BorderColor = Color3_fromRGB(54,54,55),
	BackgroundColor = Styles.Black2,
	BackgroundColorAlternate = Color3_fromRGB(32, 32, 37),
	BackgroundColorMouseover = Color3_fromRGB(40, 40, 45),
	TitleMarginLeft = 15
}

local DropDown = {
	Font = Styles.Font,
	FontSize = Enum.FontSize.Size14,
	TextColor = Color3_fromRGB(255,255,260),
	TextColorOver = Row.TextColorOver,
	TextXAlignment = Enum.TextXAlignment.Left,
	Height = 20,
	BackColor = Styles.Black2,
	BackColorOver = Styles.Hover2,
	BorderColor = Color3_fromRGB(45,45,50),
	BorderSizePixel = 0,
	ArrowColor = Color3_fromRGB(80,80,83),
	ArrowColorOver = Styles.Hover
}

local BrickColors = {
	BoxSize = 13,
	BorderSizePixel = 0,
	BorderColor = Color3_fromRGB(53,53,55),
	FrameColor = Color3_fromRGB(53,53,55),
	Size = 20,
	Padding = 4,
	ColorsPerRow = 8,
	OuterBorder = 1,
	OuterBorderColor = Styles.Black
}

local currentRightClickMenu, CurrentInsertObjectWindow, CurrentFunctionCallerWindow, RbxApi

function IsCreatable(Class)
	local Class_Tags = Class.Tags
	if Class_Tags then
		for _, Tag in next, Class_Tags do
			if string_lower(Tag) == "notcreatable" then
				return false
			end
		end
	end
	return true
end

function IsAService(Class)
	local Class_Tags = Class.Tags
	if Class_Tags then
		for _, Tag in next, Class_Tags do
			if string_lower(Tag) == "service" then
				return true
			end
		end
	end
	return false
end

function GetClasses()
	if RbxApi == nil then return {} end
	local classTable = {}
	for _,Class in next, RbxApi.InstanceClasses do
		if IsCreatable(Class) and not IsAService(Class) then
			table_insert(classTable, Class.Name)
		end
	end
	return classTable
end

local function sortAlphabetic(t, property)
	table_sort(t, function(x,y) return x[property] < y[property] end)
end

function CreateInsertObjectMenu(choices, currentChoice, readOnly, onClick)
	local totalSize = Dex.AbsoluteSize.Y

	if #choices == 0 then 
		return
	end

	table_sort(choices, function(a,b) return a < b end)

	local frame = Create('Frame',{
		Name = "InsertObject",
		Size = UDim2_new(0, 200, 1, 0),
		BackgroundTransparency = 1,
		Active = true
	})

	local menu, arrow, expanded, margin = nil, nil, false, DropDown.BorderSizePixel

	local function hideMenu()
		expanded = false
		if frame then 
			CurrentInsertObjectWindow.Visible = false
		end
	end

	local function showMenu()
		expanded = true
		menu = Create('ScrollingFrame',{
			Size = UDim2_new(0, 200, 1, 0),
			CanvasSize = UDim2_new(0, 500, 0, #choices * DropDown.Height),
			Position = UDim2_new(0, margin, 0, 0),
			BackgroundTransparency = 0,
			BackgroundColor3 = DropDown.BackColor,
			BorderColor3 = DropDown.BorderColor,
			BorderSizePixel = DropDown.BorderSizePixel,
			TopImage = "rbxasset://textures/blackBkg_square.png",
			MidImage = "rbxasset://textures/blackBkg_square.png",
			BottomImage = "rbxasset://textures/blackBkg_square.png",
			Active = true,
			ZIndex = 5,
			Parent = frame
		})

		local function choice(name)
			onClick(name)
			hideMenu()
		end

		for i,name in next, choices do
			local option = CreateRightClickMenuItem(name, {}, function()
				choice(name)
			end,1)
			option.Size = UDim2_new(1, 0, 0, 20)
			option.Position = UDim2_new(0, 0, 0, (i - 1) * DropDown.Height)
			option.ZIndex = menu.ZIndex
			option.Parent = menu
		end
	end
	showMenu()
	return frame
end

function CreateInsertObject()
	if not CurrentInsertObjectWindow then return end
	CurrentInsertObjectWindow.Visible = true
	if currentRightClickMenu and CurrentInsertObjectWindow.Visible then
		CurrentInsertObjectWindow.Position = UDim2_new(0,currentRightClickMenu.Position.X.Offset-currentRightClickMenu.Size.X.Offset-2,0,0)
	end
	if CurrentInsertObjectWindow.Visible then
		CurrentInsertObjectWindow.Parent = Dex
	end
end

function GetCorrectIcon(Class)
	if type(Class) == "string" then
		if ExplorerIndex[Class] then
			return ExplorerIndex[Class]
		end
	elseif typeof(Class) == "Instance" then
		if ExplorerIndex[Class.ClassName] then
			return ExplorerIndex[Class.ClassName]
		end
		for ClassIndex, ImageIndex in next, ExplorerIndex do
			if IsA(Class, ClassIndex) then
				return ImageIndex
			end
		end
	end
	return 0
end

function CreateRightClickMenuItem(text, customizationData, onClick, insObj)
	local button = Create('TextButton',{
		Font = customizationData.Font or DropDown.Font,
		FontSize = customizationData.FontSize or DropDown.FontSize,
		TextColor3 = customizationData.TextColor or DropDown.TextColor,
		TextXAlignment = customizationData.TextXAlignment or DropDown.TextXAlignment,
		AutoButtonColor = false,
		BorderSizePixel = 0,
		BackgroundTransparency = 1,
		Active = true,
		Text = text
	})

	if insObj == 1 then
		local newIcon = Icon(nil,GetCorrectIcon(text) or 0)
		newIcon.Position = UDim2_new(0,0,0,2)
		newIcon.Size = UDim2_new(0,GUI_SIZE,0,GUI_SIZE)
		newIcon.IconMap.ZIndex = 5
		newIcon.Parent = button
		button.Text = string_rep(" ", 4)..button.Text
	elseif insObj == 2 then
		button.FontSize = Enum.FontSize.Size11
	end

	Connect(button.MouseEnter, function()
		button.TextColor3 = DropDown.TextColorOver
		if not insObj and CurrentInsertObjectWindow then
			if CurrentInsertObjectWindow.Visible == false and button.Text == "Insert Object" then
				CreateInsertObject()
			elseif CurrentInsertObjectWindow.Visible and button.Text ~= "Insert Object" then
				CurrentInsertObjectWindow.Visible = false
			end
		end
	end)
	Connect(button.MouseLeave, function()
		button.TextColor3 = DropDown.TextColor
	end)
	Connect(button.Activated, function()
		button.TextColor3 = DropDown.TextColor
		onClick(text)
	end)	
	return button
end

function CreateRightClickMenu(choices, currentChoice, readOnly, onClick)
	local frame = Create('Frame',{
		Name = "DropDown",
		Size = UDim2_new(0, 200, 1, 0),
		BackgroundTransparency = 1,
		Active = true
	})

	local menu, arrow, expanded, margin = nil, nil, false, DropDown.BorderSizePixel

	local function hideMenu()
		expanded = false
		if frame then 
			Destroy(frame)
			DestroyRightClick()
		end
	end

	local function showMenu()
		expanded = true
		menu = Create('Frame',{
			Size = UDim2_new(0, 200, 0, #choices * DropDown.Height),
			Position = UDim2_new(0, margin, 0, 5),
			BackgroundTransparency = 0,
			BackgroundColor3 = DropDown.BackColor,
			BorderColor3 = DropDown.BorderColor,
			BorderSizePixel = DropDown.BorderSizePixel,
			Active = true,
			ZIndex = 5,
			Parent = frame
		})

		local UICorner = Create('UICorner',{
			Name = "",
			CornerRadius = UDim.new(0, 12),
			Parent = menu
		})

		local function choice(name)
			onClick(name)
			hideMenu()
		end

		for i,name in next, choices do
			local option = CreateRightClickMenuItem(name, {TextXAlignment = "Center"}, function()
				choice(name)
			end)
			option.Size = UDim2_new(1, 0, 0, 20)
			option.Position = UDim2_new(0, 0, 0, (i - 1) * DropDown.Height)
			option.ZIndex = menu.ZIndex
			option.Parent = menu
		end
	end
	showMenu()
	return frame
end

function checkMouseInGui(gui)
	if gui == nil then return false end
	local guiPosition, guiSize = gui.AbsolutePosition, gui.AbsoluteSize
	return ( Mouse.X >= guiPosition.X and Mouse.X <= guiPosition.X + guiSize.X and Mouse.Y >= guiPosition.Y and Mouse.Y <= guiPosition.Y + guiSize.Y) and true or false
end

local Clipboard = {}

local getTextWidth do
	local text = Create('TextLabel',{
		Name = "TextWidth",
		TextXAlignment = 'Left',
		TextYAlignment = 'Center',
		Font = FONT,
		FontSize = FONT_SIZE,
		Text = "",
		Position = UDim2_new(),
		Size = UDim2_new(1,0,1,0),
		Visible = false,
		Parent = explorerPanel
	})
	function getTextWidth(s)
		text.Text = s
		return text.TextBounds.X
	end
end

local nameScanned, TreeList, NodeLookup, QuickButtons, nodeWidth = false, {}, {}, {}, 0

function filteringInstances()
	return (explorerFilter.Text ~= "" and explorerFilter.Text ~= "Filter Instances") and true or false
end

function lookForAName(obj, name)
	for _,v in ipairs(GetChildren(obj)) do
		if string_find(string_lower(tostring(v)), string_lower(name)) then 
			nameScanned = true 
		end
		lookForAName(v, name)
	end
end

function scanName(obj)
	nameScanned = false
	if string_find(string_lower(obj.Name),string_lower(explorerFilter.Text)) then
		nameScanned = true
	else
		lookForAName(obj,explorerFilter.Text)
	end
	return nameScanned
end

function updateActions()
	for _,v in next, QuickButtons do
		v.Toggle(v.Cond() and true or false)
	end
end

local updateList,rawUpdateList,updateScroll,rawUpdateSize do
	local function r(t)
		for i = 1,#t do
			if not filteringInstances() or scanName(t[i].Object) then
				table_insert(TreeList, t[i])
				local w = (t[i].Depth)*(2+ENTRY_PADDING+GUI_SIZE) + 2 + ENTRY_SIZE + 4 + getTextWidth(t[i].Object.Name) + 4
				if w > nodeWidth then
					nodeWidth = w
				end
				if t[i].Expanded or filteringInstances() then
					r(t[i])
				end
			end
		end
	end

	function rawUpdateSize()
		scrollBarH.TotalSpace = nodeWidth
		scrollBarH.VisibleSpace = listFrame.AbsoluteSize.X
		scrollBarH:Update()
		local visible = scrollBarH:CanScrollDown() or scrollBarH:CanScrollUp()
		scrollBarH.GUI.Visible = visible

		listFrame.Size = UDim2_new(1,-GUI_SIZE,1,-GUI_SIZE*(visible and 1 or 0) - HEADER_SIZE)

		scrollBar.VisibleSpace = math_ceil(listFrame.AbsoluteSize.Y/ENTRY_BOUND)
		scrollBar.GUI.Size = UDim2_new(0,GUI_SIZE,1,-GUI_SIZE*(visible and 1 or 0) - HEADER_SIZE)

		scrollBar.TotalSpace = #TreeList+1
		scrollBar:Update()
	end

	function rawUpdateList()
		TreeList = {}
		nodeWidth = 0
		r(NodeLookup[workspace.Parent])
		r(NodeLookup[DexOutput])
		if DexStorageEnabled then
			r(NodeLookup[DexStorage])
		end
		if NilStorageEnabled then
			r(NodeLookup[NilStorage])
		end
		if RunningScriptsStorageEnabled then
			r(NodeLookup[RunningScriptsStorage])
		end
		rawUpdateSize()
		updateActions()
	end

	local updatingList = false
	function updateList()
		if updatingList or filteringInstances() then return end
		updatingList = true
		delay(1.5, function()
			updatingList = false
			rawUpdateList()
		end)
	end

	local updatingScroll = false
	function updateScroll()
		if updatingScroll then return end
		updatingScroll = true
		delay(1.5, function()
			updatingScroll = false
			scrollBar:Update()
		end)
	end
end

local Selection 

do
	local SelectionList, SelectionSet, Updates = {}, {}, true

	Selection = {
		Selected = SelectionSet,
		List = SelectionList
	}

	local function addObject(object)
		local lupdate, supdate = false, false

		if not SelectionSet[object] then
			local node = NodeLookup[object]
			if node then
				table_insert(SelectionList,object)
				SelectionSet[object] = true
				node.Selected = true
				node = node.Parent
				while node do
					if not node.Expanded then
						node.Expanded = true
						lupdate = true
					end
					node = node.Parent
				end
				supdate = true
			end
		end
		return lupdate,supdate
	end

	function Selection:Set(objects)
		local lupdate, supdate = false, false

		if #SelectionList > 0 then
			for i = 1,#SelectionList do
				local object = SelectionList[i]
				local node = NodeLookup[object]
				if node then
					node.Selected = false
					SelectionSet[object] = nil
				end
			end

			SelectionList = {}
			Selection.List = SelectionList
			supdate = true
		end

		for i = 1,#objects do
			local l,s = addObject(objects[i])
			lupdate = l or lupdate
			supdate = s or supdate
		end

		if lupdate then
			rawUpdateList()
			supdate = true
		elseif supdate then
			scrollBar:Update()
		end

		if supdate then
			SelectionChanged_Bindable:Fire()
			updateActions()
		end
	end

	function Selection:Add(object)
		local l,s = addObject(object)
		if l then
			rawUpdateList()
			if Updates then
				SelectionChanged_Bindable:Fire()
				updateActions()
			end
		elseif s then
			scrollBar:Update()
			if Updates then
				SelectionChanged_Bindable:Fire()
				updateActions()
			end
		end
	end

	function Selection:StopUpdates()
		Updates = false
	end

	function Selection:ResumeUpdates()
		Updates = true
		SelectionChanged_Bindable:Fire()
		updateActions()
	end

	function Selection:Remove(object,noupdate)
		if SelectionSet[object] then
			local node = NodeLookup[object]
			if node then
				node.Selected = false
				SelectionSet[object] = nil
				for i = 1,#SelectionList do
					if SelectionList[i] == object then
						table_remove(SelectionList,i)
						break
					end
				end
				if not noupdate then
					scrollBar:Update()
				end
				SelectionChanged_Bindable:Fire()
				updateActions()
			end
		end
	end

	function Selection:Get()
		local list = {}
		for i = 1,#SelectionList do
			list[i] = SelectionList[i]
		end
		return list
	end

	SetSelection_Bindable.OnInvoke = function(...)
		Selection:Set(...)
	end

	GetSelection_Bindable.OnInvoke = function()
		return Selection:Get()
	end
end

function CreateCaution(title,msg)
	local newCaution = CautionWindow
	local MainWindow = newCaution.MainWindow
	newCaution.Visible = true
	newCaution.Title.Text = title
	MainWindow.Desc.Text = msg
	Connect(MainWindow.Ok.MouseButton1Up, function()
		newCaution.Visible = false
	end)
end

function CreateTableCaution(title,msg)
	if type(msg) ~= "table" then
		return CreateCaution(title, tostring(msg))
	end
	local newCaution = Clone(TableCautionWindow)
	newCaution.Title.Text = title
	local TableList = newCaution.MainWindow.TableResults
	local TableTemplate = newCaution.MainWindow.TableTemplate
	for _,v in next, msg do
		local newResult = Clone(TableTemplate)
		newResult.Type.Text = typeof(v)
		newResult.Value.Text = tostring(v)
		newResult.Position = UDim2_new(0,0,0, #GetChildren(TableList) * 20)
		newResult.Parent = TableList
		TableList.CanvasSize = UDim2_new(0,0,0, #GetChildren(TableList) * 20)
		newResult.Visible = true
	end
	newCaution.Parent = Dex
	newCaution.Visible = true
	Connect(newCaution.MainWindow.Ok.MouseButton1Up, function()
		Destroy(newCaution)
	end)
end

local function ToValue(value,type)
	if type == "Vector2" then
		local list = string_split(value,",")
		if #list < 2 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		return Vector2_new(x,y)
	elseif type == "Vector3" then
		local list = string_split(value,",")
		if #list < 3 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		local z = tonumber(list[3]) or 0
		return Vector3_new(x,y,z)
	elseif type == "Color3" then
		local list = string_split(value,",")
		if #list < 3 then return nil end
		local r = tonumber(list[1]) or 0
		local g = tonumber(list[2]) or 0
		local b = tonumber(list[3]) or 0
		return Color3_new(r/255,g/255, b/255)
	elseif type == "UDim2" then
		local list = string_split(string_gsub(string_gsub(value, "{", ""),"}",""),",")
		if #list < 4 then return nil end
		local xScale = tonumber(list[1]) or 0
		local xOffset = tonumber(list[2]) or 0
		local yScale = tonumber(list[3]) or 0
		local yOffset = tonumber(list[4]) or 0
		return UDim2_new(xScale, xOffset, yScale, yOffset)
	elseif type == "Number" then
		return tonumber(value)
	elseif type == "String" then
		return value
	elseif type == "NumberRange" then
		local list = string_split(value,",")
		if #list == 1 then
			if tonumber(list[1]) == nil then return nil end
			local newVal = tonumber(list[1]) or 0
			return NumberRange_new(newVal)
		end
		if #list < 2 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		return NumberRange_new(x,y)
	elseif type == "Script" then
		local success,err = pcall(function()
			_G.D_E_X_DONOTUSETHISPLEASE = nil
			loadstring(
				"_G.D_E_X_DONOTUSETHISPLEASE = "..value
			)()
			return _G.D_E_X_DONOTUSETHISPLEASE
		end)
		if err then
			return nil
		end
	else
		return nil
	end
end

local function ToPropValue(value,type)
	if type == "Vector2" then
		local list = string_split(value,",")
		if #list < 2 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		return Vector2_new(x,y)
	elseif type == "Vector3" then
		local list = string_split(value,",")
		if #list < 3 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		local z = tonumber(list[3]) or 0
		return Vector3_new(x,y,z)
	elseif type == "Color3" then
		local list = string_split(value,",")
		if #list < 3 then return nil end
		local r = tonumber(list[1]) or 0
		local g = tonumber(list[2]) or 0
		local b = tonumber(list[3]) or 0
		return Color3_new(r/255,g/255, b/255)
	elseif type == "UDim2" then
		local list = string_split(string_gsub(string_gsub(value, "{", ""),"}",""),",")
		if #list < 4 then return nil end
		local xScale = tonumber(list[1]) or 0
		local xOffset = tonumber(list[2]) or 0
		local yScale = tonumber(list[3]) or 0
		local yOffset = tonumber(list[4]) or 0
		return UDim2_new(xScale, xOffset, yScale, yOffset)
	elseif type == "Content" then
		return value
	elseif type == "float" or type == "int" or type == "double" then
		return tonumber(value)
	elseif type == "string" then
		return value
	elseif type == "NumberRange" then
		local list = string_split(value,",")
		if #list == 1 then
			if tonumber(list[1]) == nil then return nil end
			local newVal = tonumber(list[1]) or 0
			return NumberRange.new(newVal)
		end
		if #list < 2 then return nil end
		local x = tonumber(list[1]) or 0
		local y = tonumber(list[2]) or 0
		return NumberRange.new(x,y)
	elseif string_sub(value,1,4) == "Enum" then
		local getEnum = value
		while true do
			local x,y = string_find(getEnum,".")
			if y then
				getEnum = string_sub(getEnum,y+1)
			else
				break
			end
		end
		return getEnum
	else
		return nil
	end
end

function PromptRemoteCaller(inst)
	if CurrentRemoteWindow then
		Destroy(CurrentRemoteWindow)
		CurrentRemoteWindow = nil
	end
	CurrentRemoteWindow = Clone(RemoteWindow)
	CurrentRemoteWindow.Parent = Dex
	CurrentRemoteWindow.Visible = true

	local displayValues, ArgumentList, ArgumentTemplate = false, CurrentRemoteWindow.MainWindow.Arguments, CurrentRemoteWindow.MainWindow.ArgumentTemplate

	if IsA(inst, "RemoteEvent") then
		CurrentRemoteWindow.Title.Text = "Fire Event"
		CurrentRemoteWindow.MainWindow.Ok.Text = "Fire"
		CurrentRemoteWindow.MainWindow.DisplayReturned.Visible = false
		CurrentRemoteWindow.MainWindow.Desc2.Visible = false
	end

	local newArgument = Clone(ArgumentTemplate)
	newArgument.Parent = ArgumentList
	newArgument.Visible = true
	Connect(newArgument.Type.MouseButton1Down, function()
		createDDown(newArgument.Type, function(choice)
			newArgument.Type.Text = choice
		end,"Script","Number","String","Color3","Vector3","Vector2","UDim2","NumberRange")
	end)

	Connect(CurrentRemoteWindow.MainWindow.Ok.MouseButton1Up, function()
		if CurrentRemoteWindow and inst.Parent ~= nil then
			local MyArguments = {}
			for _,v in ipairs(GetChildren(ArgumentList)) do
				table_insert(MyArguments, ToValue(v.Value.Text,v.Type.Text))
			end
			if IsA(inst, "RemoteFunction") then
				if displayValues then
					pcall(function()
						local myResults = inst:InvokeServer(unpack(MyArguments))
						if myResults then
							CreateTableCaution("Remote Caller",myResults)
						else
							CreateCaution("Remote Caller","This remote didn't return anything.")
						end
					end)
				else
					pcall(function()
						inst:InvokeServer(unpack(MyArguments))
					end)
				end
			else
				inst:FireServer(unpack(MyArguments))
			end
			Destroy(CurrentRemoteWindow)
			CurrentRemoteWindow = nil
		end
	end)

	Connect(CurrentRemoteWindow.MainWindow.Add.MouseButton1Up, function()
		if CurrentRemoteWindow then
			local newArgument = Clone(ArgumentTemplate)
			newArgument.Position = UDim2_new(0,0,0,#GetChildren(ArgumentList) * 20)
			ArgumentList.CanvasSize = UDim2_new(0,0,0,#GetChildren(ArgumentList) * 20)
			newArgument.Visible = true
			newArgument.Parent = ArgumentList
			Connect(newArgument.Type.MouseButton1Down, function()
				createDDown(newArgument.Type,function(choice)
					newArgument.Type.Text = choice
				end,"Script","Number","String","Color3","Vector3","Vector2","UDim2","NumberRange")
			end)
		end
	end)

	Connect(CurrentRemoteWindow.MainWindow.Subtract.MouseButton1Up, function()
		if CurrentRemoteWindow then
			local A = GetChildren(ArgumentList)
			local B = #A
			if B > 1 then
				Destroy(A[B])
				ArgumentList.CanvasSize = UDim2_new(0, 0, 0, B * 20)
			end
		end
	end)

	Connect(CurrentRemoteWindow.MainWindow.Cancel.MouseButton1Up, function()
		if CurrentRemoteWindow then
			Destroy(CurrentRemoteWindow)
			CurrentRemoteWindow = nil
		end
	end)

	Connect(CurrentRemoteWindow.MainWindow.DisplayReturned.MouseButton1Up, function()
		if displayValues then
			displayValues = false
			CurrentRemoteWindow.MainWindow.DisplayReturned.enabled.Visible = false
		else
			displayValues = true
			CurrentRemoteWindow.MainWindow.DisplayReturned.enabled.Visible = true
		end
	end)
end

function DestroyRightClick()
	if currentRightClickMenu then
		Destroy(currentRightClickMenu)
		currentRightClickMenu = nil
	end
	if CurrentInsertObjectWindow and CurrentInsertObjectWindow.Visible then
		CurrentInsertObjectWindow.Visible = false
	end
end

local tabChar = string_rep(" ", 4)

local function getSmaller(a, b, notLast)
	local aByte = string_byte(a) or -1
	local bByte = string_byte(b) or -1
	if aByte == bByte then
		if notLast and #a == 1 and #b == 1 then
			return -1
		elseif #b == 1 then
			return false
		elseif #a == 1 then
			return true
		else
			return getSmaller(string_sub(a, 2), string_sub(b, 2), notLast)
		end
	else
		return aByte < bByte
	end
end

local function parseData(obj, numTabs, isKey, overflow, noTables, forceDict)
	local objType, objStr = type(obj), tostring(obj)
	if objType == "table" then
		if noTables then return objStr end
		local isCyclic, out, nextIndex, isDict, hasTables, data = overflow[obj], {}, 1, false, false, {}
		overflow[obj] = true

		for key, val in next, obj do
			if not hasTables and type(val) == "table" then
				hasTables = true
			end

			if not isDict and key ~= nextIndex then
				isDict = true
			else
				nextIndex += 1
			end

			table_insert(data, {key, val})
		end

		if isDict or hasTables or forceDict then
			table_insert(out, (isCyclic and "Cyclic " or "") .. "{")
			table_sort(data, function(a, b)
				local aType, bType = type(a[2]), type(b[2])
				if bType == "string" and aType ~= "string" then
					return false
				end
				local res = getSmaller(aType, bType, true)
				return (res == -1) and getSmaller(tostring(a[1]), tostring(b[1])) or res
			end)
			for i = 1, #data do
				local arr = data[i]
				local nowKey, nowVal = arr[1], arr[2]
				local parseKey, parseVal = parseData(nowKey, numTabs+1, true, overflow, isCyclic), parseData(nowVal, numTabs+1, false, overflow, isCyclic)
				if isDict then
					local nowValType, preStr, postStr = type(nowVal), "", ""
					if i > 1 and (nowValType == "table" or type(data[i-1][2]) ~= nowValType) then
						preStr = "\n"
					end
					if i < #data and nowValType == "table" and type(data[i+1][2]) ~= "table" and type(data[i+1][2]) == nowValType then
						postStr = "\n"
					end
					table_insert(out, preStr .. string_rep(tabChar, numTabs+1) .. parseKey .. " = " .. parseVal .. ";" .. postStr)
				else
					table_insert(out, string_rep(tabChar, numTabs+1) .. parseVal .. ";")
				end
			end
			table_insert(out, string_rep(tabChar, numTabs) .. "}")
		else
			local data2 = {}
			for i = 1, #data do
				local arr = data[i]
				local nowVal = arr[2]
				local parseVal = parseData(nowVal, 0, false, overflow, isCyclic)
				table_insert(data2, parseVal)
			end
			table_insert(out, "{" .. table_concat(data2, ", ") .. "}")
		end

		return table_concat(out, "\n")
	else
		local returnVal = nil
		if (objType == "string" or objType == "Content") and (not isKey or tonumber(string_sub(obj, 1, 1))) then
			local retVal = '"' .. objStr .. '"'
			if isKey then
				retVal = "[" .. retVal .. "]"
			end
			returnVal = retVal
		elseif objType == "EnumItem" then
			returnVal = "Enum." .. tostring(obj.EnumType) .. "." .. obj.Name
		elseif objType == "Enum" then
			returnVal = "Enum." .. objStr
		elseif objType == "Instance" then
			returnVal = obj.Parent and obj:GetFullName() or obj.ClassName
		elseif objType == "CFrame" then
			returnVal = "CFrame.new(" .. objStr .. ")"
		elseif objType == "Vector3" then
			returnVal = "Vector3_new(" .. objStr .. ")"
		elseif objType == "Vector2" then
			returnVal = "Vector2_new(" .. objStr .. ")"
		elseif objType == "UDim2" then
			returnVal = "UDim2_new(" .. objStr:gsub("[{}]", "") .. ")"
		elseif objType == "BrickColor" then
			returnVal = "BrickColor.new(\"" .. objStr .. "\")"
		elseif objType == "Color3" then
			returnVal = "Color3_new(" .. objStr .. ")"
		elseif objType == "NumberRange" then
			returnVal = "NumberRange.new(" .. objStr:gsub("^%s*(.-)%s*$", "%1"):gsub(" ", ", ") .. ")"
		elseif objType == "PhysicalProperties" then
			returnVal = "PhysicalProperties.new(" .. objStr .. ")"
		else
			returnVal = objStr
		end
		return returnVal
	end
end

function tableToString(t)
	local success, result = pcall(function()
		return parseData(t, 0, false, {}, nil, false)
	end)
	return success and result or 'error'
end

local HasSpecial = function(str)
	return (string_match(str, "%c") or string_match(str, "%s") or string_match(str, "%p")) ~= nil
end

local GetPath = function(Instance)
	local Obj, string, temp, error = Instance, {}, {}, false

	while Obj ~= game do
		if Obj == nil then
			error = true
			break
		end
		table_insert(temp, Obj.Parent == game and Obj.ClassName or tostring(Obj))
		Obj = Obj.Parent
	end

	table_insert(string, "game:GetService(\"" .. temp[#temp] .. "\")")

	for i = #temp - 1, 1, -1 do
		table_insert(string, HasSpecial(temp[i]) and "[\"" .. temp[i] .. "\"]" or "." .. temp[i])
	end

	return (error and "nil -- Path contained an invalid instance" or table_concat(string, ""))
end

function rightClickMenu(sObj)
	local actions = {
		'Cut',
		'Copy',
		'Paste Into',
		'Duplicate',
		'Delete',
		'Group',
		'Select Children',
		'Insert Part',
		'Insert Object',
		'Save to File',
		'Copy Path'
	}
	if sObj == RunningScriptsStorageMain or sObj == NilStorageMain then
		table_insert(actions, 1, "Refresh Instances")
	elseif IsA(sObj, "RemoteEvent") or IsA(sObj, "RemoteFunction") then
		table_insert(actions, 10, "Call Remote")
	elseif IsA(sObj, "BasePart") then
		table_insert(actions, 8, "Teleport to")
	elseif IsA(sObj, "ClickDetector") then
		table_insert(actions, 8, "Fire ClickDetector")
	elseif IsA(sObj, "TouchTransmitter") then
		table_insert(actions, 8, "Fire TouchTransmitter")
	elseif IsA(sObj, "ProximityPrompt") then
		table_insert(actions, 8, "Fire ProximityPrompt")
	elseif IsA(sObj, "Model") then
		table_insert(actions, 7, "Ungroup")
	elseif IsA(sObj, "LocalScript") or IsA(sObj, "ModuleScript") then
		table_insert(actions, 7, "View Script")
		table_insert(actions, 8, "Save Script")
	end

	currentRightClickMenu = CreateRightClickMenu(actions, "", false, function(option)
		if option == "Cut" then
			if not Option.Modifiable then
				return
			end
			local cut = {}
			for _, Selected in ipairs(Selection.List) do
				local obj = Clone(Selected)
				if obj then
					table_insert(Clipboard, obj)
					table_insert(cut, Selected)
				end
			end
			for _, CutInstance in next, cut do
				pcall(game.Destroy, CutInstance)
			end
			updateActions()
		elseif option == "Copy" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				table_insert(Clipboard, Clone(Selected))
			end
			updateActions()
		elseif option == "Paste Into" then
			if not Option.Modifiable then
				return
			end
			local parent = Selection.List[1] or workspace
			for _, Copied in next, Clipboard do
				Clone(Copied).Parent = parent
			end
			table_clear(Clipboard)
		elseif option == "Duplicate" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				Clone(Selected).Parent = Selected.Parent or workspace
			end
		elseif option == "Delete" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				pcall(game.Destroy, Selected)
			end
			Selection:Set({})
		elseif option == "Group" then
			if not Option.Modifiable then
				return
			end
			local A = Create("Model",{
				Parent = Selection.List[1].Parent or workspace
			})
			for B, C in ipairs(Selection:Get()) do
				C.Parent = A
			end
			Selection:Set({})
		elseif option == "Ungroup" then
			if not Option.Modifiable then
				return
			end
			local ungrouped = {}
			for _, Selected in ipairs(Selection:Get()) do
				for _, Selected_Instance in ipairs(GetChildren(Selected)) do
					Selected_Instance.Parent = Selected.Parent or workspace
					table_insert(ungrouped, Selected_Instance)
				end	
				pcall(game.Destroy, Selected)
			end
			Selection:Set({})
			if GetSetting_Bindable:Invoke("SelectUngrouped") then
				for _, v in next, ungrouped do
					Selection:Add(v)
				end
			end
		elseif option == "Select Children" then
			if not Option.Modifiable then
				return
			end
			Selection:StopUpdates()
			for _, Selected in ipairs(Selection:Get()) do
				for _, Selected_Instance in ipairs(GetChildren(Selected)) do
					Selection:Add(Selected_Instance)
				end
			end
			Selection:ResumeUpdates()
		elseif option == "Teleport to" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				pcall(function()
					LocalPlayer.Character:MoveTo(Selected.Position)
				end)
				break
			end
		elseif option == "Insert Part" then
			if not Option.Modifiable then
				return
			end
			local insertedParts = {}
			for _, Selected in ipairs(Selection:Get()) do
				pcall(function()
					table_insert(insertedParts, Create('Part', {
						Position = LocalPlayer.Character.Head.Position + Vector3_new(0, 3, 0),
						Parent = Selected
					}))
				end)
			end
		elseif option == "Save to File" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				local Success, Saved_As = pcall(writeinstance, Selected, "rbxmx")
				if Success then
					CreateCaution(tabChar.."[writeinstance]: Success", "Instance '"..tostring(Selected)..[[' was saved to your workspace folder as "]]..Saved_As..[["! This file can now be inserted in Roblox Studio.]])
				else
					CreateCaution(tabChar.."[writeinstance]: Error", "\n"..Saved_As)
				end
			end
		elseif option == 'Copy Path' then
			if not Option.Modifiable then
				return
			end
			local paths = {}
			for _, Selected in ipairs(Selection:Get()) do
				table_insert(paths, GetPath(Selected))
			end
			if #paths > 1 then
				setclipboard(tableToString(paths))
			elseif #paths == 1 then
				setclipboard(paths[1])
			end
		elseif option == "Call Remote" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				PromptRemoteCaller(Selected)
				break
			end
		elseif option == "Fire ClickDetector" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				fireclickdetector(Selected)
			end
		elseif option == "Fire TouchTransmitter" then
			if not Option.Modifiable then
				return
			end
			local A = Selection:Get()
			local B = A[1]
			local C = B.Parent
			local D = A[2]
			firetouchinterest(D, C, 0)
			firetouchinterest(D, C, 1)
		elseif option == "Fire ProximityPrompt" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				fireproximityprompt(Selected)
			end
		elseif option == "View Script" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				OpenScript_Bindable:Fire(Selected)
			end
		elseif option == "Save Script" then
			if not Option.Modifiable then
				return
			end
			for _, Selected in ipairs(Selection:Get()) do
				writefile(game.PlaceId .. '_' ..string_gsub(Selected, "%W", "").. '_'..math_random(1e5, 1e9+1e9+1e8+1e7+1e7+1e7+1e7+1e6+1e6+1e6+1e6+1e6+1e6+1e6+1e5+1e5+1e5+1e5+1e4+1e4+1e4+1e4+1e4+1e4+1e4+1e4+1e3+1e3+1e3+1e2+1e2+1e2+1e2+1e2+1e2+1e1+1e1+1e1+1e1+7)..'.lua', decompile(Selected))
			end
		elseif option == 'Refresh Instances' then
			ClearAllChildren(sObj)
			if sObj == NilStorageMain then
				for i, v in ipairs(getnilinstances()) do
					if v ~= DexOutput and v ~= DexOutputMain and v ~= DexStorage and v ~= DexStorageMain and v ~= RunningScriptsStorage and v ~= RunningScriptsStorageMain and v ~= NilStorage and v ~= NilStorageMain then
						pcall(function()
							Clone(v).Parent = NilStorageMain
						end)
					end
				end
			elseif sObj == RunningScriptsStorageMain then
				if not GetSetting_Bindable:Invoke("RSSIncludeRL") then
					for i,v in ipairs(getscripts()) do
						if v ~= RunningScriptsStorage and v ~= DexStorage then
							v.Archivable = true
							local ls =Clone(v)
							pcall(function()
								ls.Disabled = true
								ls.Parent = RunningScriptsStorageMain
							end)
						end
					end
				else
					for i,v in ipairs(getinstancelist()) do
						if typeof(v) == "Instance" and IsA(v, "LuaSourceContainer") then
							if v ~= RunningScriptsStorage and v ~= DexStorage then
								pcall(function()
									v.Archivable = true
									local Script = Clone(v)
									Script.Disabled = true
									Script.Parent = RunningScriptsStorageMain
								end)
							end
						end
					end
				end
			end
		end
	end)
	currentRightClickMenu.Parent = Dex
	currentRightClickMenu.Position = UDim2_new(0, Mouse.X,0, Mouse.Y)
	if currentRightClickMenu.AbsolutePosition.X + currentRightClickMenu.AbsoluteSize.X > explorerPanel.AbsolutePosition.X + explorerPanel.AbsoluteSize.X then
		currentRightClickMenu.Position = UDim2_new(0, explorerPanel.AbsolutePosition.X + explorerPanel.AbsoluteSize.X - currentRightClickMenu.AbsoluteSize.X, 0, Mouse.Y)
	end
end

local function cancelReparentDrag()
end

local function cancelSelectDrag()
end

do
	local listEntries, nameConnLookup = {}, {}

	local mouseDrag = Create('ImageButton',{
		Name = "MouseDrag",
		Position = UDim2_new(-.25,0,-.25,0),
		Size = UDim2_new(1.5,0,1.5,0),
		Transparency = 1,
		AutoButtonColor = false,
		Active = true,
		ZIndex = 10
	})

	local function dragSelect(last,add,button)
		local conDrag, conUp

		conDrag = Connect(mouseDrag.MouseMoved, function(x,y)
			local pos, size = Vector2_new(x,y) - listFrame.AbsolutePosition, listFrame.AbsoluteSize
			if pos.X < 0 or pos.X > size.X or pos.Y < 0 or pos.Y > size.Y then return end

			local i = math_ceil(pos.Y/ENTRY_BOUND) + scrollBar.ScrollIndex
			for n = i<last and i or last, i>last and i or last do
				local node = TreeList[n]
				if node then
					if add then
						Selection:Add(node.Object)
					else
						Selection:Remove(node.Object)
					end
				end
			end
			last = i
		end)

		function cancelSelectDrag()
			mouseDrag.Parent = nil
			Disconnect(conDrag)
			Disconnect(conUp)
			function cancelSelectDrag() end
		end

		conUp = Connect(mouseDrag[button], cancelSelectDrag)

		mouseDrag.Parent = GetScreen(listFrame)
	end

	local function dragReparent(object,dragGhost,clickPos,ghostOffset)
		local conDrag, conUp, conUp2, parentIndex
		local dragged = false
		local parentHighlight = Create('Frame',{
			Transparency = 1,
			Visible = false,
			Create('Frame',{
				BorderSizePixel = 0,
				BackgroundColor3 = Color3_new(),
				BackgroundTransparency = .1,
				Position = UDim2_new(),
				Size = UDim2_new(1,0,0,1)
			}),
			Create('Frame',{
				BorderSizePixel = 0,
				BackgroundColor3 = Color3_new(),
				BackgroundTransparency = .1,
				Position = UDim2_new(1,0,0,0),
				Size = UDim2_new(0,1,1,0)
			}),
			Create('Frame',{
				BorderSizePixel = 0,
				BackgroundColor3 = Color3_new(),
				BackgroundTransparency = .1,
				Position = UDim2_new(0,0,1,0),
				Size = UDim2_new(1,0,0,1)
			}),
			Create('Frame',{
				BorderSizePixel = 0,
				BackgroundColor3 = Color3_new(),
				BackgroundTransparency = .1,
				Position = UDim2_new(),
				Size = UDim2_new(0,1,1,0)
			}),
		})
		SetZIndex(parentHighlight,9)
		conDrag = Connect(mouseDrag.MouseMoved, function(x,y)
			local dragPos = Vector2_new(x,y)
			if dragged then
				local pos,size = dragPos - listFrame.AbsolutePosition,listFrame.AbsoluteSize
				parentIndex = nil
				parentHighlight.Visible = false
				if pos.X >= 0 and pos.X <= size.X and pos.Y >= 0 and pos.Y <= size.Y + ENTRY_SIZE*2 then
					local i = math_ceil(pos.Y/ENTRY_BOUND-2)
					local node = TreeList[i + scrollBar.ScrollIndex]
					if node and node.Object ~= object and not IsAncestorOf(object, node.Object) then
						parentIndex = i
						local entry = listEntries[i]
						if entry then
							parentHighlight.Visible = true
							parentHighlight.Position = UDim2_new(0,1,0,entry.AbsolutePosition.Y-listFrame.AbsolutePosition.Y)
							parentHighlight.Size = UDim2_new(0,size.X-4,0,entry.AbsoluteSize.Y)
						end
					end
				end
				dragGhost.Position = UDim2_new(0,dragPos.X+ghostOffset.X,0,dragPos.Y+ghostOffset.Y)
			elseif (clickPos-dragPos).Magnitude > 8 then
				dragged = true
				SetZIndex(dragGhost,9)
				dragGhost.IndentFrame.Transparency = .25
				dragGhost.IndentFrame.EntryText.TextColor3 = GuiColor.TextSelected
				dragGhost.Position = UDim2_new(0,dragPos.X+ghostOffset.X,0,dragPos.Y+ghostOffset.Y)
				dragGhost.Parent = GetScreen(listFrame)
				parentHighlight.Parent = listFrame
			end
		end)

		function cancelReparentDrag()
			mouseDrag.Parent = nil
			Disconnect(conDrag)
			Disconnect(conUp)
			Disconnect(conUp2)
			Destroy(dragGhost)
			Destroy(parentHighlight)
			function cancelReparentDrag() end
		end

		local wasSelected = Selection.Selected[object]

		if not wasSelected and Option.Selectable then 
			Selection:Set({object}) 
		end

		conUp = Connect(mouseDrag.MouseButton1Up, function()
			cancelReparentDrag()
			if dragged then
				if parentIndex then
					local parentNode = TreeList[parentIndex + scrollBar.ScrollIndex]
					if parentNode then
						parentNode.Expanded = true
						local parentObj = parentNode.Object
						local function parent(a,b)
							a.Parent = b
						end
						if Option.Selectable then
							local list = Selection.List
							for i = 1,#list do pcall(parent,list[i],parentObj) end
						else
							pcall(parent,object,parentObj)
						end
					end
				end
			else
				if not wasSelected and Option.Selectable then 
					Selection:Set({object})
				elseif wasSelected then
					Selection:Set({})
				end
			end
		end)
		conUp2 = Connect(mouseDrag.MouseButton2Down, function()
			cancelReparentDrag()
		end)
		mouseDrag.Parent = GetScreen(listFrame)
	end

	local entryTemplate = Create('ImageButton',{
		Name = "Entry",
		Transparency = 1,
		AutoButtonColor = false,
		Position = UDim2_new(),
		Size = UDim2_new(1,0,0,ENTRY_SIZE),
		Create('Frame',{
			Name = "IndentFrame",
			BackgroundTransparency = 1,
			BackgroundColor3 = GuiColor.Selected,
			BorderColor3 = GuiColor.BorderSelected,
			Position = UDim2_new(),
			Size = UDim2_new(1,0,1,0),
			Create(SpecialIcon('ImageButton',NodeTextures[1],UDim2_new(0,9,0,5)),{
				Name = "Expand",
				AutoButtonColor = false,
				Position = UDim2_new(0,-9,.5,-8/2),
				Size = UDim2_new(0,16,0,16)
			}),
			Create(Icon(nil,0),{
				Name = "ExplorerIcon",
				Position = UDim2_new(0,2+ENTRY_PADDING,.5,-GUI_SIZE/2),
				Size = UDim2_new(0,GUI_SIZE,0,GUI_SIZE)
			}),
			Create('TextLabel',{
				Name = "EntryText",
				BackgroundTransparency = 1,
				TextColor3 = GuiColor.Text,
				TextXAlignment = 'Left',
				TextYAlignment = 'Center',
				Font = FONT,
				FontSize = FONT_SIZE,
				Text = "",
				Position = UDim2_new(0,2+ENTRY_SIZE+4,0,0),
				Size = UDim2_new(1,-2,1,0)
			})
		})
	})

	function scrollBar.UpdateCallback(self)
		for i = 1,self.VisibleSpace do
			local node = TreeList[i + self.ScrollIndex]
			if node then
				local entry = listEntries[i]
				if not entry then
					entry = Create(Clone(entryTemplate), {
						Position = UDim2_new(0,2,0,ENTRY_BOUND*(i-1)+2),
						Size = UDim2_new(0,nodeWidth,0,ENTRY_SIZE),
						ZIndex = listFrame.ZIndex
					})
					listEntries[i] = entry
					local expand = entry.IndentFrame.Expand
					Connect(expand.MouseEnter, function()
						local node = TreeList[i + self.ScrollIndex]
						if #node > 0 then
							if node.Expanded then
								FindFirstChildOfClass(expand, "ImageLabel").Image = NodeTextures[2]
							else
								FindFirstChildOfClass(expand, "ImageLabel").Image = NodeTextures[1]
							end
						end
					end)
					Connect(expand.MouseLeave, function()
						local node = TreeList[i + self.ScrollIndex]
						if #node > 0 then
							if node.Expanded then
								FindFirstChildOfClass(expand, "ImageLabel").Image = NodeTextures[2]
							else
								FindFirstChildOfClass(expand, "ImageLabel").Image = NodeTextures[1]
							end
						end
					end)
					Connect(expand.MouseButton1Down, function()
						local node = TreeList[i + self.ScrollIndex]
						if #node > 0 then
							node.Expanded = not node.Expanded
							if node.Object == Dex and node.Expanded then
								CreateCaution(tabChar.."Warning","Please be careful when editing instances inside here, this is like the System32 of Dex and modifying objects here can break Dex.")
							end
							rawUpdateList()
						end
					end)
					Connect(entry.MouseButton1Down, function(x,y)
						local node = TreeList[i + self.ScrollIndex]
						DestroyRightClick()
						if GetAwaiting_Bindable:Invoke() then
							SetAwaiting_Bindable:Fire(node.Object)
							return
						end
						if not HoldingShift then
							lastSelectedNode = i + self.ScrollIndex
						end
						if HoldingShift and not filteringInstances() then
							if lastSelectedNode then
								if i + self.ScrollIndex - lastSelectedNode > 0 then
									Selection:StopUpdates()
									for i2 = 1, i + self.ScrollIndex - lastSelectedNode do
										local newNode = TreeList[lastSelectedNode + i2]
										if newNode then
											Selection:Add(newNode.Object)
										end
									end
									Selection:ResumeUpdates()
								else
									Selection:StopUpdates()
									for i2 = i + self.ScrollIndex - lastSelectedNode, 1 do
										local newNode = TreeList[lastSelectedNode + i2]
										if newNode then
											Selection:Add(newNode.Object)
										end
									end
									Selection:ResumeUpdates()
								end
							end
							return
						end
						if HoldingCtrl then
							if Selection.Selected[node.Object] then
								Selection:Remove(node.Object)
							else
								Selection:Add(node.Object)
							end
							return
						end
						if Option.Modifiable then
							local pos = Vector2_new(x,y)
							dragReparent(node.Object, Clone(entry), pos, entry.AbsolutePosition - pos)
						elseif Option.Selectable then
							if Selection.Selected[node.Object] then
								Selection:Set({})
							else
								Selection:Set({node.Object})
							end
							dragSelect(i+self.ScrollIndex,true,'MouseButton1Up')
						end
					end)
					Connect(entry.MouseButton2Down, function()
						if not Option.Selectable then return end
						DestroyRightClick()
						curSelect = entry
						local node = TreeList[i + self.ScrollIndex]
						if GetAwaiting_Bindable:Invoke() then
							SetAwaiting_Bindable:Fire(node.Object)
							return
						end
						if not Selection.Selected[node.Object] then
							Selection:Set({node.Object})
						end
					end)
					Connect(entry.MouseButton2Up, function()
						if not Option.Selectable then return end
						local node = TreeList[i + self.ScrollIndex]
						if checkMouseInGui(curSelect) then
							rightClickMenu(node.Object)
						end
					end)
					entry.Parent = listFrame
				end

				entry.Visible = true

				local object = node.Object

				if #node == 0 then
					entry.IndentFrame.Expand.Visible = false
				elseif node.Expanded then
					FindFirstChildOfClass(entry.IndentFrame.Expand, "ImageLabel").Image = NodeTextures[2]
					entry.IndentFrame.Expand.Visible = true
				else
					FindFirstChildOfClass(entry.IndentFrame.Expand, "ImageLabel").Image = NodeTextures[1]
					entry.IndentFrame.Expand.Visible = true
				end

				Icon(entry.IndentFrame.ExplorerIcon, GetCorrectIcon(object) or 0)

				local w = (node.Depth)*(2+ENTRY_PADDING+GUI_SIZE)
				entry.IndentFrame.Position = UDim2_new(0,w,0,0)
				entry.IndentFrame.Size = UDim2_new(1,-w,1,0)

				if nameConnLookup[entry] then
					Disconnect(nameConnLookup[entry])
				end

				local text = entry.IndentFrame.EntryText
				text.Text = tostring(object)
PropertyChangedSignal(node.Object, "Name"), function()
					text.Text = tostring(object)
				end)

				entry.IndentFrame.Transparency = node.Selected and 0 or 1
				text.TextColor3 = GuiColor[node.Selected and 'TextSelected' or 'Text']

				entry.Size = UDim2_new(0,nodeWidth,0,ENTRY_SIZE)
			elseif listEntries[i] then
				listEntries[i].Visible = false
			end
		end
		for i = self.VisibleSpace+1,self.TotalSpace do
			local entry = listEntries[i]
			if entry then
				listEntries[i] = nil
				Destroy(entry)
			end
		end
	end

	function scrollBarH.UpdateCallback(self)
		for A = 1, scrollBar.VisibleSpace do
			local B = TreeList[A + scrollBar.ScrollIndex]
			if B then
				local C = listEntries[A]
				if C then
					C.Position = UDim2_new(0, 2 - scrollBarH.ScrollIndex, 0, ENTRY_BOUND * (A - 1) + 2)
				end
			end
		end
	end

	Connect(GetPropertyChangedSignal(listFrame, "AbsoluteSize"), rawUpdateSize)

	local wheelAmount = 6

	Connect(explorerPanel.MouseWheelForward, function()
		scrollBar:ScrollTo((scrollBar.VisibleSpace - 1 > wheelAmount) and scrollBar.ScrollIndex - wheelAmount or scrollBar.ScrollIndex - scrollBar.VisibleSpace)
	end)

	Connect(explorerPanel.MouseWheelBackward, function()
		scrollBar:ScrollTo((scrollBar.VisibleSpace - 1 > wheelAmount) and scrollBar.ScrollIndex + wheelAmount or scrollBar.ScrollIndex + scrollBar.VisibleSpace)
	end)
end
----------------------------------------------------------------
local function insert(t,i,v)
	for n = #t,i,-1 do
		local v = t[n]
		v.Index = n+1
		t[n+1] = v
	end
	v.Index = i
	t[i] = v
end

local function remove(t,i)
	local v = t[i]
	for n = i+1,#t do
		local v = t[n]
		v.Index = n-1
		t[n-1] = v
	end
	t[#t] = nil
	v.Index = 0
	return v
end

local function depth(o)
	local d = -1
	while o do
		o = o.Parent
		d += 1
	end
	return d
end

local connLookup = {}

local function nodeIsVisible(node)
	local visible = true
	node = node.Parent
	while node and visible do
		visible = visible and node.Expanded
		node = node.Parent
	end
	return visible
end

local function removeObject(object)
	local objectNode = NodeLookup[object]

	if not objectNode then
		return
	end

	local visible = nodeIsVisible(objectNode)

	Selection:Remove(object, true)

	local parent = objectNode.Parent
	remove(parent, objectNode.Index)
	NodeLookup[object] = nil
	Disconnect(connLookup[object])
	connLookup[object] = nil

	if visible then
		updateList()
	elseif nodeIsVisible(parent) then
		updateScroll()
	end
end

local function moveObject(object,parent)
	local objectNode = NodeLookup[object]
	local parentNode = NodeLookup[parent]

	if not objectNode or not parentNode then
		return
	end

	local visible = nodeIsVisible(objectNode)

	local parent = objectNode.Parent
	remove(parent, objectNode.Index)
	objectNode.Parent = parentNode

	objectNode.Depth = depth(object)

	local function r(node,d)
		for i = 1,#node do
			node[i].Depth = d
			r(node[i],d+1)
		end
	end

	r(objectNode, objectNode.Depth + 1)

	insert(parentNode, #parentNode+1, objectNode)

	if visible or nodeIsVisible(objectNode) then
		updateList()
	elseif nodeIsVisible(parent) then
		updateScroll()
	end
end

local InstanceBlacklist = GetSetting_Bindable:Invoke("UseInstanceBlacklist") and {
	['Instance'] = true,
	['VRService'] = true,
	['ContextActionService'] = true,
	['CorePackages'] = true,
	['AssetService'] = true,
	['TouchInputService'] = true,
	['ScriptContext'] = true,
	['FilteredSelection'] = true,
	['MeshContentProvider'] = true,
	['SolidModelContentProvider'] = true,
	['AnalyticsService'] = true,
	['GamepadService'] = true,
	['HapticService'] = true,
	['ChangeHistoryService'] = true,
	['Visit'] = true,
	['SocialService'] = true,
	['SpawnerService'] = true,
	['FriendService'] = true,
	['Geometry'] = true,
	['BadgeService'] = true,
	['PhysicsService'] = true,
	['PluginDebugService'] = true,
	['PluginGuiService'] = true,
	['RobloxPluginGuiService'] = true,
	['CollectionService'] = true,
	['HttpRbxApiService'] = true,
	['TweenService'] = true,
	['TextService'] = true,
	['NotificationService'] = true,
	['AdService'] = true,
	['CSGDictionaryService'] = true,
	['ControllerService'] = true,
	['RuntimeScriptService'] = true,
	['ScriptService'] = true,
	['MouseService'] = true,
	['KeyboardService'] = true,
	['CookiesService'] = true,
	['TimerService'] = true,
	['GamePassService'] = true,
	['KeyframeSequenceProvider'] = true,
	['NonReplicatedCSGDictionaryService'] = true,
	['GuidRegistryService'] = true,
	['PathfindingService'] = true,
	['GroupService'] = true
} or {}

local function check(object)
	return object.AncestryChanged
end

local function addObject(object,noupdate)
	if object.Parent == game and InstanceBlacklist[object.ClassName] or object.ClassName == '' then
		return
	end

	if script then
		local s = pcall(check, object)
		if not s then return end
	end

	local parentNode = NodeLookup[object.Parent]
	if not parentNode then return end

	local objectNode = {
		Object = object,
		Parent = parentNode,
		Index = 0,
		Expanded = false,
		Selected = false,
		Depth = depth(object)
	}

	connLookup[object] = EventConnect(object.AncestryChanged,function(c, p)
		if c == object then
			if not p then
				removeObject(c)
			else
				moveObject(c,p)
			end
		end
	end)

	NodeLookup[object] = objectNode
	insert(parentNode, #parentNode + 1, objectNode)

	if not noupdate then
		if nodeIsVisible(objectNode) then
			updateList()
		elseif nodeIsVisible(objectNode.Parent) then
			updateScroll()
		end
	end
end

local function makeObject(obj,par)
	local newObject = Instance_new(obj.ClassName)
	for i,v in next, obj.Properties do
		pcall(function()
			newObject[tostring(v)] = ToPropValue(v.Value, v.Type)
		end)
	end
	newObject.Parent = par
end

local function writeObject(obj)
	local newObject = {ClassName = obj.ClassName, Properties = {}}
	for i,v in next, RbxApi.GetProperties(obj.className) do
		if v["Name"] ~= "Parent" then
			table_insert(newObject.Properties,{Name = v["Name"], Type = v["ValueType"], Value = tostring(obj[v["Name"]])})
		end
	end
	return newObject
end

local function buildDexStorage()
	updateDexStorageListeners()
end

local dexStorageDebounce = false
local dexStorageListeners = {}

local function updateDexStorage()
	if dexStorageDebounce then return end
	dexStorageDebounce = true	
	wait()
	updateDexStorageListeners()
	dexStorageDebounce = false
end

function updateDexStorageListeners()
	for _,v in next, dexStorageListeners do
		Disconnect(v)
	end
	table_clear(dexStorageListeners)
	for _,v in ipairs(GetChildren(DexStorageMain)) do
		pcall(function()
			table_insert(dexStorageListeners, Connect(v.Changed, updateDexStorage))
		end)
	end
end

do
	NodeLookup[workspace.Parent] = {
		Object = workspace.Parent,
		Parent = nil,
		Index = 0,
		Expanded = true
	}

	NodeLookup[DexOutput] = {
		Object = DexOutput,
		Parent = nil,
		Index = 0,
		Expanded = true
	}

	if DexStorageEnabled then
		NodeLookup[DexStorage] = {
			Object = DexStorage,
			Parent = nil,
			Index = 0,
			Expanded = true
		}
	end

	if NilStorageEnabled then
		NodeLookup[NilStorage] = {
			Object = NilStorage,
			Parent = nil,
			Index = 0,
			Expanded = true
		}
	end

	if RunningScriptsStorageEnabled then
		NodeLookup[RunningScriptsStorage] = {
			Object = RunningScriptsStorage,
			Parent = nil,
			Index = 0,
			Expanded = true
		}
	end

	Connect(game.DescendantAdded, addObject)
	Connect(game.DescendantRemoving, removeObject)

	Connect(DexOutput.DescendantAdded, addObject)
	Connect(DexOutput.DescendantRemoving, removeObject)

	if DexStorageEnabled then

		buildDexStorage()

		Connect(DexStorage.DescendantAdded,addObject)
		Connect(DexStorage.DescendantRemoving,removeObject)

		Connect(DexStorage.DescendantAdded,updateDexStorage)
		Connect(DexStorage.DescendantRemoving,updateDexStorage)
	end

	if NilStorageEnabled then
		Connect(NilStorage.DescendantAdded,addObject)
		Connect(NilStorage.DescendantRemoving,removeObject)
	end
	if RunningScriptsStorageEnabled then
		Connect(RunningScriptsStorage.DescendantAdded,addObject)
		Connect(RunningScriptsStorage.DescendantRemoving,removeObject)
	end

	local function ApplyDescendants(o)
		local s, children = pcall(GetDescendants, o)
		if s then
			for i = 1,#children do
				addObject(children[i], true)
			end
		end
	end

	ApplyDescendants(workspace.Parent)
	ApplyDescendants(DexOutput)
	if DexStorageEnabled then
		ApplyDescendants(DexStorage)
	end
	if NilStorageEnabled then
		ApplyDescendants(NilStorage)
	end
	if RunningScriptsStorageEnabled then
		ApplyDescendants(RunningScriptsStorage)
	end
	scrollBar.VisibleSpace = math_ceil(listFrame.AbsoluteSize.Y/ENTRY_BOUND)
	updateList()
end

local actionButtons

do
	actionButtons = {}

	local totalActions = 1
	local currentActions = totalActions
	local function makeButton(icon,over,name,vis,cond)
		local buttonEnabled = false
		local button = Create(SpecialIcon('ImageButton',icon),{
			Name = name .. "Button",
			Visible = Option.Modifiable and Option.Selectable,
			Position = UDim2_new(1,-(GUI_SIZE+2)*currentActions+2,.25,-GUI_SIZE/2),
			Size = UDim2_new(0,GUI_SIZE,0,GUI_SIZE),
			Parent = headerFrame
		})
		local tipText = Create('TextLabel',{
			Name = name .. "Text",
			Text = name,
			Visible = false,
			BackgroundTransparency = 1,
			TextXAlignment = 'Right',
			Font = FONT,
			FontSize = FONT_SIZE,
			Position = UDim2_new(),
			Size = UDim2_new(1,-(GUI_SIZE+2)*totalActions,1,0),
			Parent = headerFrame
		})
		Connect(button.MouseEnter, function()
			if buttonEnabled then
				button.BackgroundTransparency = .9
			end
		end)
		Connect(button.MouseLeave, function()
			button.BackgroundTransparency = 1
		end)
		currentActions += 1
		table_insert(actionButtons, {Obj = button, Cond = cond})
		QuickButtons[#actionButtons+1] = {Obj = button, Cond = cond, Toggle = function(on)
			buttonEnabled = on and true or false
			SpecialIcon(button, on and over or icon)
		end}
		return button
	end
	Connect(makeButton(ActionTextures.Delete[1], ActionTextures.Delete[2],"Delete", true, function()
		return #Selection:Get() > 0
	end).Activated, function()
		if not Option.Modifiable then return end
		for _, Selected in ipairs(Selection:Get()) do
			pcall(game.Destroy, Selected)
		end
		Selection:Set({})
	end)
	Connect(makeButton(ActionTextures.Paste[1], ActionTextures.Paste[2], "Paste", true, function()
		return #Selection:Get() > 0 and #Clipboard > 0
	end).Activated, function()
		if not Option.Modifiable then return end
		local parent = Selection.List[1] or workspace
		for _, Copied in next, Clipboard do
			Clone(Copied).Parent = parent
		end
	end)
	Connect(makeButton(ActionTextures.Copy[1], ActionTextures.Copy[2],"Copy", true, function()
		return #Selection:Get() > 0
	end).Activated, function()
		if not Option.Modifiable then return end
		local list = Selection.List
		for _, Selected in next, list do
			table_insert(Clipboard, Clone(Selected))
		end
		updateActions()
	end)
	makeButton(ActionTextures.AddStar[1], ActionTextures.AddStar[2], "Star", true, function()
		return #Selection:Get() > 0
	end)
	makeButton(ActionTextures.Starred[1], ActionTextures.Starred[2], "Starred", true, function()
		return true
	end)
end

do
	local optionCallback = {
		Modifiable = function(p1)
			for i = 1, #actionButtons do
				actionButtons[i].Obj.Visible = p1 and Option.Selectable
			end
			cancelReparentDrag()
		end,
		Selectable = function(p1)
			for i = 1,#actionButtons do
				actionButtons[i].Obj.Visible = p1 and Option.Modifiable
			end
			cancelSelectDrag()
			Selection:Set({})
		end
	}

	SetOption_Bindable.OnInvoke = function(p1, p2)
		if optionCallback[p1] then
			Option[p1] = p2
			optionCallback[p1](p2)
		end
	end

	GetOption_Bindable.OnInvoke = function(p1)
		if p1 then
			return Option[p1]
		else
			local A = {}
			for B, C in next, Option do
				A[B] = C
			end
			return A
		end
	end
end

Connect(UserInputService.InputBegan, function(p1)
	local A = p1.KeyCode
	if A == Enum.KeyCode.LeftControl or A == Enum.KeyCode.LeftShift then
		HoldingCtrl = true
	end
end)

Connect(UserInputService.InputEnded, function(p1)
	local A = p1.KeyCode
	if A == Enum.KeyCode.LeftControl or A == Enum.KeyCode.LeftShift then
		HoldingCtrl = false
	end
end)

while not RbxApi  do
	RbxApi = GetApi_Bindable:Invoke()
	wait()
end

Connect(explorerFilter.FocusLost, function(p1)
	if p1 then
		rawUpdateList()
	end
end)

CurrentInsertObjectWindow = CreateInsertObjectMenu(GetClasses(), "", false, function(option)
	CurrentInsertObjectWindow.Visible = false
	for _, ArrayItem in ipairs(Selection:Get()) do
		pcall(function()
			Instance_new(option, ArrayItem)
		end)
	end
	DestroyRightClick()
end)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBXEAD44905226E4E6CB26FFA07771FB398">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetOption</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBXBB893C677DB047B2A77046642AEEA047">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetPrint</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX381D241E670A426094FD692D9F6BBE6C">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetSelection</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBXA7FCCB56678540A6BFEF696DC506E6DF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SetOption</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX464878CF38674F1FA8F7683A79C2F1E9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SetSelection</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableEvent" referent="RBXDABD86616EAD4A909AD74C0C398ACF80">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SelectionChanged</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="LocalScript" referent="RBX72FFB7A2BCD4408BA86994D34F46777A">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LocalScript</string>
					<string name="ScriptGuid">{95C7C1A9-E500-4D05-827F-8A03F5E5DEBD}</string>
					<ProtectedString name="Source">-- initial states
local game = game
local workspace = workspace
local pcall = pcall
local unpack = unpack
local next = next
local tick = tick
local ipairs = ipairs
local script = script
local tostring = tostring
local type = type
local typeof = typeof
local Instance_new = Instance.new
local UDim2_new = UDim2.new
local Vector2_new = Vector2.new
local Vector3_new = Vector3.new
local NumberRange_new = NumberRange.new
local Color3_new = Color3.new
local Color3_fromRGB = Color3.fromRGB
local table_insert = table.insert
local table_remove = table.remove
local table_sort = table.sort
local table_concat = table.concat
local table_clear = table.clear
local string_split = string.split
local string_find = string.find
local string_match = string.match
local string_lower = string.lower
local string_sub = string.sub
local string_byte = string.byte
local string_gsub = string.gsub
local string_rep = string.rep
local math_floor = math.floor
local math_ceil = math.ceil
local math_random = math.random
local math_huge = math.huge
local Option = {
&#9;-- can modify object parents in the hierarchy
&#9;Modifiable = false;
&#9;-- can select objects
&#9;Selectable = true;
}

-- MERELY

Option.Modifiable = true

-- END MERELY

-- general size of GUI objects, in pixels
local GUI_SIZE = 16
-- padding between items within each entry
local ENTRY_PADDING = 1
-- padding between each entry
local ENTRY_MARGIN = 1

local explorerPanel = script.Parent
local Input = game:GetService(&quot;UserInputService&quot;)
local HoldingCtrl = false
local HoldingShift = false

local addObject
local removeObject
local gameChildren = {}

table.insert(gameChildren, game:GetService(&quot;Workspace&quot;))
table.insert(gameChildren, game:GetService(&quot;Players&quot;))
table.insert(gameChildren, game:GetService(&quot;Lighting&quot;))
table.insert(gameChildren, game:GetService(&quot;ReplicatedFirst&quot;))
table.insert(gameChildren, game:GetService(&quot;ReplicatedStorage&quot;))

pcall(function()
&#9;table.insert(gameChildren, game:GetService(&quot;CoreGui&quot;))
end)

table.insert(gameChildren, game:GetService(&quot;StarterGui&quot;))
table.insert(gameChildren, game:GetService(&quot;StarterPack&quot;))
table.insert(gameChildren, game:GetService(&quot;StarterPlayer&quot;))
table.insert(gameChildren, game:GetService(&quot;SoundService&quot;))
table.insert(gameChildren, game:GetService(&quot;Chat&quot;))
table.insert(gameChildren, game:GetService(&quot;LocalizationService&quot;))
table.insert(gameChildren, game:GetService(&quot;TestService&quot;))

local childrenGame = {}

childrenGame[game:GetService(&quot;Workspace&quot;)] = true
childrenGame[game:GetService(&quot;Players&quot;)] = true
childrenGame[game:GetService(&quot;Lighting&quot;)] = true
childrenGame[game:GetService(&quot;ReplicatedFirst&quot;)] = true
childrenGame[game:GetService(&quot;ReplicatedStorage&quot;)] = true

pcall(function()
&#9;childrenGame[game:GetService(&quot;CoreGui&quot;)] = true
end)

childrenGame[game:GetService(&quot;StarterGui&quot;)] = true
childrenGame[game:GetService(&quot;StarterPack&quot;)] = true
childrenGame[game:GetService(&quot;StarterPlayer&quot;)] = true
childrenGame[game:GetService(&quot;SoundService&quot;)] = true
childrenGame[game:GetService(&quot;Chat&quot;)] = true
childrenGame[game:GetService(&quot;LocalizationService&quot;)] = true
childrenGame[game:GetService(&quot;TestService&quot;)] = true

local MuteHiddenItems = true

local DexOutput = Instance.new(&quot;Folder&quot;)
DexOutput.Name = &quot;Output&quot;
local DexOutputMain = Instance.new(&quot;ScreenGui&quot;, DexOutput)
DexOutputMain.Name = &quot;Dex Output&quot;

local HiddenEntries = Instance.new(&quot;Folder&quot;)
local HiddenGame = Instance.new(&quot;Folder&quot;)
HiddenEntries.Name = &quot;HiddenEntriesParent&quot;
local HiddenEntriesMain = Instance.new(&quot;TextButton&quot;, HiddenEntries)
Instance.new(&quot;Folder&quot;, HiddenEntriesMain)

local function NameHiddenEntries()
&#9;if MuteHiddenItems then
&#9;&#9;HiddenEntriesMain.Name = &quot;Expand to view (&quot; .. (#game:children() - #gameChildren) .. &quot;) hidden items&quot;
&#9;else
&#9;&#9;HiddenEntriesMain.Name = &quot;Collapse to hide (&quot; .. (#game:children() - #gameChildren) .. &quot;) more items&quot;
&#9;end
end

NameHiddenEntries()

print = function(...)
&#9;local Obj = Instance.new(&quot;Dialog&quot;)
&#9;Obj.Parent = DexOutputMain
&#9;Obj.Name = &quot;&quot;
&#9;for i,v in pairs({...}) do
&#9;&#9;Obj.Name = Obj.Name .. tostring(v) .. &quot; &quot;
&#9;end
end

explorerPanel:WaitForChild(&quot;GetPrint&quot;).OnInvoke = function()
&#9;return print
end

--[[

# Explorer Panel

A GUI panel that displays the game hierarchy.


## Selection Bindables

- `Function GetSelection ( )`

&#9;Returns an array of objects representing the objects currently
&#9;selected in the panel.

- `Function SetSelection ( Objects selection )`

&#9;Sets the objects that are selected in the panel. `selection` is an array
&#9;of objects.

- `Event SelectionChanged ( )`


&#9;Fired after the selection changes.


## Option Bindables

- `Function GetOption ( string optionName )`

&#9;If `optionName` is given, returns the value of that option. Otherwise,
&#9;returns a table of options and their current values.

- `Function SetOption ( string optionName, bool value )`

&#9;Sets `optionName` to `value`.

&#9;Options:

&#9;- Modifiable

&#9;&#9;Whether objects can be modified by the panel.

&#9;&#9;Note that modifying objects depends on being able to select them. If
&#9;&#9;Selectable is false, then Actions will not be available. Reparenting
&#9;&#9;is still possible, but only for the dragged object.

&#9;- Selectable

&#9;&#9;Whether objects can be selected.

&#9;&#9;If Modifiable is false, then left-clicking will perform a drag
&#9;&#9;selection.

## Updates

- 2013-09-18
&#9;- Fixed explorer icons to match studio explorer.

- 2013-09-14
&#9;- Added GetOption and SetOption bindables.
&#9;&#9;- Option: Modifiable; sets whether objects can be modified by the panel.
&#9;&#9;- Option: Selectable; sets whether objects can be selected.
&#9;- Slight modification to left-click selection behavior.
&#9;- Improved layout and scaling.

- 2013-09-13
&#9;- Added drag to reparent objects.
&#9;&#9;- Left-click to select/deselect object.
&#9;&#9;- Left-click and drag unselected object to reparent single object.
&#9;&#9;- Left-click and drag selected object to move reparent entire selection.
&#9;&#9;- Right-click while dragging to cancel.

- 2013-09-11
&#9;- Added explorer panel header with actions.
&#9;&#9;- Added Cut action.
&#9;&#9;- Added Copy action.
&#9;&#9;- Added Paste action.
&#9;&#9;- Added Delete action.
&#9;- Added drag selection.
&#9;&#9;- Left-click: Add to selection on drag.
&#9;&#9;- Right-click: Add to or remove from selection on drag.
&#9;- Ensured SelectionChanged fires only when the selection actually changes.
&#9;- Added documentation and change log.
&#9;- Fixed thread issue.

- 2013-09-09
&#9;- Added basic multi-selection.
&#9;&#9;- Left-click to set selection.
&#9;&#9;- Right-click to add to or remove from selection.
&#9;- Removed &quot;Selection&quot; ObjectValue.
&#9;&#9;- Added GetSelection BindableFunction.
&#9;&#9;- Added SetSelection BindableFunction.
&#9;&#9;- Added SelectionChanged BindableEvent.
&#9;- Changed font to SourceSans.

- 2013-08-31
&#9;- Improved GUI sizing based off of `GUI_SIZE` constant.
&#9;- Automatic font size detection.

- 2013-08-27
&#9;- Initial explorer panel.


## Todo

- Sorting
&#9;- by ExplorerOrder
&#9;- by children
&#9;- by name
- Drag objects to reparent

]]
&#9;&#9;

local function dexWriteFile(dest, cont, name, filter, ext)
&#9;if writefileas then
&#9;&#9;writefileas(cont, name, filter, ext)
&#9;&#9;return true
&#9;elseif writefile then
&#9;&#9;writefile(dest, cont)
&#9;&#9;return true
&#9;else
&#9;&#9;return false
&#9;end&#9;
end

local SaveInstance
local SaveInstance
do
&#9;local function fetchAPI()
&#9;local api
&#9;local s,e = pcall(function()
&#9;&#9;local version = game:HttpGet(&quot;http://setup.roblox.com/versionQTStudio&quot;,true)
&#9;&#9;local rawApi = game:HttpGet(&quot;http://setup.roblox.com/&quot;..version..&quot;-API-Dump.json&quot;,true)
&#9;&#9;api = game:GetService(&quot;HttpService&quot;):JSONDecode(rawApi)
&#9;end)
&#9;if not s then return end
&#9;local classes,enums = {},{}
&#9;
&#9;for _,class in pairs(api.Classes) do
&#9;&#9;local newClass = {}
&#9;&#9;newClass.Name = class.Name
&#9;&#9;newClass.Superclass = class.Superclass
&#9;&#9;newClass.Properties = {}
&#9;&#9;newClass.Functions = {}
&#9;&#9;newClass.Events = {}
&#9;&#9;newClass.Callbacks = {}
&#9;&#9;newClass.Tags = {}
&#9;&#9;
&#9;&#9;if class.Tags then for c,tag in pairs(class.Tags) do newClass.Tags[tag] = true end end
&#9;&#9;for __,member in pairs(class.Members) do
&#9;&#9;&#9;local mType = member.MemberType
&#9;&#9;&#9;if mType == &quot;Property&quot; then
&#9;&#9;&#9;&#9;local newProp = {}
&#9;&#9;&#9;&#9;newProp.Name = member.Name
&#9;&#9;&#9;&#9;newProp.Class = class.Name
&#9;&#9;&#9;&#9;newProp.ValueType = member.ValueType.Name
&#9;&#9;&#9;&#9;newProp.Category = member.Category
&#9;&#9;&#9;&#9;newProp.Serialization = member.Serialization
&#9;&#9;&#9;&#9;newProp.Tags = {}
&#9;&#9;&#9;&#9;if member.Tags then for c,tag in pairs(member.Tags) do newProp.Tags[tag] = true end end
&#9;&#9;&#9;&#9;table.insert(newClass.Properties,newProp)
&#9;&#9;&#9;elseif mType == &quot;Function&quot; then
&#9;&#9;&#9;&#9;local newFunc = {}
&#9;&#9;&#9;&#9;newFunc.Name = member.Name
&#9;&#9;&#9;&#9;newFunc.Class = class.Name
&#9;&#9;&#9;&#9;newFunc.Parameters = {}
&#9;&#9;&#9;&#9;newFunc.ReturnType = member.ReturnType.Name
&#9;&#9;&#9;&#9;newFunc.Tags = {}
&#9;&#9;&#9;&#9;for c,param in pairs(member.Parameters) do
&#9;&#9;&#9;&#9;&#9;table.insert(newFunc.Parameters,{Name = param.Name, Type = param.Type.Name})
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if member.Tags then for c,tag in pairs(member.Tags) do newFunc.Tags[tag] = true end end
&#9;&#9;&#9;&#9;table.insert(newClass.Functions,newFunc)
&#9;&#9;&#9;elseif mType == &quot;Event&quot; then
&#9;&#9;&#9;&#9;local newEvent = {}
&#9;&#9;&#9;&#9;newEvent.Name = member.Name
&#9;&#9;&#9;&#9;newEvent.Class = class.Name
&#9;&#9;&#9;&#9;newEvent.Parameters = {}
&#9;&#9;&#9;&#9;newEvent.Tags = {}
&#9;&#9;&#9;&#9;for c,param in pairs(member.Parameters) do
&#9;&#9;&#9;&#9;&#9;table.insert(newEvent.Parameters,{Name = param.Name, Type = param.Type.Name})
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if member.Tags then for c,tag in pairs(member.Tags) do newEvent.Tags[tag] = true end end
&#9;&#9;&#9;&#9;table.insert(newClass.Events,newEvent)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;classes[class.Name] = newClass
&#9;end
&#9;
&#9;for _,enum in pairs(api.Enums) do
&#9;&#9;local newEnum = {}
&#9;&#9;newEnum.Name = enum.Name
&#9;&#9;newEnum.Items = {}
&#9;&#9;newEnum.Tags = {}
&#9;&#9;
&#9;&#9;if enum.Tags then for c,tag in pairs(enum.Tags) do newEnum.Tags[tag] = true end end
&#9;&#9;for __,item in pairs(enum.Items) do
&#9;&#9;&#9;local newItem = {}
&#9;&#9;&#9;newItem.Name = item.Name
&#9;&#9;&#9;newItem.Value = item.Value
&#9;&#9;&#9;table.insert(newEnum.Items,newItem)
&#9;&#9;end
&#9;&#9;
&#9;&#9;enums[enum.Name] = newEnum
&#9;end
&#9;
&#9;local function getMember(class,member)
&#9;&#9;if not classes[class] or not classes[class][member] then return end
&#9;    local result = {}
&#9;
&#9;    local currentClass = classes[class]
&#9;    while currentClass do
&#9;        for _,entry in pairs(currentClass[member]) do
&#9;            table.insert(result,entry)
&#9;        end
&#9;        currentClass = classes[currentClass.Superclass]
&#9;    end
&#9;
&#9;    table.sort(result,function(a,b) return a.Name &lt; b.Name end)
&#9;    return result
&#9;end
&#9;
&#9;return {
&#9;&#9;Classes = classes,
&#9;&#9;Enums = enums,
&#9;&#9;GetMember = getMember
&#9;}
&#9;end
&#9;
&#9;-- Dex Serializer Module
&#9;local function SerializerModule()
&#9;-- Modules
&#9;local Serializer,API
&#9;
&#9;-- Un-init
&#9;local _writefile,_getnilinstances,oldIndex,classes,enums
&#9;
&#9;-- Rest
&#9;local t_ins,t_concat = table.insert,table.concat
&#9;local buffer = {}
&#9;local refCount = 0
&#9;local getChildren = Instance.new(&quot;Part&quot;).GetChildren
&#9;local toDecompile = {}
&#9;local saveFilter = {}
&#9;local instDir = {}
&#9;
&#9;local elyFuncs = false
&#9;
&#9;local xmlReplace = {
&#9;&#9;[&quot;&apos;&quot;] = &quot;&amp;apos;&quot;,
&#9;&#9;[&quot;\&quot;&quot;] = &quot;&amp;quot;&quot;,
&#9;&#9;[&quot;&lt;&quot;] = &quot;&amp;lt;&quot;,
&#9;&#9;[&quot;&gt;&quot;] = &quot;&amp;gt;&quot;,
&#9;&#9;[&quot;&amp;&quot;] = &quot;&amp;amp;&quot;
&#9;}
&#9;
&#9;local propBypass = {
&#9;&#9;[&quot;BasePart&quot;] = {
&#9;&#9;&#9;[&quot;Size&quot;] = true,
&#9;&#9;&#9;[&quot;Color&quot;] = true,
&#9;&#9;},
&#9;&#9;[&quot;Part&quot;] = {
&#9;&#9;&#9;[&quot;Shape&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;Fire&quot;] = {
&#9;&#9;&#9;[&quot;Heat&quot;] = true,
&#9;&#9;&#9;[&quot;Size&quot;] = true,
&#9;&#9;},
&#9;&#9;[&quot;Smoke&quot;] = {
&#9;&#9;&#9;[&quot;Opacity&quot;] = true,
&#9;&#9;&#9;[&quot;RiseVelocity&quot;] = true,
&#9;&#9;&#9;[&quot;Size&quot;] = true,
&#9;&#9;},
&#9;&#9;[&quot;DoubleConstrainedValue&quot;] = {
&#9;&#9;&#9;[&quot;Value&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;IntConstrainedValue&quot;] = {
&#9;&#9;&#9;[&quot;Value&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;TrussPart&quot;] = {
&#9;&#9;&#9;[&quot;Style&quot;] = true
&#9;&#9;}
&#9;}
&#9;
&#9;local propFilter = {
&#9;&#9;[&quot;BaseScript&quot;] = {
&#9;&#9;&#9;[&quot;LinkedSource&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;ModuleScript&quot;] = {
&#9;&#9;&#9;[&quot;LinkedSource&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;Players&quot;] = {
&#9;&#9;&#9;[&quot;CharacterAutoLoads&quot;] = true
&#9;&#9;}
&#9;}
&#9;
&#9;local sProps = setmetatable({},{__index = function(self,class)
&#9;&#9;local props = {}
&#9;&#9;
&#9;&#9;local apiProps = API.GetMember(class,&quot;Properties&quot;) or {}
&#9;&#9;for i,v in pairs(apiProps) do
&#9;&#9;&#9;if (v.Serialization.CanSave and not v.Tags.NotScriptable) or (propBypass[v.Class] and propBypass[v.Class][v.Name]) then
&#9;&#9;&#9;&#9;if not propFilter[v.Class] or not propFilter[v.Class][v.Name] then
&#9;&#9;&#9;&#9;&#9;local s,e = pcall(function() local exist = instDir[class][v.Name] end)
&#9;&#9;&#9;&#9;&#9;if s then table.insert(props,v) end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;self[class] = props
&#9;&#9;
&#9;&#9;return props
&#9;end})
&#9;
&#9;local testInsts = setmetatable({},{__index = function(self,class)
&#9;&#9;local s,testInst = pcall(function() return Instance.new(class) end)
&#9;&#9;local testInstTable = {}
&#9;&#9;
&#9;&#9;if testInst then
&#9;&#9;&#9;for i,v in pairs(sProps[class]) do
&#9;&#9;&#9;&#9;testInstTable[v.Name] = testInst[v.Name]
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;self[class] = testInstTable
&#9;&#9;
&#9;&#9;return testInstTable
&#9;end})
&#9;
&#9;local refMt = {__index = function(self,inst)
&#9;&#9;if not inst then return &quot;&quot; end
&#9;&#9;refCount = refCount + 1
&#9;&#9;self[inst] = refCount
&#9;&#9;return refCount
&#9;end}
&#9;local refs = setmetatable({},refMt)
&#9;
&#9;local valueHandlers = {
&#9;&#9;[&quot;bool&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;bool name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..tostring(val)..&apos;&lt;/bool&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;float&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;float name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val..&apos;&lt;/float&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;int&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;int name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val..&apos;&lt;/int&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;int64&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;int64 name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val..&apos;&lt;/int64&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;double&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;double name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val..&apos;&lt;/double&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;string&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;string name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val:gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)..&apos;&lt;/string&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;BrickColor&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;int name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val.Number..&apos;&lt;/int&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Vector2&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Vector2 name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;X&gt;&apos;..val.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..val.Y..&apos;&lt;/Y&gt;\
&#9;&lt;/Vector2&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Vector3&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Vector3 name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;X&gt;&apos;..val.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..val.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..val.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/Vector3&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;CFrame&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,(&apos;\n&lt;CoordinateFrame name=&quot;&apos;..name..[[&quot;&gt;
&#9;&lt;X&gt;%f&lt;/X&gt;
&#9;&lt;Y&gt;%f&lt;/Y&gt;
&#9;&lt;Z&gt;%f&lt;/Z&gt;
&#9;&lt;R00&gt;%f&lt;/R00&gt;
&#9;&lt;R01&gt;%f&lt;/R01&gt;
&#9;&lt;R02&gt;%f&lt;/R02&gt;
&#9;&lt;R10&gt;%f&lt;/R10&gt;
&#9;&lt;R11&gt;%f&lt;/R11&gt;
&#9;&lt;R12&gt;%f&lt;/R12&gt;
&#9;&lt;R20&gt;%f&lt;/R20&gt;
&#9;&lt;R21&gt;%f&lt;/R21&gt;
&#9;&lt;R22&gt;%f&lt;/R22&gt;
&#9;&lt;/CoordinateFrame&gt;]]):format(val:components()))
&#9;&#9;end,
&#9;&#9;[&quot;Content&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Content name=&quot;&apos;..name..&apos;&quot;&gt;&lt;url&gt;&apos;..val:gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)..&apos;&lt;/url&gt;&lt;/Content&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;UDim&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;UDim name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;S&gt;&apos;..val.Scale..&apos;&lt;/S&gt;\
&#9;&lt;O&gt;&apos;..val.Offset..&apos;&lt;/O&gt;\
&#9;&lt;/UDim&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;UDim2&quot;] = function(name,val)
&#9;&#9;&#9;local x = val.X
&#9;&#9;&#9;local y = val.Y
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;UDim2 name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;XS&gt;&apos;..x.Scale..&apos;&lt;/XS&gt;\
&#9;&lt;XO&gt;&apos;..x.Offset..&apos;&lt;/XO&gt;\
&#9;&lt;YS&gt;&apos;..y.Scale..&apos;&lt;/YS&gt;\
&#9;&lt;YO&gt;&apos;..y.Offset..&apos;&lt;/YO&gt;\
&#9;&lt;/UDim2&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Color3&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Color3 name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;R&gt;&apos;..val.r..&apos;&lt;/R&gt;\
&#9;&lt;G&gt;&apos;..val.g..&apos;&lt;/G&gt;\
&#9;&lt;B&gt;&apos;..val.b..&apos;&lt;/B&gt;\
&#9;&lt;/Color3&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;NumberRange&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;NumberRange name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..tostring(val)..&apos;&lt;/NumberRange&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;NumberSequence&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;NumberSequence name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..tostring(val)..&apos;&lt;/NumberSequence&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;ColorSequence&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;ColorSequence name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..tostring(val)..&apos;&lt;/ColorSequence&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Rect&quot;] = function(name,val)
&#9;&#9;&#9;local min,max = val.Min,val.Max
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Rect2D name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;min&gt;\
&#9;&lt;X&gt;&apos;..min.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..min.Y..&apos;&lt;/Y&gt;\
&#9;&lt;/min&gt;\
&#9;&lt;max&gt;\
&#9;&lt;X&gt;&apos;..max.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..max.Y..&apos;&lt;/Y&gt;\
&#9;&lt;/max&gt;\
&#9;&lt;/Rect2D&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Object&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Ref name=&quot;&apos;..name..&apos;&quot;&gt;RBX&apos;..refs[val]..&apos;&lt;/Ref&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;PhysicalProperties&quot;] = function(name,val)
&#9;&#9;&#9;if val then
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;PhysicalProperties name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;CustomPhysics&gt;true&lt;/CustomPhysics&gt;\
&#9;&lt;Density&gt;&apos;..val.Density..&apos;&lt;/Density&gt;\
&#9;&lt;Friction&gt;&apos;..val.Friction..&apos;&lt;/Friction&gt;\
&#9;&lt;Elasticity&gt;&apos;..val.Elasticity..&apos;&lt;/Elasticity&gt;\
&#9;&lt;FrictionWeight&gt;&apos;..val.FrictionWeight..&apos;&lt;/FrictionWeight&gt;\
&#9;&lt;ElasticityWeight&gt;&apos;..val.ElasticityWeight..&apos;&lt;/ElasticityWeight&gt;\
&#9;&lt;/PhysicalProperties&gt;&apos;)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;PhysicalProperties name=&quot;&apos;..name..&apos;&quot;&gt;\n&lt;CustomPhysics&gt;false&lt;/CustomPhysics&gt;\n&lt;/PhysicalProperties&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;Faces&quot;] = function(name,val)
&#9;&#9;&#9;local faceInt = (val.Front and 32 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Bottom and 16 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Left and 8 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Back and 4 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Top and 2 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Right and 1 or 0)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Faces name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;faces&gt;&apos;..faceInt..&apos;&lt;/faces&gt;\
&#9;&lt;/Faces&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Axes&quot;] = function(name,val)
&#9;&#9;&#9;local axisInt = (val.Z and 4 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Y and 2 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.X and 1 or 0)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Axes name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;axes&gt;&apos;..axisInt..&apos;&lt;/axes&gt;\
&#9;&lt;/Faces&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Ray&quot;] = function(name,val)
&#9;&#9;&#9;local origin = val.Origin
&#9;&#9;&#9;local direction = val.Direction
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Ray name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;origin&gt;\
&#9;&lt;X&gt;&apos;..origin.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..origin.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..origin.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/origin&gt;\
&#9;&lt;direction&gt;\
&#9;&lt;X&gt;&apos;..direction.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..direction.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..direction.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/direction&gt;\
&#9;&lt;/Ray&gt;&apos;)
&#9;&#9;end,
&#9;}
&#9;
&#9;local function getNS(inst,name)
&#9;&#9;rfl_setscriptable(inst,name,true)
&#9;&#9;local propVal = oldIndex and oldIndex(inst,name) or inst[name]
&#9;&#9;rfl_setscriptable(inst,name,false)
&#9;&#9;return propVal
&#9;end
&#9;
&#9;local function getBS(inst,name)
&#9;&#9;local bs = getbspval(inst,name,true)
&#9;&#9;if bs then
&#9;&#9;&#9;return &quot;&lt;![CDATA[&quot;..bs..&quot;]]&gt;&quot;
&#9;&#9;else
&#9;&#9;&#9;return &quot;&quot;
&#9;&#9;end
&#9;end
&#9;
&#9;local specialInst = {
&#9;&#9;[&quot;UnionOperation&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then -- Assume all ely funcs defined
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Content name=&quot;AssetId&quot;&gt;&lt;url&gt;&apos;..getNS(inst,&quot;AssetId&quot;):gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)..&apos;&lt;/url&gt;&lt;/Content&gt;&apos;)
&#9;&#9;&#9;&#9;local initialSize = getNS(inst,&quot;InitialSize&quot;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Vector3 name=&quot;InitialSize&quot;&gt;\
&#9;&lt;X&gt;&apos;..initialSize.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..initialSize.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..initialSize.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/Vector3&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;ChildData&quot;&gt;&apos;..getBS(inst,&quot;ChildData&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;MeshData&quot;&gt;&apos;..getBS(inst,&quot;MeshData&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;PhysicsData&quot;&gt;&apos;..getBS(inst,&quot;PhysicsData&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;MeshPart&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then -- Assume all ely funcs defined
&#9;&#9;&#9;&#9;local initialSize = getNS(inst,&quot;InitialSize&quot;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Vector3 name=&quot;InitialSize&quot;&gt;\
&#9;&lt;X&gt;&apos;..initialSize.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..initialSize.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..initialSize.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/Vector3&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;PhysicsData&quot;&gt;&apos;..getBS(inst,&quot;PhysicsData&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;Terrain&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;MaterialColors&quot;&gt;&apos;..getBS(inst,&quot;MaterialColors&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;SmoothGrid&quot;&gt;&apos;..getBS(inst,&quot;SmoothGrid&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;TerrainRegion&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;SmoothGrid&quot;&gt;&apos;..getBS(inst,&quot;SmoothGrid&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;BinaryStringValue&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;Value&quot;&gt;&apos;..getBS(inst,&quot;Value&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;Workspace&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;token name=&quot;AutoJointsMode&quot;&gt;&apos;..getNS(inst,&quot;AutoJointsMode&quot;).Value..&apos;&lt;/token&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;bool name=&quot;PGSPhysicsSolverEnabled&quot;&gt;&apos;..tostring(inst:PGSIsEnabled())..&apos;&lt;/bool&gt;&apos;)
&#9;&#9;&#9;local groupTable = {}
&#9;&#9;&#9;for i,v in pairs(game:GetService(&quot;PhysicsService&quot;):GetCollisionGroups()) do
&#9;&#9;&#9;&#9;t_ins(groupTable,v.name:gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)..&quot;^&quot;..v.id..&quot;^&quot;..v.mask)
&#9;&#9;&#9;end
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;string name=&quot;CollisionGroups&quot;&gt;&apos;..t_concat(groupTable,&quot;\\&quot;)..&apos;&lt;/string&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Humanoid&quot;] = function(inst)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;float name=&quot;Health_XML&quot;&gt;&apos;..inst.Health..&apos;&lt;/float&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Sound&quot;] = function(inst)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;float name=&quot;xmlRead_MaxDistance_3&quot;&gt;&apos;..inst.MaxDistance..&apos;&lt;/float&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;WeldConstraint&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;valueHandlers[&quot;CFrame&quot;](&quot;CFrame0&quot;,getNS(inst,&quot;CFrame0&quot;))
&#9;&#9;&#9;&#9;valueHandlers[&quot;CFrame&quot;](&quot;CFrame1&quot;,getNS(inst,&quot;CFrame1&quot;))
&#9;&#9;&#9;end
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Ref name=&quot;Part0Internal&quot;&gt;RBX&apos;..refs[inst.Part0]..&apos;&lt;/Ref&gt;&apos;)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Ref name=&quot;Part1Internal&quot;&gt;RBX&apos;..refs[inst.Part1]..&apos;&lt;/Ref&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;LocalScript&quot;] = function(inst)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;ProtectedString name=&quot;Source&quot;&gt;&apos;)
&#9;&#9;&#9;t_ins(buffer,&quot;&quot;)
&#9;&#9;&#9;t_ins(buffer,&apos;&lt;/ProtectedString&gt;&apos;)
&#9;&#9;&#9;t_ins(toDecompile,{inst,#buffer-1})
&#9;&#9;end,
&#9;&#9;[&quot;ModuleScript&quot;] = function(inst)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;ProtectedString name=&quot;Source&quot;&gt;&apos;)
&#9;&#9;&#9;t_ins(buffer,&quot;&quot;)
&#9;&#9;&#9;t_ins(buffer,&apos;&lt;/ProtectedString&gt;&apos;)
&#9;&#9;&#9;t_ins(toDecompile,{inst,#buffer-1})
&#9;&#9;end,
&#9;}
&#9;
&#9;local savePlaceBlacklist = {
&#9;&#9;[&quot;CoreGui&quot;] = true,
&#9;&#9;[&quot;CorePackages&quot;] = true
&#9;}
&#9;
&#9;local function writeXML(inst)
&#9;&#9;if saveFilter[inst] then return end
&#9;&#9;
&#9;&#9;local class = oldIndex and oldIndex(inst,&quot;ClassName&quot;) or inst.ClassName&#9;
&#9;&#9;if not instDir[class] then instDir[class] = inst end
&#9;&#9;local testInst = testInsts[class]
&#9;&#9;
&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;&apos;..class..&apos;&quot; referent=&quot;RBX&apos;..refs[inst]..&apos;&quot;&gt;\n&lt;Properties&gt;&apos;)
&#9;&#9;
&#9;&#9;for _,prop in pairs(sProps[class]) do
&#9;&#9;&#9;local propName = prop.Name
&#9;&#9;&#9;local propVal = oldIndex and oldIndex(inst,propName) or inst[propName]
&#9;&#9;&#9;if testInst[propName] ~= propVal then
&#9;&#9;&#9;&#9;local valueType = prop.ValueType
&#9;&#9;&#9;&#9;if valueHandlers[valueType] then
&#9;&#9;&#9;&#9;&#9;valueHandlers[valueType](propName,propVal)
&#9;&#9;&#9;&#9;elseif enums[valueType] then
&#9;&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;token name=&quot;&apos;..propName..&apos;&quot;&gt;&apos;..propVal.Value..&apos;&lt;/token&gt;&apos;)
&#9;&#9;&#9;&#9;elseif classes[valueType] then
&#9;&#9;&#9;&#9;&#9;valueHandlers[&quot;Object&quot;](propName,propVal)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;if specialInst[class] then
&#9;&#9;&#9;specialInst[class](inst)
&#9;&#9;end
&#9;&#9;
&#9;&#9;t_ins(buffer,&quot;\n&lt;/Properties&gt;&quot;)
&#9;&#9;
&#9;&#9;for i,v in pairs(getChildren(inst)) do
&#9;&#9;&#9;writeXML(v)
&#9;&#9;end
&#9;&#9;
&#9;&#9;t_ins(buffer,&quot;\n&lt;/Item&gt;&quot;)
&#9;end
&#9;
&#9;local function resetState()
&#9;&#9;buffer = {}
&#9;&#9;refs = setmetatable({},refMt)
&#9;&#9;refCount = 0
&#9;&#9;toDecompile = {}
&#9;&#9;saveFilter = {}
&#9;&#9;instDir = {}
&#9;end
&#9;
&#9;local defaultSettings = {
&#9;&#9;DecompileMode = 0,
&#9;&#9;NilInstances = false,
&#9;&#9;RemovePlayers = true,
&#9;&#9;SavePlayerDescendants = false,
&#9;&#9;DecompileTimeout = 10,
&#9;&#9;UnluacMaxThreads = 5,
&#9;&#9;DecompileIgnore = {}
&#9;}
&#9;
&#9;Serializer = {
&#9;&#9;Init = function(data)
&#9;&#9;&#9;API = data.API
&#9;&#9;&#9;_writefile = data.WriteFile
&#9;&#9;&#9;_getnilinstances = data.GetNilInstances
&#9;&#9;&#9;oldIndex = data.OldIndex
&#9;&#9;&#9;
&#9;&#9;&#9;classes = API.Classes
&#9;&#9;&#9;enums = API.Enums
&#9;&#9;&#9;
&#9;&#9;&#9;elyFuncs = getbspval and rfl_setscriptable
&#9;&#9;&#9;
&#9;&#9;&#9;Serializer.ResetSettings()
&#9;&#9;end,
&#9;&#9;
&#9;&#9;Settings = {},
&#9;&#9;
&#9;&#9;ResetSettings = function()
&#9;&#9;&#9;Serializer.Settings = {}
&#9;&#9;&#9;for i,v in pairs(defaultSettings) do
&#9;&#9;&#9;&#9;Serializer.Settings[i] = v
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;
&#9;&#9;SaveInstance = function(inst,name,sets)
&#9;&#9;&#9;Serializer.ResetSettings()
&#9;&#9;&#9;
&#9;&#9;&#9;for i,v in pairs(sets or {}) do
&#9;&#9;&#9;&#9;Serializer.Settings[i] = v
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;resetState()
&#9;&#9;&#9;
&#9;&#9;&#9;if inst == game and Serializer.Settings.RemovePlayers then
&#9;&#9;&#9;&#9;for i,v in pairs(game:GetService(&quot;Players&quot;):GetPlayers()) do
&#9;&#9;&#9;&#9;&#9;saveFilter[v.Character] = true
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;t_ins(buffer,[==[&lt;roblox xmlns:xmime=&quot;http://www.w3.org/2005/05/xmlmime&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;http://www.roblox.com/roblox.xsd&quot; version=&quot;4&quot;&gt;
&#9;&lt;Meta name=&quot;ExplicitAutoJoints&quot;&gt;true&lt;/Meta&gt;
&#9;&lt;External&gt;null&lt;/External&gt;
&#9;&lt;External&gt;nil&lt;/External&gt;]==])
&#9;&#9;&#9;
&#9;&#9;&#9;if inst ~= game then
&#9;&#9;&#9;&#9;if type(inst) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(inst) do
&#9;&#9;&#9;&#9;&#9;&#9;writeXML(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;writeXML(inst)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;for i,v in pairs(game:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if not savePlaceBlacklist[v.ClassName] then
&#9;&#9;&#9;&#9;&#9;&#9;writeXML(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;if inst == game and Serializer.Settings.NilInstances and _getnilinstances then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;Folder&quot; referent=&quot;RBX&apos;..refs[Instance.new(&quot;Folder&quot;)]..&apos;&quot;&gt;\
&#9;&lt;Properties&gt;\
&#9;&lt;string name=&quot;Name&quot;&gt;Nil Instances&lt;/string&gt;\
&#9;&lt;/Properties&gt;&apos;)
&#9;&#9;&#9;&#9;for i,v in pairs(_getnilinstances()) do
&#9;&#9;&#9;&#9;&#9;if ((API.Classes[v.ClassName] and not API.Classes[v.ClassName].Tags.Service) or not API.Classes[v.ClassName]) and v ~= game then
&#9;&#9;&#9;&#9;&#9;&#9;writeXML(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;t_ins(buffer,&quot;\n&lt;/Item&gt;&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;if inst == game and Serializer.Settings.SavePlayerDescendants then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;Folder&quot; referent=&quot;RBX&apos;..refs[Instance.new(&quot;Folder&quot;)]..&apos;&quot;&gt;\
&#9;&lt;Properties&gt;\
&#9;&lt;string name=&quot;Name&quot;&gt;Player Descendants&lt;/string&gt;\
&#9;&lt;/Properties&gt;&apos;)
&#9;&#9;&#9;&#9;for i,v in pairs(game:GetService(&quot;Players&quot;).LocalPlayer:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;PlayerGui&quot;) or v:IsA(&quot;PlayerScripts&quot;) or v:IsA(&quot;StarterGear&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;Folder&quot; referent=&quot;RBX&apos;..refs[Instance.new(&quot;Folder&quot;)]..&apos;&quot;&gt;\
&#9;&lt;Properties&gt;\
&#9;&lt;string name=&quot;Name&quot;&gt;&apos;..v.ClassName..&apos;&lt;/string&gt;\
&#9;&lt;/Properties&gt;&apos;)
&#9;&#9;&#9;&#9;&#9;&#9;for _,c in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;writeXML(c)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;t_ins(buffer,&quot;\n&lt;/Item&gt;&quot;)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;writeXML(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;t_ins(buffer,&quot;\n&lt;/Item&gt;&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;if inst == game then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;Script&quot; referent=&quot;RBX&apos;..refs[Instance.new(&quot;Folder&quot;)]..&apos;&quot;&gt;\
&#9;&lt;Properties&gt;\
&#9;&lt;string name=&quot;Name&quot;&gt;Please Read&lt;/string&gt;\
&#9;&lt;ProtectedString name=&quot;Source&quot;&gt;&apos;..[==[--[[
&#9;Thank you for using Dex SaveInstance by Moon. (Calamari edition.)
&#9;
&#9;If you cannot play the game, please try relocating any scripts in StarterPlayer elsewhere.
&#9;]]]==]..&apos;&lt;/ProtectedString&gt;\
&#9;&lt;/Properties&gt;\
&#9;&lt;/Item&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;t_ins(buffer,&quot;\n&lt;/roblox&gt;&quot;)
&#9;&#9;&#9;
&#9;&#9;&#9;if Serializer.Settings.DecompileMode &gt; 0 and decompile then
&#9;&#9;&#9;&#9;if inst == game and #Serializer.Settings.DecompileIgnore &gt; 0 then
&#9;&#9;&#9;&#9;&#9;local ignoreServices = {}
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(Serializer.Settings.DecompileIgnore) do t_ins(ignoreServices,game:GetService(v)) end
&#9;&#9;&#9;&#9;&#9;for i = #toDecompile,1,-1 do
&#9;&#9;&#9;&#9;&#9;&#9;for _,serv in pairs(ignoreServices) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if toDecompile[i][1]:IsDescendantOf(serv) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;table.remove(toDecompile,i)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;if Serializer.Settings.DecompileMode == 1 then
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(toDecompile) do
&#9;&#9;&#9;&#9;&#9;&#9;local decstr = &quot;-- This could not decompile&quot;
&#9;&#9;&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;    if (false) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;decstr = tostring(v[1]):gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;decstr = &quot;&quot; 
&#9;                        end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;buffer[v[2]] = decstr
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif Serializer.Settings.DecompileMode == 2 then
&#9;&#9;&#9;&#9;&#9;local left = #toDecompile
&#9;&#9;&#9;&#9;&#9;local totalScripts = left
&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;local statusGui = Instance.new(&quot;ScreenGui&quot;)
&#9;&#9;&#9;&#9;&#9;local statusText = Instance.new(&quot;TextLabel&quot;,statusGui)
&#9;&#9;&#9;&#9;&#9;statusText.BackgroundTransparency = 1
&#9;&#9;&#9;&#9;&#9;statusText.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;&#9;&#9;statusText.Position = UDim2.new(0,0,0,0)
&#9;&#9;&#9;&#9;&#9;statusText.Size = UDim2.new(1,0,0,36)
&#9;&#9;&#9;&#9;&#9;statusText.TextSize = 32
&#9;&#9;&#9;&#9;&#9;statusText.Font = Enum.Font.Code
&#9;&#9;&#9;&#9;&#9;statusText.Text = left..&quot;/&quot;..totalScripts..&quot; Scripts Left&quot;
&#9;&#9;&#9;&#9;&#9;statusGui.Parent = gethui()
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;local function doDec(scr)
&#9;&#9;&#9;&#9;&#9;&#9;local thread = coroutine.running()
&#9;&#9;&#9;&#9;&#9;&#9;local decompiled = false
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;tostring(scr,&quot;unluac&quot;,function(scr,err)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;decompiled = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(thread,scr,err)
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(Serializer.Settings.DecompileTimeout)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if decompiled then return end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(thread,nil,&quot;timeout&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;return coroutine.yield()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;for i = 1,Serializer.Settings.UnluacMaxThreads do
&#9;&#9;&#9;&#9;&#9;&#9;spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;while #toDecompile &gt; 0 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local nextScript = table.remove(toDecompile)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local scr,err = doDec(nextScript[1])
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if scr then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;buffer[nextScript[2]] = scr:gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;buffer[nextScript[2]] = &quot;-- This could not decompile because &quot;..(err or &quot;&quot;):gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;left = left - 1
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;statusText.Text = left..&quot;/&quot;..totalScripts..&quot; Scripts Left&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;while left &gt; 0 do game:GetService(&quot;RunService&quot;).RenderStepped:wait() end
&#9;&#9;&#9;&#9;&#9;statusGui:Destroy()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;_writefile(name..(&quot;.rbxmx&quot;),(t_concat(buffer)), name, &quot;Roblox XML Files(*.rbxlx, *.rbxmx)\0 * .rbxlx; *.rbxmx\0All Files\0 * .*\0&quot;,(&quot;.rbxmx&quot;))
&#9;&#9;&#9;end)
&#9;&#9;&#9;
&#9;&#9;&#9;resetState()
&#9;&#9;end
&#9;}
&#9;
&#9;return Serializer
&#9;end
&#9;
&#9;pcall(function()
&#9;&#9;local initialized = false
&#9;&#9;local serializer = SerializerModule()
&#9;&#9;
&#9;&#9;local function init()
&#9;&#9;local startup = {
&#9;&#9;&#9;API = fetchAPI(),
&#9;&#9;&#9;WriteFile = dexWriteFile,
&#9;&#9;&#9;GetNilInstances = nil,
&#9;&#9;&#9;OldIndex = oldindex
&#9;&#9;}
&#9;&#9;serializer.Init(startup)
&#9;&#9;initialized = true
&#9;&#9;end
&#9;&#9;
&#9;&#9;if not initialized then
&#9;&#9;init()
&#9;&#9;end
&#9;&#9;
&#9;&#9;SaveInstance = serializer.SaveInstance
&#9;&#9;saveinstance = serializer.SaveInstance
&#9;end)
end

local ENTRY_SIZE = GUI_SIZE + ENTRY_PADDING*2
local ENTRY_BOUND = ENTRY_SIZE + ENTRY_MARGIN
local HEADER_SIZE = ENTRY_SIZE*2

local FONT = &apos;SourceSans&apos;
local FONT_SIZE do
&#9;local size = {8,9,10,11,12,14,18,24,36,48}
&#9;local s
&#9;local n = math.huge
&#9;for i = 1,#size do
&#9;&#9;if size[i] &lt;= GUI_SIZE then
&#9;&#9;&#9;FONT_SIZE = i - 1
&#9;&#9;end
&#9;end
end

local GuiColor = {
&#9;Background = Color3_fromRGB(37, 37, 42),
&#9;Border = Color3_fromRGB(20, 20, 25),
&#9;Selected = Color3_fromRGB(5, 100, 145),
&#9;BorderSelected = Color3_fromRGB(2, 125, 145),
&#9;Text = Color3_fromRGB(245, 245, 250),
&#9;TextDisabled = Color3_fromRGB(190, 190, 195),
&#9;TextSelected = Color3_fromRGB(255, 255, 255),
&#9;Button = Color3_fromRGB(31, 31, 35),
&#9;ButtonBorder = Color3_fromRGB(135, 135, 140),
&#9;ButtonSelected = Color3_fromRGB(0, 170, 155),
&#9;Field = Color3_fromRGB(37, 37, 42),
&#9;FieldBorder = Color3_fromRGB(50, 50, 55),
&#9;TitleBackground = Color3_fromRGB(10, 10, 15)
}

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
---- Icon map constants

local MAP_ID = 3440403115

-- Indices based on implementation of Icon function.
local ACTION_CUT         &#9; = 160
local ACTION_COPY        &#9; = 161
local ACTION_PASTE       &#9; = 162
local ACTION_DELETE      &#9; = 163
local ACTION_SORT        &#9; = 164
local ACTION_CUT_OVER    &#9; = 174
local ACTION_COPY_OVER   &#9; = 175
local ACTION_PASTE_OVER  &#9; = 176
local ACTION_DELETE_OVER&#9; = 177
local ACTION_SORT_OVER  &#9; = 178
local ACTION_EDITQUICKACCESS = 190
local ACTION_FREEZE &#9;&#9; = 188
local ACTION_STARRED &#9;&#9; = 189
local ACTION_ADDSTAR &#9;&#9; = 184
local ACTION_ADDSTAR_OVER &#9; = 187

local NODE_COLLAPSED      = 165
local NODE_EXPANDED       = 166
local NODE_COLLAPSED_OVER = 179
local NODE_EXPANDED_OVER  = 180

local ExplorerIndex = {
&#9;[&quot;Cut&quot;] = ACTION_CUT_OVER;
&#9;[&quot;Copy&quot;] = ACTION_COPY_OVER;
&#9;[&quot;Duplicate&quot;] = ACTION_COPY_OVER;
&#9;[&quot;Delete&quot;] = ACTION_DELETE_OVER;
&#9;[&quot;Insert Part&quot;] = 1;
&#9;[&quot;Accessory&quot;] = 32;
&#9;[&quot;Accoutrement&quot;] = 32;
&#9;[&quot;AdService&quot;] = 73;
&#9;[&quot;Animation&quot;] = 60;
&#9;[&quot;AnimationController&quot;] = 60;
&#9;[&quot;AnimationTrack&quot;] = 60;
&#9;[&quot;Animator&quot;] = 60;
&#9;[&quot;ArcHandles&quot;] = 56;
&#9;[&quot;AssetService&quot;] = 72;
&#9;[&quot;Attachment&quot;] = 34;
&#9;[&quot;Backpack&quot;] = 20;
&#9;[&quot;BadgeService&quot;] = 75;
&#9;[&quot;BallSocketConstraint&quot;] = 97;
&#9;[&quot;NoCollisionConstraint&quot;] = 116;
&#9;[&quot;BillboardGui&quot;] = 64;
&#9;[&quot;BinaryStringValue&quot;] = 4;
&#9;[&quot;BindableEvent&quot;] = 67;
&#9;[&quot;BindableFunction&quot;] = 66;
&#9;[&quot;BlockMesh&quot;] = 8;
&#9;[&quot;BloomEffect&quot;] = 94;
&#9;[&quot;BlurEffect&quot;] = 90;
&#9;[&quot;BodyAngularVelocity&quot;] = 14;
&#9;[&quot;BodyForce&quot;] = 14;
&#9;[&quot;BodyGyro&quot;] = 14;
&#9;[&quot;BodyPosition&quot;] = 14;
&#9;[&quot;BodyThrust&quot;] = 14;
&#9;[&quot;BodyVelocity&quot;] = 14;
&#9;[&quot;BoolValue&quot;] = 4;
&#9;[&quot;BoxHandleAdornment&quot;] = 54;
&#9;[&quot;BrickColorValue&quot;] = 4;
&#9;[&quot;Camera&quot;] = 5;
&#9;[&quot;CFrameValue&quot;] = 4;
&#9;[&quot;CharacterMesh&quot;] = 60;
&#9;[&quot;Chat&quot;] = 33;
&#9;[&quot;ClickDetector&quot;] = 41;
&#9;[&quot;CollectionService&quot;] = 30;
&#9;[&quot;Color3Value&quot;] = 4;
&#9;[&quot;ColorCorrectionEffect&quot;] = 90;
&#9;[&quot;ConeHandleAdornment&quot;] = 54;
&#9;[&quot;Configuration&quot;] = 58;
&#9;[&quot;ContentProvider&quot;] = 72;
&#9;[&quot;ContextActionService&quot;] = 41;
&#9;[&quot;CoreGui&quot;] = 46;
&#9;[&quot;CoreScript&quot;] = 18;
&#9;[&quot;CornerWedgePart&quot;] = 1;
&#9;[&quot;CustomEvent&quot;] = 4;
&#9;[&quot;CustomEventReceiver&quot;] = 4;
&#9;[&quot;CylinderHandleAdornment&quot;] = 54;
&#9;[&quot;CylinderMesh&quot;] = 8;
&#9;[&quot;CylindricalConstraint&quot;] = 107;
&#9;[&quot;Debris&quot;] = 30;
&#9;[&quot;Decal&quot;] = 7;
&#9;[&quot;Dialog&quot;] = 62;
&#9;[&quot;DialogChoice&quot;] = 63;
&#9;[&quot;DoubleConstrainedValue&quot;] = 4;
&#9;[&quot;Explosion&quot;] = 36;
&#9;[&quot;FileMesh&quot;] = 8;
&#9;[&quot;Fire&quot;] = 61;
&#9;[&quot;Flag&quot;] = 38;
&#9;[&quot;FlagStand&quot;] = 39;
&#9;[&quot;FloorWire&quot;] = 4;
&#9;[&quot;Folder&quot;] = 70;
&#9;[&quot;ForceField&quot;] = 37;
&#9;[&quot;Frame&quot;] = 48;
&#9;[&quot;GamePassService&quot;] = 19;
&#9;[&quot;Glue&quot;] = 34;
&#9;[&quot;GuiButton&quot;] = 52;
&#9;[&quot;GuiMain&quot;] = 47;
&#9;[&quot;GuiService&quot;] = 47;
&#9;[&quot;Handles&quot;] = 53;
&#9;[&quot;HapticService&quot;] = 84;
&#9;[&quot;Hat&quot;] = 45;
&#9;[&quot;HingeConstraint&quot;] = 98;
&#9;[&quot;Hint&quot;] = 33;
&#9;[&quot;HopperBin&quot;] = 22;
&#9;[&quot;HttpService&quot;] = 76;
&#9;[&quot;Humanoid&quot;] = 9;
&#9;[&quot;ImageButton&quot;] = 52;
&#9;[&quot;ImageLabel&quot;] = 49;
&#9;[&quot;InsertService&quot;] = 72;
&#9;[&quot;IntConstrainedValue&quot;] = 4;
&#9;[&quot;IntValue&quot;] = 4;
&#9;[&quot;JointInstance&quot;] = 34;
&#9;[&quot;JointsService&quot;] = 34;
&#9;[&quot;Keyframe&quot;] = 60;
&#9;[&quot;KeyframeSequence&quot;] = 60;
&#9;[&quot;KeyframeSequenceProvider&quot;] = 60;
&#9;[&quot;Lighting&quot;] = 13;
&#9;[&quot;LineHandleAdornment&quot;] = 54;
&#9;[&quot;LocalScript&quot;] = 18;
&#9;[&quot;LogService&quot;] = 87;
&#9;[&quot;MarketplaceService&quot;] = 46;
&#9;[&quot;Message&quot;] = 33;
&#9;[&quot;Model&quot;] = 2;
&#9;[&quot;ModuleScript&quot;] = 71;
&#9;[&quot;Motor&quot;] = 34;
&#9;[&quot;Motor6D&quot;] = 34;
&#9;[&quot;MoveToConstraint&quot;] = 93;
&#9;[&quot;NegateOperation&quot;] = 78;
&#9;[&quot;NetworkClient&quot;] = 16;
&#9;[&quot;NetworkReplicator&quot;] = 29;
&#9;[&quot;NetworkServer&quot;] = 15;
&#9;[&quot;NumberValue&quot;] = 4;
&#9;[&quot;ObjectValue&quot;] = 4;
&#9;[&quot;Pants&quot;] = 44;
&#9;[&quot;ParallelRampPart&quot;] = 1;
&#9;[&quot;Part&quot;] = 1;
&#9;[&quot;ParticleEmitter&quot;] = 69;
&#9;[&quot;PartPairLasso&quot;] = 57;
&#9;[&quot;PathfindingService&quot;] = 37;
&#9;[&quot;Platform&quot;] = 35;
&#9;[&quot;Player&quot;] = 12;
&#9;[&quot;PlayerGui&quot;] = 46;
&#9;[&quot;Players&quot;] = 21;
&#9;[&quot;PlayerScripts&quot;] = 82;
&#9;[&quot;PointLight&quot;] = 13;
&#9;[&quot;PointsService&quot;] = 83;
&#9;[&quot;Pose&quot;] = 60;
&#9;[&quot;PrismaticConstraint&quot;] = 99;
&#9;[&quot;PrismPart&quot;] = 1;
&#9;[&quot;PyramidPart&quot;] = 1;
&#9;[&quot;RayValue&quot;] = 4;
&#9;[&quot;ReflectionMetadata&quot;] = 86;
&#9;[&quot;ReflectionMetadataCallbacks&quot;] = 86;
&#9;[&quot;ReflectionMetadataClass&quot;] = 86;
&#9;[&quot;ReflectionMetadataClasses&quot;] = 86;
&#9;[&quot;ReflectionMetadataEnum&quot;] = 86;
&#9;[&quot;ReflectionMetadataEnumItem&quot;] = 86;
&#9;[&quot;ReflectionMetadataEnums&quot;] = 86;
&#9;[&quot;ReflectionMetadataEvents&quot;] = 86;
&#9;[&quot;ReflectionMetadataFunctions&quot;] = 86;
&#9;[&quot;ReflectionMetadataMember&quot;] = 86;
&#9;[&quot;ReflectionMetadataProperties&quot;] = 86;
&#9;[&quot;ReflectionMetadataYieldFunctions&quot;] = 86;
&#9;[&quot;RemoteEvent&quot;] = 80;
&#9;[&quot;RemoteFunction&quot;] = 79;
&#9;[&quot;ReplicatedFirst&quot;] = 72;
&#9;[&quot;ReplicatedStorage&quot;] = 72;
&#9;[&quot;RightAngleRampPart&quot;] = 1;
&#9;[&quot;RocketPropulsion&quot;] = 14;
&#9;[&quot;RodConstraint&quot;] = 101;
&#9;[&quot;RopeConstraint&quot;] = 100;
&#9;[&quot;Rotate&quot;] = 34;
&#9;[&quot;RotateP&quot;] = 34;
&#9;[&quot;RotateV&quot;] = 34;
&#9;[&quot;RunService&quot;] = 66;
&#9;[&quot;ScreenGui&quot;] = 47;
&#9;[&quot;Script&quot;] = 6;
&#9;[&quot;ScrollingFrame&quot;] = 48;
&#9;[&quot;Seat&quot;] = 35;
&#9;[&quot;Selection&quot;] = 55;
&#9;[&quot;SelectionBox&quot;] = 54;
&#9;[&quot;SelectionPartLasso&quot;] = 57;
&#9;[&quot;SelectionPointLasso&quot;] = 57;
&#9;[&quot;SelectionSphere&quot;] = 54;
&#9;[&quot;ServerScriptService&quot;] = 0;
&#9;[&quot;ServerStorage&quot;] = 74;
&#9;[&quot;Shirt&quot;] = 43;
&#9;[&quot;ShirtGraphic&quot;] = 40;
&#9;[&quot;SkateboardPlatform&quot;] = 35;
&#9;[&quot;Sky&quot;] = 28;
&#9;[&quot;SlidingBallConstraint&quot;] = 93;
&#9;[&quot;Smoke&quot;] = 59;
&#9;[&quot;Snap&quot;] = 34;
&#9;[&quot;Sound&quot;] = 11;
&#9;[&quot;SoundService&quot;] = 31;
&#9;[&quot;Sparkles&quot;] = 42;
&#9;[&quot;SpawnLocation&quot;] = 25;
&#9;[&quot;SpecialMesh&quot;] = 8;
&#9;[&quot;SphereHandleAdornment&quot;] = 54;
&#9;[&quot;SpotLight&quot;] = 13;
&#9;[&quot;SpringConstraint&quot;] = 102;
&#9;[&quot;StarterCharacterScripts&quot;] = 82;
&#9;[&quot;StarterGear&quot;] = 20;
&#9;[&quot;StarterGui&quot;] = 46;
&#9;[&quot;StarterPack&quot;] = 20;
&#9;[&quot;StarterPlayer&quot;] = 88;
&#9;[&quot;StarterPlayerScripts&quot;] = 82;
&#9;[&quot;Status&quot;] = 2;
&#9;[&quot;StringValue&quot;] = 4;
&#9;[&quot;SunRaysEffect&quot;] = 90;
&#9;[&quot;SurfaceGui&quot;] = 64;
&#9;[&quot;SurfaceLight&quot;] = 13;
&#9;[&quot;SurfaceSelection&quot;] = 55;
&#9;[&quot;Team&quot;] = 24;
&#9;[&quot;Teams&quot;] = 23;
&#9;[&quot;TeleportService&quot;] = 81;
&#9;[&quot;Terrain&quot;] = 65;
&#9;[&quot;TerrainRegion&quot;] = 65;
&#9;[&quot;TestService&quot;] = 68;
&#9;[&quot;TextBox&quot;] = 51;
&#9;[&quot;TextButton&quot;] = 51;
&#9;[&quot;TextLabel&quot;] = 50;
&#9;[&quot;Texture&quot;] = 10;
&#9;[&quot;TextureTrail&quot;] = 4;
&#9;[&quot;Tool&quot;] = 17;
&#9;[&quot;TouchTransmitter&quot;] = 37;
&#9;[&quot;TrussPart&quot;] = 1;
&#9;[&quot;UnionOperation&quot;] = 77;
&#9;[&quot;MeshPart&quot;] = 77;
&#9;[&quot;UserInputService&quot;] = 84;
&#9;[&quot;Vector3Value&quot;] = 4;
&#9;[&quot;VehicleSeat&quot;] = 35;
&#9;[&quot;VelocityMotor&quot;] = 34;
&#9;[&quot;WedgePart&quot;] = 1;
&#9;[&quot;Weld&quot;] = 34;
&#9;[&quot;Workspace&quot;] = 19;
&#9;[&quot;WeldConstraint&quot;] = 105;
&#9;[&quot;VectorForce&quot;] = 113;
&#9;[&quot;UITextSizeConstraint&quot;] = 26;
&#9;[&quot;UITableLayout&quot;] = 26;
&#9;[&quot;UISizeConstraint&quot;] = 26;
&#9;[&quot;UIScale&quot;] = 26;
&#9;[&quot;UIPageLayout&quot;] = 26;
&#9;[&quot;UIPadding&quot;] = 26;
&#9;[&quot;UIListLayout&quot;] = 26;
&#9;[&quot;UIGridLayout&quot;] = 26;
&#9;[&quot;UIAspectRatioConstraint&quot;] = 26;
&#9;[&quot;Trail&quot;] = 26;
&#9;[&quot;UITextSizeConstraint&quot;] = 26;
&#9;[&quot;LocalizationTable&quot;] = 108;
&#9;[&quot;LocalizationService&quot;] = 103;
&#9;[&quot;LineForce&quot;] = 112;
&#9;[&quot;Beam&quot;] = 108;
&#9;[&quot;AngularVelocity&quot;] = 114;
&#9;[&quot;AlignPosition&quot;] = 111;
&#9;[&quot;AlignOrientation&quot;] = 112;
&#9;[&quot;HumanoidDescription&quot;] = 115;
&#9;[&quot;TremoloSoundEffect&quot;] = 95;
&#9;[&quot;SoundGroup&quot;] = 96;
&#9;[&quot;ReverbSoundEffect&quot;] = 95;
&#9;[&quot;PitchShiftSoundEffect&quot;] = 95;
&#9;[&quot;FlangeSoundEffect&quot;] = 95;
&#9;[&quot;EqualizerSoundEffect&quot;] = 95;
&#9;[&quot;EchoSoundEffect&quot;] = 95;
&#9;[&quot;DistortionSoundEffect&quot;] = 95;
&#9;[&quot;CompressorSoundEffect&quot;] = 95;
&#9;[&quot;ChorusSoundEffect&quot;] = 95;
&#9;[&quot;Torque&quot;] = 114;
}

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------

function Create(ty,data)
&#9;local obj
&#9;if type(ty) == &apos;string&apos; then
&#9;&#9;obj = Instance.new(ty)
&#9;else
&#9;&#9;obj = ty
&#9;end
&#9;for k, v in pairs(data) do
&#9;&#9;if type(k) == &apos;number&apos; then
&#9;&#9;&#9;v.Parent = obj
&#9;&#9;else
&#9;&#9;&#9;obj[k] = v
&#9;&#9;end
&#9;end
&#9;return obj
end

local barActive = false
local activeOptions = {}

function createDDown(dBut, callback,...)
&#9;if barActive then
&#9;&#9;for i,v in pairs(activeOptions) do
&#9;&#9;&#9;v:Destroy()
&#9;&#9;end
&#9;&#9;activeOptions = {}
&#9;&#9;barActive = false
&#9;&#9;return
&#9;else
&#9;&#9;barActive = true
&#9;end
&#9;local slots = {...}
&#9;local base = dBut
&#9;for i,v in pairs(slots) do
&#9;&#9;local newOption = base:Clone()
&#9;&#9;newOption.ZIndex = 5
&#9;&#9;newOption.Name = &quot;Option &quot;..tostring(i)
&#9;&#9;newOption.Parent = base.Parent.Parent.Parent
&#9;&#9;newOption.BackgroundTransparency = 0
&#9;&#9;newOption.ZIndex = 2
&#9;&#9;table.insert(activeOptions,newOption)
&#9;&#9;newOption.Position = UDim2.new(-0.4, dBut.Position.X.Offset, dBut.Position.Y.Scale, dBut.Position.Y.Offset + (#activeOptions * dBut.Size.Y.Offset))
&#9;&#9;newOption.Text = slots[i]
&#9;&#9;newOption.MouseButton1Down:connect(function()
&#9;&#9;&#9;dBut.Text = slots[i]
&#9;&#9;&#9;callback(slots[i])
&#9;&#9;&#9;for i,v in pairs(activeOptions) do
&#9;&#9;&#9;&#9;v:Destroy()
&#9;&#9;&#9;end
&#9;&#9;&#9;activeOptions = {}
&#9;&#9;&#9;barActive = false
&#9;&#9;end)
&#9;end
end

-- Connects a function to an event such that it fires asynchronously
local IsA = game.IsA
local ClearAllChildren = game.ClearAllChildren
local IsAncestorOf = game.IsAncestorOf
local WaitForChild = game.WaitForChild
local FindFirstChildOfClass = game.FindFirstChildOfClass
local GetPropertyChangedSignal = game.GetPropertyChangedSignal
local GetChildren = game.GetChildren
local GetDescendants = game.GetDescendants
local Clone = game.Clone
local Destroy = game.Destroy
local Wait, Connect, Disconnect = (function()
&#9;local A = game.Changed
&#9;local B = A.Connect
&#9;local C = B(A, function()end)
&#9;local D = C.Disconnect
&#9;D(C)
&#9;return A.Wait, B, D
end)()

-- returns the ascendant ScreenGui of an object
function GetScreen(screen)
&#9;if screen == nil then return nil end
&#9;while not screen:IsA(&quot;ScreenGui&quot;) do
&#9;&#9;screen = screen.Parent
&#9;&#9;if screen == nil then return nil end
&#9;end
&#9;return screen
end

do
&#9;local ZIndexLock = {}
&#9;-- Sets the ZIndex of an object and its descendants. Objects are locked so
&#9;-- that SetZIndexOnChanged doesn&apos;t spawn multiple threads that set the
&#9;-- ZIndex of the same object.
&#9;function SetZIndex(object,z)
&#9;&#9;if not ZIndexLock[object] then
&#9;&#9;&#9;ZIndexLock[object] = true
&#9;&#9;&#9;if object:IsA&apos;GuiObject&apos; then
&#9;&#9;&#9;&#9;object.ZIndex = z
&#9;&#9;&#9;end
&#9;&#9;&#9;local children = object:GetChildren()
&#9;&#9;&#9;for i = 1,#children do
&#9;&#9;&#9;&#9;SetZIndex(children[i],z)
&#9;&#9;&#9;end
&#9;&#9;&#9;ZIndexLock[object] = nil
&#9;&#9;end
&#9;end

&#9;function SetZIndexOnChanged(object)
&#9;&#9;return object.Changed:connect(function(p)
&#9;&#9;&#9;if p == &quot;ZIndex&quot; then
&#9;&#9;&#9;&#9;SetZIndex(object,object.ZIndex)
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end
end

---- IconMap ----
-- Image size: 256px x 256px
-- Icon size: 16px x 16px
-- Padding between each icon: 2px
-- Padding around image edge: 1px
-- Total icons: 14 x 14 (196)
local Icon do
&#9;local iconMap = &apos;http://www.roblox.com/asset/?id=&apos; .. MAP_ID
&#9;game:GetService(&apos;ContentProvider&apos;):Preload(iconMap)
&#9;local iconDehash do
&#9;&#9;-- 14 x 14, 0-based input, 0-based output
&#9;&#9;local f=math.floor
&#9;&#9;function iconDehash(h)
&#9;&#9;&#9;return f(h/14%14),f(h%14)
&#9;&#9;end
&#9;end

&#9;function Icon(IconFrame,index)
&#9;&#9;local row,col = iconDehash(index)
&#9;&#9;local mapSize = Vector2.new(256,256)
&#9;&#9;local pad,border = 2,1
&#9;&#9;local iconSize = 16

&#9;&#9;local class = &apos;Frame&apos;
&#9;&#9;if type(IconFrame) == &apos;string&apos; then
&#9;&#9;&#9;class = IconFrame
&#9;&#9;&#9;IconFrame = nil
&#9;&#9;end

&#9;&#9;if not IconFrame then
&#9;&#9;&#9;IconFrame = Create(class,{
&#9;&#9;&#9;&#9;Name = &quot;Icon&quot;;
&#9;&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;&#9;ClipsDescendants = true;
&#9;&#9;&#9;&#9;Create(&apos;ImageLabel&apos;,{
&#9;&#9;&#9;&#9;&#9;Name = &quot;IconMap&quot;;
&#9;&#9;&#9;&#9;&#9;Active = false;
&#9;&#9;&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;&#9;&#9;Image = iconMap;
&#9;&#9;&#9;&#9;&#9;Size = UDim2.new(mapSize.x/iconSize,0,mapSize.y/iconSize,0);
&#9;&#9;&#9;&#9;});
&#9;&#9;&#9;})
&#9;&#9;end

&#9;&#9;IconFrame.IconMap.Position = UDim2.new(-col - (pad*(col+1) + border)/iconSize,0,-row - (pad*(row+1) + border)/iconSize,0)
&#9;&#9;return IconFrame
&#9;end
end

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
---- ScrollBar
do
&#9;-- AutoButtonColor doesn&apos;t always reset properly
&#9;local function ResetButtonColor(button)
&#9;&#9;local active = button.Active
&#9;&#9;button.Active = not active
&#9;&#9;button.Active = active
&#9;end

&#9;local function ArrowGraphic(size,dir,scaled,template)
&#9;&#9;local Frame = Create(&apos;Frame&apos;,{
&#9;&#9;&#9;Name = &quot;Arrow Graphic&quot;;
&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;Size = UDim2.new(0,size,0,size);
&#9;&#9;&#9;Transparency = 1;
&#9;&#9;})
&#9;&#9;if not template then
&#9;&#9;&#9;template = Instance.new(&quot;Frame&quot;)
&#9;&#9;&#9;template.BorderSizePixel = 0
&#9;&#9;end

&#9;&#9;local transform
&#9;&#9;if dir == nil or dir == &apos;Up&apos; then
&#9;&#9;&#9;function transform(p,s) return p,s end
&#9;&#9;elseif dir == &apos;Down&apos; then
&#9;&#9;&#9;function transform(p,s) return UDim2.new(0,p.X.Offset,0,size-p.Y.Offset-1),s end
&#9;&#9;elseif dir == &apos;Left&apos; then
&#9;&#9;&#9;function transform(p,s) return UDim2.new(0,p.Y.Offset,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
&#9;&#9;elseif dir == &apos;Right&apos; then
&#9;&#9;&#9;function transform(p,s) return UDim2.new(0,size-p.Y.Offset-1,0,p.X.Offset),UDim2.new(0,s.Y.Offset,0,s.X.Offset) end
&#9;&#9;end

&#9;&#9;local scale
&#9;&#9;if scaled then
&#9;&#9;&#9;function scale(p,s) return UDim2.new(p.X.Offset/size,0,p.Y.Offset/size,0),UDim2.new(s.X.Offset/size,0,s.Y.Offset/size,0) end
&#9;&#9;else
&#9;&#9;&#9;function scale(p,s) return p,s end
&#9;&#9;end

&#9;&#9;local o = math.floor(size/4)
&#9;&#9;if size%2 == 0 then
&#9;&#9;&#9;local n = size/2-1
&#9;&#9;&#9;for i = 0,n do
&#9;&#9;&#9;&#9;local t = template:Clone()
&#9;&#9;&#9;&#9;local p,s = scale(transform(
&#9;&#9;&#9;&#9;&#9;UDim2.new(0,n-i,0,o+i),
&#9;&#9;&#9;&#9;&#9;UDim2.new(0,(i+1)*2,0,1)
&#9;&#9;&#9;&#9;))
&#9;&#9;&#9;&#9;t.Position = p
&#9;&#9;&#9;&#9;t.Size = s
&#9;&#9;&#9;&#9;t.Parent = Frame
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;local n = (size-1)/2
&#9;&#9;&#9;for i = 0,n do
&#9;&#9;&#9;&#9;local t = template:Clone()
&#9;&#9;&#9;&#9;local p,s = scale(transform(
&#9;&#9;&#9;&#9;&#9;UDim2.new(0,n-i,0,o+i),
&#9;&#9;&#9;&#9;&#9;UDim2.new(0,i*2+1,0,1)
&#9;&#9;&#9;&#9;))
&#9;&#9;&#9;&#9;t.Position = p
&#9;&#9;&#9;&#9;t.Size = s
&#9;&#9;&#9;&#9;t.Parent = Frame
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;if size%4 &gt; 1 then
&#9;&#9;&#9;local t = template:Clone()
&#9;&#9;&#9;local p,s = scale(transform(
&#9;&#9;&#9;&#9;UDim2.new(0,0,0,size-o-1),
&#9;&#9;&#9;&#9;UDim2.new(0,size,0,1)
&#9;&#9;&#9;))
&#9;&#9;&#9;t.Position = p
&#9;&#9;&#9;t.Size = s
&#9;&#9;&#9;t.Parent = Frame
&#9;&#9;end
&#9;&#9;return Frame
&#9;end


&#9;local function GripGraphic(size,dir,spacing,scaled,template)
&#9;&#9;local Frame = Create(&apos;Frame&apos;,{
&#9;&#9;&#9;Name = &quot;Grip Graphic&quot;;
&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;Size = UDim2.new(0,size.x,0,size.y);
&#9;&#9;&#9;Transparency = 1;
&#9;&#9;})
&#9;&#9;if not template then
&#9;&#9;&#9;template = Instance.new(&quot;Frame&quot;)
&#9;&#9;&#9;template.BorderSizePixel = 0
&#9;&#9;end

&#9;&#9;spacing = spacing or 2

&#9;&#9;local scale
&#9;&#9;if scaled then
&#9;&#9;&#9;function scale(p) return UDim2.new(p.X.Offset/size.x,0,p.Y.Offset/size.y,0) end
&#9;&#9;else
&#9;&#9;&#9;function scale(p) return p end
&#9;&#9;end

&#9;&#9;if dir == &apos;Vertical&apos; then
&#9;&#9;&#9;for i=0,size.x-1,spacing do
&#9;&#9;&#9;&#9;local t = template:Clone()
&#9;&#9;&#9;&#9;t.Size = scale(UDim2.new(0,1,0,size.y))
&#9;&#9;&#9;&#9;t.Position = scale(UDim2.new(0,i,0,0))
&#9;&#9;&#9;&#9;t.Parent = Frame
&#9;&#9;&#9;end
&#9;&#9;elseif dir == nil or dir == &apos;Horizontal&apos; then
&#9;&#9;&#9;for i=0,size.y-1,spacing do
&#9;&#9;&#9;&#9;local t = template:Clone()
&#9;&#9;&#9;&#9;t.Size = scale(UDim2.new(0,size.x,0,1))
&#9;&#9;&#9;&#9;t.Position = scale(UDim2.new(0,0,0,i))
&#9;&#9;&#9;&#9;t.Parent = Frame
&#9;&#9;&#9;end
&#9;&#9;end

&#9;&#9;return Frame
&#9;end

&#9;local mt = {
&#9;&#9;__index = {
&#9;&#9;&#9;GetScrollPercent = function(self)
&#9;&#9;&#9;&#9;return self.ScrollIndex/(self.TotalSpace-self.VisibleSpace)
&#9;&#9;&#9;end;
&#9;&#9;&#9;CanScrollDown = function(self)
&#9;&#9;&#9;&#9;return self.ScrollIndex + self.VisibleSpace &lt; self.TotalSpace
&#9;&#9;&#9;end;
&#9;&#9;&#9;CanScrollUp = function(self)
&#9;&#9;&#9;&#9;return self.ScrollIndex &gt; 0
&#9;&#9;&#9;end;
&#9;&#9;&#9;ScrollDown = function(self)
&#9;&#9;&#9;&#9;self.ScrollIndex = self.ScrollIndex + self.PageIncrement
&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;end;
&#9;&#9;&#9;ScrollUp = function(self)
&#9;&#9;&#9;&#9;self.ScrollIndex = self.ScrollIndex - self.PageIncrement
&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;end;
&#9;&#9;&#9;ScrollTo = function(self,index)
&#9;&#9;&#9;&#9;self.ScrollIndex = index
&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;end;
&#9;&#9;&#9;SetScrollPercent = function(self,percent)
&#9;&#9;&#9;&#9;self.ScrollIndex = math.floor((self.TotalSpace - self.VisibleSpace)*percent + 0.5)
&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;end;
&#9;&#9;};
&#9;}
&#9;mt.__index.CanScrollRight = mt.__index.CanScrollDown
&#9;mt.__index.CanScrollLeft = mt.__index.CanScrollUp
&#9;mt.__index.ScrollLeft = mt.__index.ScrollUp
&#9;mt.__index.ScrollRight = mt.__index.ScrollDown

&#9;function ScrollBar(horizontal)
&#9;&#9;local ScrollFrame = Create(&apos;Frame&apos;,{
&#9;&#9;&#9;Name = &quot;ScrollFrame&quot;,
&#9;&#9;&#9;BorderSizePixel = 0,
&#9;&#9;&#9;Position = horizontal and UDim2_new(0,0,1,-GUI_SIZE) or UDim2_new(1,-GUI_SIZE,0,0),
&#9;&#9;&#9;Size = horizontal and UDim2_new(1,0,0,GUI_SIZE) or UDim2_new(0,GUI_SIZE,1,0),
&#9;&#9;&#9;BackgroundTransparency = 1,
&#9;&#9;&#9;Create(&apos;ImageButton&apos;,{
&#9;&#9;&#9;&#9;Name = &quot;ScrollDown&quot;,
&#9;&#9;&#9;&#9;Position = horizontal and UDim2_new(1,-GUI_SIZE,0,0) or UDim2_new(0,0,1,-GUI_SIZE),
&#9;&#9;&#9;&#9;Size = UDim2_new(0, GUI_SIZE, 0, GUI_SIZE),
&#9;&#9;&#9;&#9;BackgroundColor3 = GuiColor.Button,
&#9;&#9;&#9;&#9;BorderColor3 = GuiColor.Border
&#9;&#9;&#9;}),
&#9;&#9;&#9;Create(&apos;ImageButton&apos;,{
&#9;&#9;&#9;&#9;Name = &quot;ScrollUp&quot;,
&#9;&#9;&#9;&#9;Size = UDim2_new(0, GUI_SIZE, 0, GUI_SIZE),
&#9;&#9;&#9;&#9;BackgroundColor3 = GuiColor.Button,
&#9;&#9;&#9;&#9;BorderColor3 = GuiColor.Border
&#9;&#9;&#9;}),
&#9;&#9;&#9;Create(&apos;ImageButton&apos;,{
&#9;&#9;&#9;&#9;Name = &quot;ScrollBar&quot;,
&#9;&#9;&#9;&#9;Size = horizontal and UDim2_new(1,-GUI_SIZE*2,1,0) or UDim2_new(1,0,1,-GUI_SIZE*2),
&#9;&#9;&#9;&#9;Position = horizontal and UDim2_new(0,GUI_SIZE,0,0) or UDim2_new(0,0,0,GUI_SIZE),
&#9;&#9;&#9;&#9;AutoButtonColor = false,
&#9;&#9;&#9;&#9;BackgroundColor3 = Color3_new(1/4, 1/4, 1/4),
&#9;&#9;&#9;&#9;BorderColor3 = GuiColor.Border,
&#9;&#9;&#9;&#9;Create(&apos;ImageButton&apos;,{
&#9;&#9;&#9;&#9;&#9;Name = &quot;ScrollThumb&quot;,
&#9;&#9;&#9;&#9;&#9;AutoButtonColor = false,
&#9;&#9;&#9;&#9;&#9;Size = UDim2_new(0, GUI_SIZE, 0, GUI_SIZE),
&#9;&#9;&#9;&#9;&#9;BackgroundColor3 = GuiColor.Button,
&#9;&#9;&#9;&#9;&#9;BorderColor3 = GuiColor.Border
&#9;&#9;&#9;&#9;})
&#9;&#9;&#9;})
&#9;&#9;})

&#9;&#9;local graphicTemplate = Create(&apos;Frame&apos;,{
&#9;&#9;&#9;Name=&quot;Graphic&quot;,
&#9;&#9;&#9;BorderSizePixel = 0,
&#9;&#9;&#9;BackgroundColor3 = GuiColor.Border
&#9;&#9;})
&#9;&#9;local graphicSize = GUI_SIZE/2

&#9;&#9;local ScrollDownFrame = ScrollFrame.ScrollDown
&#9;&#9;local ScrollDownGraphic = ArrowGraphic(graphicSize,horizontal and &apos;Right&apos; or &apos;Down&apos;,true,graphicTemplate)
&#9;&#9;ScrollDownGraphic.Position = UDim2_new(.5,-graphicSize/2,.5,-graphicSize/2)
&#9;&#9;ScrollDownGraphic.Parent = ScrollDownFrame
&#9;&#9;local ScrollUpFrame = ScrollFrame.ScrollUp
&#9;&#9;local ScrollUpGraphic = ArrowGraphic(graphicSize,horizontal and &apos;Left&apos; or &apos;Up&apos;,true,graphicTemplate)
&#9;&#9;ScrollUpGraphic.Position = UDim2_new(.5,-graphicSize/2,.5,-graphicSize/2)
&#9;&#9;ScrollUpGraphic.Parent = ScrollUpFrame
&#9;&#9;local ScrollBarFrame = ScrollFrame.ScrollBar
&#9;&#9;local ScrollThumbFrame = ScrollBarFrame.ScrollThumb
&#9;&#9;do
&#9;&#9;&#9;local size = GUI_SIZE*3/8
&#9;&#9;&#9;local Decal = GripGraphic(Vector2_new(size,size),horizontal and &apos;Vertical&apos; or &apos;Horizontal&apos;,2,graphicTemplate)
&#9;&#9;&#9;Decal.Position = UDim2_new(.5,-size/2,.5,-size/2)
&#9;&#9;&#9;Decal.Parent = ScrollThumbFrame
&#9;&#9;end

&#9;&#9;local Class = setmetatable({
&#9;&#9;&#9;GUI = ScrollFrame,
&#9;&#9;&#9;ScrollIndex = 0,
&#9;&#9;&#9;VisibleSpace = 0,
&#9;&#9;&#9;TotalSpace = 0,
&#9;&#9;&#9;PageIncrement = 1
&#9;&#9;},{
&#9;&#9;&#9;__index = {
&#9;&#9;&#9;&#9;GetScrollPercent = function(self)
&#9;&#9;&#9;&#9;&#9;return self.ScrollIndex/(self.TotalSpace-self.VisibleSpace)
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;CanScrollDown = function(self)
&#9;&#9;&#9;&#9;&#9;return self.ScrollIndex + self.VisibleSpace &lt; self.TotalSpace
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;CanScrollUp = function(self)
&#9;&#9;&#9;&#9;&#9;return self.ScrollIndex &gt; 0
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;CanScrollRight = function(self)
&#9;&#9;&#9;&#9;&#9;return self.ScrollIndex + self.VisibleSpace &lt; self.TotalSpace
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;CanScrollLeft = function(self)
&#9;&#9;&#9;&#9;&#9;return self.ScrollIndex &gt; 0
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;ScrollDown = function(self)
&#9;&#9;&#9;&#9;&#9;self.ScrollIndex += self.PageIncrement
&#9;&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;ScrollUp = function(self)
&#9;&#9;&#9;&#9;&#9;self.ScrollIndex -= self.PageIncrement
&#9;&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;ScrollRight = function(self)
&#9;&#9;&#9;&#9;&#9;self.ScrollIndex += self.PageIncrement
&#9;&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;ScrollLeft = function(self)
&#9;&#9;&#9;&#9;&#9;self.ScrollIndex -= self.PageIncrement
&#9;&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;ScrollTo = function(self,index)
&#9;&#9;&#9;&#9;&#9;self.ScrollIndex = index
&#9;&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;&#9;end,
&#9;&#9;&#9;&#9;SetScrollPercent = function(self,percent)
&#9;&#9;&#9;&#9;&#9;self.ScrollIndex = math_floor((self.TotalSpace - self.VisibleSpace)*percent + .5)
&#9;&#9;&#9;&#9;&#9;self:Update()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;}
&#9;&#9;})

&#9;&#9;local UpdateScrollThumb
&#9;&#9;if horizontal then
&#9;&#9;&#9;function UpdateScrollThumb()
&#9;&#9;&#9;&#9;ScrollThumbFrame.Size = UDim2_new(Class.VisibleSpace/Class.TotalSpace,0,0,GUI_SIZE)
&#9;&#9;&#9;&#9;if ScrollThumbFrame.AbsoluteSize.X &lt; GUI_SIZE then
&#9;&#9;&#9;&#9;&#9;ScrollThumbFrame.Size = UDim2_new(0,GUI_SIZE,0,GUI_SIZE)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;local barSize = ScrollBarFrame.AbsoluteSize.X
&#9;&#9;&#9;&#9;ScrollThumbFrame.Position = UDim2_new(Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.X)/barSize,0,0,0)
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;function UpdateScrollThumb()
&#9;&#9;&#9;&#9;ScrollThumbFrame.Size = UDim2_new(0,GUI_SIZE,Class.VisibleSpace/Class.TotalSpace,0)
&#9;&#9;&#9;&#9;if ScrollThumbFrame.AbsoluteSize.Y &lt; GUI_SIZE then
&#9;&#9;&#9;&#9;&#9;ScrollThumbFrame.Size = UDim2_new(0,GUI_SIZE,0,GUI_SIZE)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;local barSize = ScrollBarFrame.AbsoluteSize.Y
&#9;&#9;&#9;&#9;ScrollThumbFrame.Position = UDim2_new(0,0,Class:GetScrollPercent()*(barSize - ScrollThumbFrame.AbsoluteSize.Y)/barSize,0)
&#9;&#9;&#9;end
&#9;&#9;end

&#9;&#9;local lastDown, lastUp
&#9;&#9;local scrollStyle = {BackgroundColor3=Color3_new(1, 1, 1),BackgroundTransparency=0}
&#9;&#9;local scrollStyle_ds = {BackgroundColor3=Color3_new(1, 1, 1),BackgroundTransparency=.7}

&#9;&#9;local function Update()
&#9;&#9;&#9;local t, v, s = Class.TotalSpace, Class.VisibleSpace, Class.ScrollIndex
&#9;&#9;&#9;if v &lt;= t then
&#9;&#9;&#9;&#9;if s &gt; 0 then
&#9;&#9;&#9;&#9;&#9;if s + v &gt; t then
&#9;&#9;&#9;&#9;&#9;&#9;Class.ScrollIndex = t - v
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Class.ScrollIndex = 0
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;Class.ScrollIndex = 0
&#9;&#9;&#9;end

&#9;&#9;&#9;if Class.UpdateCallback then
&#9;&#9;&#9;&#9;if Class.UpdateCallback(Class) == false then
&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;local down = Class:CanScrollDown()
&#9;&#9;&#9;local up = Class:CanScrollUp()
&#9;&#9;&#9;if down ~= lastDown then
&#9;&#9;&#9;&#9;lastDown = down
&#9;&#9;&#9;&#9;ScrollDownFrame.Active = down
&#9;&#9;&#9;&#9;ScrollDownFrame.AutoButtonColor = down
&#9;&#9;&#9;&#9;local children = GetChildren(ScrollDownGraphic)
&#9;&#9;&#9;&#9;local style = down and scrollStyle or scrollStyle_ds
&#9;&#9;&#9;&#9;for i = 1,#children do
&#9;&#9;&#9;&#9;&#9;Create(children[i],style)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if up ~= lastUp then
&#9;&#9;&#9;&#9;lastUp = up
&#9;&#9;&#9;&#9;ScrollUpFrame.Active = up
&#9;&#9;&#9;&#9;ScrollUpFrame.AutoButtonColor = up
&#9;&#9;&#9;&#9;local children = GetChildren(ScrollUpGraphic)
&#9;&#9;&#9;&#9;local style = up and scrollStyle or scrollStyle_ds
&#9;&#9;&#9;&#9;for i = 1,#children do
&#9;&#9;&#9;&#9;&#9;Create(children[i],style)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;ScrollThumbFrame.Visible = down or up
&#9;&#9;&#9;UpdateScrollThumb()
&#9;&#9;end
&#9;&#9;Class.Update = Update

&#9;&#9;SetZIndexOnChanged(ScrollFrame)

&#9;&#9;local MouseDrag = Create(&apos;ImageButton&apos;,{
&#9;&#9;&#9;Name = &quot;MouseDrag&quot;,
&#9;&#9;&#9;Position = UDim2_new(-.25,0,-.25,0),
&#9;&#9;&#9;Size = UDim2_new(1.5,0,1.5,0),
&#9;&#9;&#9;Transparency = 1,
&#9;&#9;&#9;AutoButtonColor = false,
&#9;&#9;&#9;Active = true,
&#9;&#9;&#9;ZIndex = 10
&#9;&#9;})

&#9;&#9;local scrollEventID = 0
&#9;&#9;Connect(ScrollDownFrame.MouseButton1Down, function()
&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;local current = scrollEventID
&#9;&#9;&#9;local up_con
&#9;&#9;&#9;up_con = Connect(MouseDrag.MouseButton1Up, function()
&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;&#9;ResetButtonColor(ScrollDownFrame)
&#9;&#9;&#9;&#9;Disconnect(up_con)
&#9;&#9;&#9;&#9;drag = nil
&#9;&#9;&#9;end)
&#9;&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;&#9;Class:ScrollDown()
&#9;&#9;&#9;wait(.2)
&#9;&#9;&#9;while scrollEventID == current do
&#9;&#9;&#9;&#9;Class:ScrollDown()
&#9;&#9;&#9;&#9;if not Class:CanScrollDown() then break end
&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;end
&#9;&#9;end)

&#9;&#9;Connect(ScrollDownFrame.MouseButton1Up, function()
&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;end)

&#9;&#9;Connect(ScrollUpFrame.MouseButton1Down, function()
&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;local current = scrollEventID
&#9;&#9;&#9;local up_con
&#9;&#9;&#9;up_con = Connect(MouseDrag.MouseButton1Up, function()
&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;&#9;ResetButtonColor(ScrollUpFrame)
&#9;&#9;&#9;&#9;Disconnect(up_con)
&#9;&#9;&#9;&#9;drag = nil
&#9;&#9;&#9;end)
&#9;&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;&#9;Class:ScrollUp()
&#9;&#9;&#9;wait(.2)
&#9;&#9;&#9;while scrollEventID == current do
&#9;&#9;&#9;&#9;Class:ScrollUp()
&#9;&#9;&#9;&#9;if not Class:CanScrollUp() then break end
&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;end
&#9;&#9;end)

&#9;&#9;Connect(ScrollUpFrame.MouseButton1Up, function()
&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;end)

&#9;&#9;if horizontal then
&#9;&#9;&#9;Connect(ScrollBarFrame.MouseButton1Down, function(x,y)
&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;local current = scrollEventID
&#9;&#9;&#9;&#9;local up_con
&#9;&#9;&#9;&#9;up_con = Connect(MouseDrag.MouseButton1Up, function()
&#9;&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;&#9;&#9;ResetButtonColor(ScrollUpFrame)
&#9;&#9;&#9;&#9;&#9;Disconnect(up_con)
&#9;&#9;&#9;&#9;&#9;drag = nil
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;&#9;&#9;if x &gt; ScrollThumbFrame.AbsolutePosition.X then
&#9;&#9;&#9;&#9;&#9;Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
&#9;&#9;&#9;&#9;&#9;wait(.2)
&#9;&#9;&#9;&#9;&#9;while scrollEventID == current do
&#9;&#9;&#9;&#9;&#9;&#9;if x &lt; ScrollThumbFrame.AbsolutePosition.X + ScrollThumbFrame.AbsoluteSize.X then break end
&#9;&#9;&#9;&#9;&#9;&#9;Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
&#9;&#9;&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
&#9;&#9;&#9;&#9;&#9;wait(.2)
&#9;&#9;&#9;&#9;&#9;while scrollEventID == current do
&#9;&#9;&#9;&#9;&#9;&#9;if x &gt; ScrollThumbFrame.AbsolutePosition.X then break end
&#9;&#9;&#9;&#9;&#9;&#9;Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
&#9;&#9;&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;else
&#9;&#9;&#9;Connect(ScrollBarFrame.MouseButton1Down, function(x,y)
&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;local current = scrollEventID
&#9;&#9;&#9;&#9;local up_con
&#9;&#9;&#9;&#9;up_con = Connect(MouseDrag.MouseButton1Up, function()
&#9;&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;&#9;&#9;ResetButtonColor(ScrollUpFrame)
&#9;&#9;&#9;&#9;&#9;Disconnect(up_con)
&#9;&#9;&#9;&#9;&#9;drag = nil
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;&#9;&#9;if y &gt; ScrollThumbFrame.AbsolutePosition.Y then
&#9;&#9;&#9;&#9;&#9;Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
&#9;&#9;&#9;&#9;&#9;wait(.2)
&#9;&#9;&#9;&#9;&#9;while scrollEventID == current do
&#9;&#9;&#9;&#9;&#9;&#9;if y &lt; ScrollThumbFrame.AbsolutePosition.Y + ScrollThumbFrame.AbsoluteSize.Y then break end
&#9;&#9;&#9;&#9;&#9;&#9;Class:ScrollTo(Class.ScrollIndex + Class.VisibleSpace)
&#9;&#9;&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
&#9;&#9;&#9;&#9;&#9;wait(.2)
&#9;&#9;&#9;&#9;&#9;while scrollEventID == current do
&#9;&#9;&#9;&#9;&#9;&#9;if y &gt; ScrollThumbFrame.AbsolutePosition.Y then break end
&#9;&#9;&#9;&#9;&#9;&#9;Class:ScrollTo(Class.ScrollIndex - Class.VisibleSpace)
&#9;&#9;&#9;&#9;&#9;&#9;wait()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;end

&#9;&#9;if horizontal then
&#9;&#9;&#9;Connect(ScrollThumbFrame.MouseButton1Down, function(x,y)
&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;local mouse_offset = x - ScrollThumbFrame.AbsolutePosition.X
&#9;&#9;&#9;&#9;local drag_con
&#9;&#9;&#9;&#9;local up_con
&#9;&#9;&#9;&#9;drag_con = Connect(MouseDrag.MouseMoved, function(x,y)
&#9;&#9;&#9;&#9;&#9;local bar_abs_pos = ScrollBarFrame.AbsolutePosition.X
&#9;&#9;&#9;&#9;&#9;local bar_drag = ScrollBarFrame.AbsoluteSize.X - ScrollThumbFrame.AbsoluteSize.X
&#9;&#9;&#9;&#9;&#9;local bar_abs_one = bar_abs_pos + bar_drag
&#9;&#9;&#9;&#9;&#9;x -= mouse_offset
&#9;&#9;&#9;&#9;&#9;x = x &lt; bar_abs_pos and bar_abs_pos or x &gt; bar_abs_one and bar_abs_one or x
&#9;&#9;&#9;&#9;&#9;x -= bar_abs_pos
&#9;&#9;&#9;&#9;&#9;Class:SetScrollPercent(x/(bar_drag))
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;up_con = Connect(MouseDrag.MouseButton1Up, function()
&#9;&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;&#9;&#9;ResetButtonColor(ScrollThumbFrame)
&#9;&#9;&#9;&#9;&#9;Disconnect(drag_con)
&#9;&#9;&#9;&#9;&#9;drag_con = nil
&#9;&#9;&#9;&#9;&#9;Disconnect(up_con)
&#9;&#9;&#9;&#9;&#9;drag = nil
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;&#9;end)
&#9;&#9;else
&#9;&#9;&#9;Connect(ScrollThumbFrame.MouseButton1Down, function(x,y)
&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;local mouse_offset = y - ScrollThumbFrame.AbsolutePosition.Y
&#9;&#9;&#9;&#9;local drag_con, up_con
&#9;&#9;&#9;&#9;drag_con = Connect(MouseDrag.MouseMoved, function(x,y)
&#9;&#9;&#9;&#9;&#9;local bar_abs_pos = ScrollBarFrame.AbsolutePosition.Y
&#9;&#9;&#9;&#9;&#9;local bar_drag = ScrollBarFrame.AbsoluteSize.Y - ScrollThumbFrame.AbsoluteSize.Y
&#9;&#9;&#9;&#9;&#9;local bar_abs_one = bar_abs_pos + bar_drag
&#9;&#9;&#9;&#9;&#9;y -= mouse_offset
&#9;&#9;&#9;&#9;&#9;y = y &lt; bar_abs_pos and bar_abs_pos or y &gt; bar_abs_one and bar_abs_one or y
&#9;&#9;&#9;&#9;&#9;y -= bar_abs_pos
&#9;&#9;&#9;&#9;&#9;Class:SetScrollPercent(y/(bar_drag))
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;up_con = Connect(MouseDrag.MouseButton1Up, function()
&#9;&#9;&#9;&#9;&#9;scrollEventID = tick()
&#9;&#9;&#9;&#9;&#9;MouseDrag.Parent = nil
&#9;&#9;&#9;&#9;&#9;ResetButtonColor(ScrollThumbFrame)
&#9;&#9;&#9;&#9;&#9;Disconnect(drag_con)
&#9;&#9;&#9;&#9;&#9;drag_con = nil
&#9;&#9;&#9;&#9;&#9;Disconnect(up_con)
&#9;&#9;&#9;&#9;&#9;drag = nil
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;MouseDrag.Parent = GetScreen(ScrollFrame)
&#9;&#9;&#9;end)
&#9;&#9;end

&#9;&#9;function Class:Destroy()
&#9;&#9;&#9;Destroy(ScrollFrame)
&#9;&#9;&#9;Destroy(MouseDrag)
&#9;&#9;&#9;for k in next, Class do
&#9;&#9;&#9;&#9;Class[k] = nil
&#9;&#9;&#9;end
&#9;&#9;&#9;setmetatable(Class, nil)
&#9;&#9;end
&#9;&#9;Update()
&#9;&#9;return Class
&#9;end
end

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
---- Explorer panel

Create(explorerPanel,{
&#9;BackgroundColor3 = GuiColor.Field;
&#9;BorderColor3 = GuiColor.Border;
&#9;Active = true;
})

local SettingsRemote = explorerPanel.Parent:WaitForChild(&quot;SettingsPanel&quot;):WaitForChild(&quot;GetSetting&quot;)
local GetApiRemote = explorerPanel.Parent:WaitForChild(&quot;PropertiesFrame&quot;):WaitForChild(&quot;GetApi&quot;)
local GetAwaitRemote = explorerPanel.Parent:WaitForChild(&quot;PropertiesFrame&quot;):WaitForChild(&quot;GetAwaiting&quot;)
local bindSetAwaiting = explorerPanel.Parent:WaitForChild(&quot;PropertiesFrame&quot;):WaitForChild(&quot;SetAwaiting&quot;)

local SaveInstanceWindow = explorerPanel.Parent:WaitForChild(&quot;SaveInstance&quot;)
local ConfirmationWindow = explorerPanel.Parent:WaitForChild(&quot;Confirmation&quot;)
local CautionWindow = explorerPanel.Parent:WaitForChild(&quot;Caution&quot;)
local TableCautionWindow = explorerPanel.Parent:WaitForChild(&quot;TableCaution&quot;)

local RemoteWindow = explorerPanel.Parent:WaitForChild(&quot;CallRemote&quot;)

local ScriptEditor = explorerPanel.Parent:WaitForChild(&quot;ScriptEditor&quot;)
local ScriptEditorEvent = ScriptEditor:WaitForChild(&quot;OpenScript&quot;)

local CurrentSaveInstanceWindow
local CurrentRemoteWindow

local lastSelectedNode

local DexStorage
local DexStorageMain
local DexStorageEnabled

if saveinstance then DexStorageEnabled = true end

if DexStorageEnabled then
&#9;DexStorage = Instance.new(&quot;Folder&quot;)
&#9;DexStorage.Name = &quot;Dex&quot;
&#9;DexStorageMain = Instance.new(&quot;Folder&quot;,DexStorage)
&#9;DexStorageMain.Name = &quot;DexStorage&quot;
end

local NilStorage
local NilStorageMain
local NilStorageEnabled

if get_nil_instances and IfThisFunctionWasStableEnough then NilStorageEnabled = true end

if NilStorageEnabled then
&#9;NilStorage = Instance.new(&quot;Folder&quot;)
&#9;NilStorage.Name = &quot;Dex Internal Storage&quot;
&#9;NilStorageMain = Instance.new(&quot;Folder&quot;,NilStorage)
&#9;NilStorageMain.Name = &quot;Nil Instances&quot;
end

local listFrame = Create(&apos;Frame&apos;,{
&#9;Name = &quot;List&quot;;
&#9;BackgroundTransparency = 1;
&#9;ClipsDescendants = true;
&#9;Position = UDim2.new(0,0,0,HEADER_SIZE);
&#9;Size = UDim2.new(1,-GUI_SIZE,1,-HEADER_SIZE);
&#9;Parent = explorerPanel;
})

local scrollBar = ScrollBar(false)
scrollBar.PageIncrement = 1
Create(scrollBar.GUI,{
&#9;Position = UDim2.new(1,-GUI_SIZE,0,HEADER_SIZE);
&#9;Size = UDim2.new(0,GUI_SIZE,1,-HEADER_SIZE);
&#9;Parent = explorerPanel;
})

local scrollBarH = ScrollBar(true)
scrollBarH.PageIncrement = GUI_SIZE
Create(scrollBarH.GUI,{
&#9;Position = UDim2.new(0,0,1,-GUI_SIZE);
&#9;Size = UDim2.new(1,-GUI_SIZE,0,GUI_SIZE);
&#9;Visible = false;
&#9;Parent = explorerPanel;
})

local headerFrame = Create(&apos;Frame&apos;,{
&#9;Name = &quot;Header&quot;;
&#9;BackgroundColor3 = GuiColor.Background;
&#9;BorderColor3 = GuiColor.Border;
&#9;Position = UDim2.new(0,0,0,0);
&#9;Size = UDim2.new(1,0,0,HEADER_SIZE);
&#9;Parent = explorerPanel;
&#9;Create(&apos;TextLabel&apos;,{
&#9;&#9;Text = &quot;Explorer&quot;;
&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;TextColor3 = GuiColor.Text;
&#9;&#9;TextXAlignment = &apos;Left&apos;;
&#9;&#9;Font = FONT;
&#9;&#9;FontSize = FONT_SIZE;
&#9;&#9;Position = UDim2.new(0,4,0,0);
&#9;&#9;Size = UDim2.new(1,-4,0.5,0);
&#9;});
})

local explorerFilter = &#9;Create(&apos;TextBox&apos;,{
&#9;PlaceholderText = &quot;Filter Workspace&quot;;
&#9;PlaceholderColor3 = Color3.new(44/255, 44/255, 44/255);
&#9;Text = &quot;&quot;;
&#9;BackgroundTransparency = 0.8;
&#9;TextColor3 = GuiColor.Text;
&#9;TextXAlignment = &apos;Left&apos;;
&#9;Font = FONT;
&#9;FontSize = FONT_SIZE;
&#9;Position = UDim2.new(0,4,0.5,0);
&#9;Size = UDim2.new(1,-8,0.5,-2);
});
explorerFilter.Parent = headerFrame

SetZIndexOnChanged(explorerPanel)

local function CreateColor3(r, g, b) return Color3.new(r/255,g/255,b/255) end

local Styles = {
&#9;Font = Enum.Font.Arial,
&#9;Margin = 5,
&#9;Black = Color3_fromRGB(0,0,5),
&#9;Black2 = Color3_fromRGB(24, 24, 29),
&#9;White = Color3_fromRGB(244,244,249),
&#9;WhiteOver = Color3_fromRGB(200,200,205),
&#9;Hover = Color3_fromRGB(2, 128, 149),
&#9;Hover2 = Color3_fromRGB(5, 102, 146)
}

local Row = {
&#9;Font = Styles.Font,
&#9;FontSize = Enum.FontSize.Size14,
&#9;TextXAlignment = Enum.TextXAlignment.Left,
&#9;TextColor = Styles.White,
&#9;TextColorOver = Styles.WhiteOver,
&#9;TextLockedColor = Color3_fromRGB(155,155,160),
&#9;Height = 24,
&#9;BorderColor = Color3_fromRGB(54,54,55),
&#9;BackgroundColor = Styles.Black2,
&#9;BackgroundColorAlternate = Color3_fromRGB(32, 32, 37),
&#9;BackgroundColorMouseover = Color3_fromRGB(40, 40, 45),
&#9;TitleMarginLeft = 15
}

local DropDown = {
&#9;Font = Styles.Font,
&#9;FontSize = Enum.FontSize.Size14,
&#9;TextColor = Color3_fromRGB(255,255,260),
&#9;TextColorOver = Row.TextColorOver,
&#9;TextXAlignment = Enum.TextXAlignment.Left,
&#9;Height = 20,
&#9;BackColor = Styles.Black2,
&#9;BackColorOver = Styles.Hover2,
&#9;BorderColor = Color3_fromRGB(45,45,50),
&#9;BorderSizePixel = 0,
&#9;ArrowColor = Color3_fromRGB(80,80,83),
&#9;ArrowColorOver = Styles.Hover
}

local BrickColors = {
&#9;BoxSize = 13,
&#9;BorderSizePixel = 0,
&#9;BorderColor = Color3_fromRGB(53,53,55),
&#9;FrameColor = Color3_fromRGB(53,53,55),
&#9;Size = 20,
&#9;Padding = 4,
&#9;ColorsPerRow = 8,
&#9;OuterBorder = 1,
&#9;OuterBorderColor = Styles.Black
}

local currentRightClickMenu
local CurrentInsertObjectWindow
local CurrentFunctionCallerWindow

local RbxApi

function ClassCanCreate(IName)
&#9;local success,err = pcall(function() Instance.new(IName) end)
&#9;if err then
&#9;&#9;return false
&#9;else
&#9;&#9;return true
&#9;end
end

function GetClasses()
&#9;if RbxApi == nil then return {} end
&#9;local classTable = {}
&#9;for i,v in pairs(RbxApi.Classes) do
&#9;&#9;if ClassCanCreate(v.Name) then
&#9;&#9;&#9;table.insert(classTable,v.Name)
&#9;&#9;end
&#9;end
&#9;return classTable
end

local function sortAlphabetic(t, property)
&#9;table.sort(t, 
&#9;&#9;function(x,y) return x[property] &lt; y[property]
&#9;end)
end

local function FunctionIsHidden(functionData)
&#9;local tags = functionData[&quot;tags&quot;]
&#9;for _,name in pairs(tags) do
&#9;&#9;if name == &quot;deprecated&quot;
&#9;&#9;&#9;or name == &quot;hidden&quot;
&#9;&#9;&#9;or name == &quot;writeonly&quot; then
&#9;&#9;&#9;return true
&#9;&#9;end
&#9;end
&#9;return false
end

local function GetAllFunctions(className)
&#9;local class = RbxApi.Classes[className]
&#9;local functions = {}
&#9;
&#9;if not class then return functions end
&#9;
&#9;while class do
&#9;&#9;if class.Name == &quot;Instance&quot; then break end
&#9;&#9;for _,nextFunction in pairs(class.Functions) do
&#9;&#9;&#9;if not FunctionIsHidden(nextFunction) then
&#9;&#9;&#9;&#9;table.insert(functions, nextFunction)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;class = RbxApi.Classes[class.Superclass]
&#9;end
&#9;
&#9;sortAlphabetic(functions, &quot;Name&quot;)

&#9;return functions
end

function GetFunctions()
&#9;if RbxApi == nil then return {} end
&#9;local List = SelectionVar():Get()
&#9;
&#9;if #List == 0 then return end
&#9;
&#9;local MyObject = List[1]
&#9;
&#9;local functionTable = {}
&#9;for i,v in pairs(GetAllFunctions(MyObject.ClassName)) do
&#9;&#9;table.insert(functionTable,v)
&#9;end
&#9;return functionTable
end

function CreateInsertObjectMenu(choices, currentChoice, readOnly, onClick)
&#9;local mouse = game:GetService(&quot;Players&quot;).LocalPlayer:GetMouse()
&#9;local totalSize = explorerPanel.Parent.AbsoluteSize.y
&#9;if #choices == 0 then return end
&#9;
&#9;table.sort(choices, function(a,b) return a &lt; b end)

&#9;local frame = Instance.new(&quot;Frame&quot;)&#9;
&#9;frame.Name = &quot;InsertObject&quot;
&#9;frame.Size = UDim2.new(0, 200, 1, 0)
&#9;frame.BackgroundTransparency = 1
&#9;frame.Active = true
&#9;
&#9;local menu = nil
&#9;local arrow = nil
&#9;local expanded = false
&#9;local margin = DropDown.BorderSizePixel;
&#9;
&#9;--[[
&#9;local button = Instance.new(&quot;TextButton&quot;)
&#9;button.Font = Row.Font
&#9;button.FontSize = Row.FontSize
&#9;button.TextXAlignment = Row.TextXAlignment
&#9;button.BackgroundTransparency = 1
&#9;button.TextColor3 = Row.TextColor
&#9;if readOnly then
&#9;&#9;button.TextColor3 = Row.TextLockedColor
&#9;end
&#9;button.Text = currentChoice
&#9;button.Size = UDim2.new(1, -2 * Styles.Margin, 1, 0)
&#9;button.Position = UDim2.new(0, Styles.Margin, 0, 0)
&#9;button.Parent = frame
&#9;--]]
&#9;
&#9;local function hideMenu()
&#9;&#9;expanded = false
&#9;&#9;--showArrow(DropDown.ArrowColor)
&#9;&#9;if frame then 
&#9;&#9;&#9;--frame:Destroy()
&#9;&#9;&#9;CurrentInsertObjectWindow.Visible = false
&#9;&#9;end
&#9;end
&#9;
&#9;local function showMenu()
&#9;&#9;expanded = true
&#9;&#9;menu = Instance.new(&quot;ScrollingFrame&quot;)
&#9;&#9;menu.Size = UDim2.new(0,200,1,0)
&#9;&#9;menu.CanvasSize = UDim2.new(0, 200, 0, #choices * DropDown.Height)
&#9;&#9;menu.Position = UDim2.new(0, margin, 0, 0)
&#9;&#9;menu.BackgroundTransparency = 0
&#9;&#9;menu.BackgroundColor3 = DropDown.BackColor
&#9;&#9;menu.BorderColor3 = DropDown.BorderColor
&#9;&#9;menu.BorderSizePixel = DropDown.BorderSizePixel
&#9;&#9;menu.TopImage = &quot;rbxasset://textures/blackBkg_square.png&quot;
&#9;&#9;menu.MidImage = &quot;rbxasset://textures/blackBkg_square.png&quot;
&#9;&#9;menu.BottomImage = &quot;rbxasset://textures/blackBkg_square.png&quot;
&#9;&#9;menu.Active = true
&#9;&#9;menu.ZIndex = 5
&#9;&#9;menu.Parent = frame
&#9;&#9;
&#9;&#9;--local parentFrameHeight = script.Parent.List.Size.Y.Offset
&#9;&#9;--local rowHeight = mouse.Y
&#9;&#9;--if (rowHeight + menu.Size.Y.Offset) &gt; parentFrameHeight then
&#9;&#9;--&#9;menu.Position = UDim2.new(0, margin, 0, -1 * (#choices * DropDown.Height) - margin)
&#9;&#9;--end
&#9;&#9;&#9;
&#9;&#9;local function choice(name)
&#9;&#9;&#9;onClick(name)
&#9;&#9;&#9;hideMenu()
&#9;&#9;end
&#9;&#9;
&#9;&#9;for i,name in pairs(choices) do
&#9;&#9;&#9;local option = CreateRightClickMenuItem(name, function()
&#9;&#9;&#9;&#9;choice(name)
&#9;&#9;&#9;end,1)
&#9;&#9;&#9;option.Size = UDim2.new(1, 0, 0, 20)
&#9;&#9;&#9;option.Position = UDim2.new(0, 0, 0, (i - 1) * DropDown.Height)
&#9;&#9;&#9;option.ZIndex = menu.ZIndex
&#9;&#9;&#9;option.Parent = menu
&#9;&#9;end
&#9;end
&#9;
&#9;showMenu()
&#9;
&#9;return frame
end

function CreateFunctionCallerMenu(choices, currentChoice, readOnly, onClick)
&#9;local mouse = game:GetService(&quot;Players&quot;).LocalPlayer:GetMouse()
&#9;local totalSize = explorerPanel.Parent.AbsoluteSize.y
&#9;if #choices == 0 then return end
&#9;
&#9;table.sort(choices, function(a,b) return a.Name &lt; b.Name end)

&#9;local frame = Instance.new(&quot;Frame&quot;)&#9;
&#9;frame.Name = &quot;InsertObject&quot;
&#9;frame.Size = UDim2.new(0, 200, 1, 0)
&#9;frame.BackgroundTransparency = 1
&#9;frame.Active = true
&#9;
&#9;local menu = nil
&#9;local arrow = nil
&#9;local expanded = false
&#9;local margin = DropDown.BorderSizePixel;
&#9;
&#9;local function hideMenu()
&#9;&#9;expanded = false
&#9;&#9;--showArrow(DropDown.ArrowColor)
&#9;&#9;if frame then 
&#9;&#9;&#9;--frame:Destroy()
&#9;&#9;&#9;CurrentInsertObjectWindow.Visible = false
&#9;&#9;end
&#9;end
&#9;
&#9;local function showMenu()
&#9;&#9;expanded = true
&#9;&#9;menu = Instance.new(&quot;ScrollingFrame&quot;)
&#9;&#9;menu.Size = UDim2.new(0,300,1,0)
&#9;&#9;menu.CanvasSize = UDim2.new(0, 300, 0, #choices * DropDown.Height)
&#9;&#9;menu.Position = UDim2.new(0, margin, 0, 0)
&#9;&#9;menu.BackgroundTransparency = 0
&#9;&#9;menu.BackgroundColor3 = DropDown.BackColor
&#9;&#9;menu.BorderColor3 = DropDown.BorderColor
&#9;&#9;menu.BorderSizePixel = DropDown.BorderSizePixel
&#9;&#9;menu.TopImage = &quot;rbxasset://textures/blackBkg_square.png&quot;
&#9;&#9;menu.MidImage = &quot;rbxasset://textures/blackBkg_square.png&quot;
&#9;&#9;menu.BottomImage = &quot;rbxasset://textures/blackBkg_square.png&quot;
&#9;&#9;menu.Active = true
&#9;&#9;menu.ZIndex = 5
&#9;&#9;menu.Parent = frame
&#9;&#9;
&#9;&#9;--local parentFrameHeight = script.Parent.List.Size.Y.Offset
&#9;&#9;--local rowHeight = mouse.Y
&#9;&#9;--if (rowHeight + menu.Size.Y.Offset) &gt; parentFrameHeight then
&#9;&#9;--&#9;menu.Position = UDim2.new(0, margin, 0, -1 * (#choices * DropDown.Height) - margin)
&#9;&#9;--end
&#9;&#9;
&#9;&#9;local function GetParameters(functionData)
&#9;&#9;&#9;local paraString = &quot;&quot;
&#9;&#9;&#9;paraString = paraString..&quot;(&quot;
&#9;&#9;&#9;for i,v in pairs(functionData.Arguments) do
&#9;&#9;&#9;&#9;paraString = paraString..v.Type..&quot; &quot;..v.Name
&#9;&#9;&#9;&#9;if i &lt; #functionData.Arguments then
&#9;&#9;&#9;&#9;&#9;paraString = paraString..&quot;, &quot;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;paraString = paraString..&quot;)&quot;
&#9;&#9;&#9;return paraString
&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;local function choice(name)
&#9;&#9;&#9;onClick(name)
&#9;&#9;&#9;hideMenu()
&#9;&#9;end
&#9;&#9;
&#9;&#9;for i,name in pairs(choices) do
&#9;&#9;&#9;local option = CreateRightClickMenuItem(name.ReturnType..&quot; &quot;..name.Name..GetParameters(name), function()
&#9;&#9;&#9;&#9;choice(name)
&#9;&#9;&#9;end,2)
&#9;&#9;&#9;option.Size = UDim2.new(1, 0, 0, 20)
&#9;&#9;&#9;option.Position = UDim2.new(0, 0, 0, (i - 1) * DropDown.Height)
&#9;&#9;&#9;option.ZIndex = menu.ZIndex
&#9;&#9;&#9;option.Parent = menu
&#9;&#9;end
&#9;end


&#9;showMenu()

&#9;
&#9;return frame
end

function CreateInsertObject()
&#9;if not CurrentInsertObjectWindow then return end
&#9;CurrentInsertObjectWindow.Visible = true
&#9;if currentRightClickMenu and CurrentInsertObjectWindow.Visible then
&#9;&#9;CurrentInsertObjectWindow.Position = UDim2.new(0,currentRightClickMenu.Position.X.Offset-currentRightClickMenu.Size.X.Offset-6,0,0)
&#9;end
&#9;if CurrentInsertObjectWindow.Visible then
&#9;&#9;CurrentInsertObjectWindow.Parent = explorerPanel.Parent
&#9;end
end

function CreateFunctionCaller(oh)
&#9;if CurrentFunctionCallerWindow then
&#9;&#9;CurrentFunctionCallerWindow:Destroy()
&#9;&#9;CurrentFunctionCallerWindow = nil
&#9;end
&#9;CurrentFunctionCallerWindow = CreateFunctionCallerMenu(
&#9;&#9;GetFunctions(),
&#9;&#9;&quot;&quot;,
&#9;&#9;false,
&#9;&#9;function(option)
&#9;&#9;&#9;CurrentFunctionCallerWindow:Destroy()
&#9;&#9;&#9;CurrentFunctionCallerWindow = nil
&#9;&#9;&#9;local list = SelectionVar():Get()
&#9;&#9;&#9;for i,v in pairs(list) do
&#9;&#9;&#9;&#9;local rets = {pcall(function() return (v[option.Name](v)) end)}
&#9;&#9;&#9;&#9;table.remove(rets,1)
&#9;&#9;&#9;&#9;pcall(function() print(&quot;Function&quot;, option.Name, &quot;on&quot;, v, &quot;:&quot;, unpack(rets)) end)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;DestroyRightClick()
&#9;&#9;end
&#9;)
&#9;if currentRightClickMenu and CurrentFunctionCallerWindow then
&#9;&#9;CurrentFunctionCallerWindow.Position = UDim2.new(0,currentRightClickMenu.Position.X.Offset-currentRightClickMenu.Size.X.Offset*1.5-2,0,0)
&#9;end
&#9;if CurrentFunctionCallerWindow then
&#9;&#9;CurrentFunctionCallerWindow.Parent = explorerPanel.Parent
&#9;end
end

function CreateRightClickMenuItem(text, onClick, insObj)
&#9;local button = Instance.new(&quot;TextButton&quot;)
&#9;button.Font = DropDown.Font
&#9;button.FontSize = DropDown.FontSize
&#9;button.TextColor3 = DropDown.TextColor
&#9;button.BackgroundColor3 = DropDown.BackColor
&#9;button.AutoButtonColor = false
&#9;button.BorderSizePixel = 0
&#9;button.TextTransparency = 1
&#9;button.Active = true
&#9;
&#9;if text then
&#9;&#9;local label = Instance.new(&quot;TextLabel&quot;, button)
&#9;&#9;label.Size = UDim2.new(1, 0, 1, 0)
&#9;&#9;label.Font = DropDown.Font
&#9;&#9;label.FontSize = Enum.FontSize.Size11
&#9;&#9;label.TextColor3 = DropDown.TextColor
&#9;&#9;label.TextXAlignment = DropDown.TextXAlignment
&#9;&#9;label.BackgroundTransparency = 1
&#9;&#9;label.BorderSizePixel = 0
&#9;&#9;label.ZIndex = 5

&#9;&#9;label.Text = text
&#9;&#9;button.Text = text
&#9;&#9;

&#9;&#9;if insObj == 2 then
&#9;&#9;&#9;label.FontSize = Enum.FontSize.Size11
&#9;&#9;&#9;label.Size = UDim2.new(1, -16, 1, 0)
&#9;&#9;&#9;label.Position = UDim2.new(0, 16, 0, 0)
&#9;&#9;else
&#9;&#9;&#9;if insObj == 1 or ExplorerIndex[text] then
&#9;&#9;&#9;&#9;local newIcon = Icon(nil,ExplorerIndex[text] or 0)
&#9;&#9;&#9;&#9;newIcon.Position = UDim2.new(0,2,0,2)
&#9;&#9;&#9;&#9;newIcon.Size = UDim2.new(0,16,0,16)
&#9;&#9;&#9;&#9;newIcon.IconMap.ZIndex = 5
&#9;&#9;&#9;&#9;newIcon.Parent = button
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;label.Size = UDim2.new(1, -32, 1, 0)
&#9;&#9;&#9;label.Position = UDim2.new(0, 32, 0, 0)
&#9;&#9;end
&#9;&#9;
&#9;&#9;
&#9;&#9;button.MouseEnter:connect(function()
&#9;&#9;&#9;button.TextColor3 = DropDown.TextColorOver
&#9;&#9;&#9;button.BackgroundColor3 = DropDown.BackColorOver
&#9;&#9;&#9;if not insObj and CurrentInsertObjectWindow then
&#9;&#9;&#9;&#9;if CurrentInsertObjectWindow.Visible == false and button.Text == &quot;Insert Object&quot; then
&#9;&#9;&#9;&#9;&#9;CreateInsertObject()
&#9;&#9;&#9;&#9;elseif CurrentInsertObjectWindow.Visible and button.Text ~= &quot;Insert Object&quot; then
&#9;&#9;&#9;&#9;&#9;CurrentInsertObjectWindow.Visible = false
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;if not insObj then
&#9;&#9;&#9;&#9;if CurrentFunctionCallerWindow and button.Text ~= &quot;Call Function&quot; then
&#9;&#9;&#9;&#9;&#9;CurrentFunctionCallerWindow:Destroy()
&#9;&#9;&#9;&#9;&#9;CurrentFunctionCallerWindow = nil
&#9;&#9;&#9;&#9;elseif button.Text == &quot;Call Function&quot; then
&#9;&#9;&#9;&#9;&#9;CreateFunctionCaller()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;button.MouseLeave:connect(function()
&#9;&#9;&#9;button.TextColor3 = DropDown.TextColor
&#9;&#9;&#9;button.BackgroundColor3 = DropDown.BackColor
&#9;&#9;end)
&#9;&#9;button.MouseButton1Click:connect(function()
&#9;&#9;&#9;button.TextColor3 = DropDown.TextColor
&#9;&#9;&#9;button.BackgroundColor3 = DropDown.BackColor
&#9;&#9;&#9;onClick(text)
&#9;&#9;end)&#9;
&#9;else
&#9;&#9;local sep = Instance.new(&quot;Frame&quot;, button)
&#9;&#9;sep.Size = UDim2.new(1, -20, 0, 1)
&#9;&#9;sep.Position = UDim2.new(0, 16, 0, 2)
&#9;&#9;sep.BackgroundColor3 = DropDown.BorderColor
&#9;&#9;sep.BorderSizePixel = 0
&#9;&#9;sep.ZIndex = 5
&#9;end
&#9;
&#9;return button
end

function CreateRightClickMenu(choices, currentChoice, readOnly, onClick)
&#9;local mouse = game:GetService(&quot;Players&quot;).LocalPlayer:GetMouse()

&#9;local frame = Instance.new(&quot;TextButton&quot;)&#9;
&#9;frame.Name = &quot;DropDown&quot;
&#9;frame.Size = UDim2.new(0, 200, 0, 0)
&#9;frame.AutoButtonColor = false
&#9;frame.Style = Enum.ButtonStyle.RobloxRoundDropdownButton
&#9;frame.Active = false
&#9;
&#9;local menu = nil
&#9;local arrow = nil
&#9;local expanded = false
&#9;local margin = DropDown.BorderSizePixel;
&#9;
&#9;local function hideMenu()
&#9;&#9;expanded = false
&#9;&#9;if frame then 
&#9;&#9;&#9;frame:Destroy()
&#9;&#9;&#9;DestroyRightClick()
&#9;&#9;end
&#9;end
&#9;
&#9;local function showMenu()
&#9;&#9;expanded = true
&#9;&#9;menu = Instance.new(&quot;Frame&quot;)
&#9;&#9;menu.Size = UDim2.new(0, 200, 0, 0)
&#9;&#9;
&#9;&#9;for i,name in pairs(choices) do
&#9;&#9;&#9;if name then
&#9;&#9;&#9;&#9;menu.Size = menu.Size + UDim2.new(0, 0, 0, 20)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;menu.Size = menu.Size + UDim2.new(0, 0, 0, 7)
&#9;&#9;&#9;end&#9;&#9;
&#9;&#9;end
&#9;&#9;
&#9;&#9;frame.Size = menu.Size + UDim2.new(0, 0, 0, 6)
&#9;&#9;
&#9;&#9;menu.Position = UDim2.new(0, -16, 0, -10)
&#9;&#9;menu.BackgroundTransparency = 0
&#9;&#9;menu.BackgroundColor3 = DropDown.BackColor
&#9;&#9;menu.BorderColor3 = DropDown.BorderColor
&#9;&#9;menu.BorderSizePixel = DropDown.BorderSizePixel
&#9;&#9;menu.Active = true
&#9;&#9;menu.ZIndex = 5
&#9;&#9;menu.Parent = frame
&#9;&#9;
&#9;&#9;local function choice(name)
&#9;&#9;&#9;onClick(name)
&#9;&#9;&#9;hideMenu()
&#9;&#9;end
&#9;&#9;
&#9;&#9;local previous&#9;&#9;
&#9;&#9;for i,name in pairs(choices) do
&#9;&#9;&#9;local option = CreateRightClickMenuItem(name, function()
&#9;&#9;&#9;&#9;choice(name)
&#9;&#9;&#9;end)
&#9;&#9;&#9;
&#9;&#9;&#9;if name then
&#9;&#9;&#9;&#9;option.Size = UDim2.new(1, 0, 0, 20)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;option.Size = UDim2.new(1, 0, 0, 7)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;if previous then
&#9;&#9;&#9;&#9;option.Position = UDim2.new(0, 0, 0, previous.Position.Height.Offset + previous.Size.Height.Offset)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;option.ZIndex = menu.ZIndex
&#9;&#9;&#9;option.Parent = menu
&#9;&#9;&#9;
&#9;&#9;&#9;previous = option&#9;&#9;&#9;
&#9;&#9;end
&#9;end

&#9;showMenu()
&#9;
&#9;return frame
end

function checkMouseInGui(gui)
&#9;if gui == nil then return false end
&#9;local plrMouse = game:GetService(&quot;Players&quot;).LocalPlayer:GetMouse()
&#9;local guiPosition = gui.AbsolutePosition
&#9;local guiSize = gui.AbsoluteSize&#9;
&#9;
&#9;if plrMouse.X &gt;= guiPosition.x and plrMouse.X &lt;= guiPosition.x + guiSize.x and plrMouse.Y &gt;= guiPosition.y and plrMouse.Y &lt;= guiPosition.y + guiSize.y then
&#9;&#9;return true
&#9;else
&#9;&#9;return false
&#9;end
end

local clipboard = {}
local function delete(o)
&#9;o.Parent = nil
end

local getTextWidth do
&#9;local text = Create(&apos;TextLabel&apos;,{
&#9;&#9;Name = &quot;TextWidth&quot;;
&#9;&#9;TextXAlignment = &apos;Left&apos;;
&#9;&#9;TextYAlignment = &apos;Center&apos;;
&#9;&#9;Font = FONT;
&#9;&#9;FontSize = FONT_SIZE;
&#9;&#9;Text = &quot;&quot;;
&#9;&#9;Position = UDim2.new(0,0,0,0);
&#9;&#9;Size = UDim2.new(1,0,1,0);
&#9;&#9;Visible = false;
&#9;&#9;Parent = explorerPanel;
&#9;})
&#9;function getTextWidth(s)
&#9;&#9;text.Text = s
&#9;&#9;return text.TextBounds.x
&#9;end
end

local nameScanned = false
-- Holds the game tree converted to a list.
local TreeList = {}
-- Matches objects to their tree node representation.
local NodeLookup = {}

local nodeWidth = 0

local QuickButtons = {}

function filteringWorkspace()
&#9;if explorerFilter.Text ~= &quot;&quot; and explorerFilter.Text ~= &quot;Filter Workspace&quot; then
&#9;&#9;return true
&#9;end
&#9;return false
end

function lookForAName(obj,name)
&#9;for i,v in pairs(obj:GetChildren()) do
&#9;&#9;if string.find(string.lower(v.Name),string.lower(name)) then nameScanned = true end
&#9;&#9;lookForAName(v,name)
&#9;end
end

function scanName(obj)
&#9;nameScanned = false
&#9;if string.find(string.lower(obj.Name),string.lower(explorerFilter.Text)) then
&#9;&#9;nameScanned = true
&#9;else
&#9;&#9;lookForAName(obj,explorerFilter.Text)
&#9;end
&#9;return nameScanned
end

function updateActions()
&#9;for i,v in pairs(QuickButtons) do
&#9;&#9;if v.Cond() then
&#9;&#9;&#9;v.Toggle(true)
&#9;&#9;else
&#9;&#9;&#9;v.Toggle(false)
&#9;&#9;end
&#9;end
end

local updateList,rawUpdateList,updateScroll,rawUpdateSize do
&#9;local function r(t)
&#9;&#9;for i = 1,#t do
&#9;&#9;&#9;if not filteringWorkspace() or scanName(t[i].Object) then
&#9;&#9;&#9;&#9;if t.Object == game then
&#9;&#9;&#9;&#9;&#9;if childrenGame[t[i].Object] then
&#9;&#9;&#9;&#9;&#9;&#9;TreeList[#TreeList+1] = t[i]
&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;local w = (t[i].Depth)*(2+ENTRY_PADDING+GUI_SIZE) + 2 + ENTRY_SIZE + 4 + getTextWidth(t[i].Object.Name) + 4
&#9;&#9;&#9;&#9;&#9;&#9;if w &gt; nodeWidth then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;nodeWidth = w
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;if t[i].Expanded or filteringWorkspace() then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;r(t[i])
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;TreeList[#TreeList+1] = t[i]
&#9;
&#9;&#9;&#9;&#9;&#9;local w = (t[i].Depth)*(2+ENTRY_PADDING+GUI_SIZE) + 2 + ENTRY_SIZE + 4 + getTextWidth(t[i].Object.Name) + 4
&#9;&#9;&#9;&#9;&#9;if w &gt; nodeWidth then
&#9;&#9;&#9;&#9;&#9;&#9;nodeWidth = w
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;if t[i].Expanded or filteringWorkspace() then
&#9;&#9;&#9;&#9;&#9;&#9;r(t[i])
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;function rawUpdateSize()
&#9;&#9;scrollBarH.TotalSpace = nodeWidth
&#9;&#9;scrollBarH.VisibleSpace = listFrame.AbsoluteSize.x
&#9;&#9;scrollBarH:Update()
&#9;&#9;local visible = scrollBarH:CanScrollDown() or scrollBarH:CanScrollUp()
&#9;&#9;scrollBarH.GUI.Visible = visible

&#9;&#9;listFrame.Size = UDim2.new(1,-GUI_SIZE,1,-GUI_SIZE*(visible and 1 or 0) - HEADER_SIZE)

&#9;&#9;scrollBar.VisibleSpace = math.ceil(listFrame.AbsoluteSize.y/ENTRY_BOUND)
&#9;&#9;scrollBar.GUI.Size = UDim2.new(0,GUI_SIZE,1,-GUI_SIZE*(visible and 1 or 0) - HEADER_SIZE)
&#9;&#9;
&#9;&#9;scrollBar.TotalSpace = #TreeList+1
&#9;&#9;scrollBar:Update()
&#9;end

&#9;function rawUpdateList()
&#9;&#9;-- Clear then repopulate the entire list. It appears to be fast enough.
&#9;&#9;TreeList = {}
&#9;&#9;nodeWidth = 0
&#9;&#9;r(NodeLookup[game])
&#9;&#9;r(NodeLookup[DexOutput])
&#9;&#9;if DexStorageEnabled then
&#9;&#9;&#9;r(NodeLookup[DexStorage])
&#9;&#9;end
&#9;&#9;if NilStorageEnabled then
&#9;&#9;&#9;r(NodeLookup[NilStorage])
&#9;&#9;end
&#9;&#9;r(NodeLookup[HiddenEntries])
&#9;&#9;r(NodeLookup[HiddenGame])
&#9;&#9;rawUpdateSize()
&#9;&#9;updateActions()
&#9;end

&#9;-- Adding or removing large models will cause many updates to occur. We
&#9;-- can reduce the number of updates by creating a delay, then dropping any
&#9;-- updates that occur during the delay.
&#9;local updatingList = false
&#9;function updateList()
&#9;&#9;if updatingList then return end
&#9;&#9;updatingList = true
&#9;&#9;wait(0.25)
&#9;&#9;updatingList = false
&#9;&#9;rawUpdateList()
&#9;end

&#9;local updatingScroll = false
&#9;function updateScroll()
&#9;&#9;if updatingScroll then return end
&#9;&#9;updatingScroll = true
&#9;&#9;wait(0.25)
&#9;&#9;updatingScroll = false
&#9;&#9;scrollBar:Update()
&#9;end
end

local Selection do
&#9;local bindGetSelection = explorerPanel:FindFirstChild(&quot;GetSelection&quot;)
&#9;if not bindGetSelection then
&#9;&#9;bindGetSelection = Create(&apos;BindableFunction&apos;,{Name = &quot;GetSelection&quot;})
&#9;&#9;bindGetSelection.Parent = explorerPanel
&#9;end

&#9;local bindSetSelection = explorerPanel:FindFirstChild(&quot;SetSelection&quot;)
&#9;if not bindSetSelection then
&#9;&#9;bindSetSelection = Create(&apos;BindableFunction&apos;,{Name = &quot;SetSelection&quot;})
&#9;&#9;bindSetSelection.Parent = explorerPanel
&#9;end

&#9;local bindSelectionChanged = explorerPanel:FindFirstChild(&quot;SelectionChanged&quot;)
&#9;if not bindSelectionChanged then
&#9;&#9;bindSelectionChanged = Create(&apos;BindableEvent&apos;,{Name = &quot;SelectionChanged&quot;})
&#9;&#9;bindSelectionChanged.Parent = explorerPanel
&#9;end

&#9;local SelectionList = {}
&#9;local SelectionSet = {}
&#9;local Updates = true
&#9;Selection = {
&#9;&#9;Selected = SelectionSet;
&#9;&#9;List = SelectionList;
&#9;}

&#9;local function addObject(object)
&#9;&#9;-- list update
&#9;&#9;local lupdate = false
&#9;&#9;-- scroll update
&#9;&#9;local supdate = false

&#9;&#9;if not SelectionSet[object] then
&#9;&#9;&#9;local node = NodeLookup[object]
&#9;&#9;&#9;if node then
&#9;&#9;&#9;&#9;table.insert(SelectionList,object)
&#9;&#9;&#9;&#9;SelectionSet[object] = true
&#9;&#9;&#9;&#9;node.Selected = true

&#9;&#9;&#9;&#9;-- expand all ancestors so that selected node becomes visible
&#9;&#9;&#9;&#9;node = node.Parent
&#9;&#9;&#9;&#9;while node do
&#9;&#9;&#9;&#9;&#9;if not node.Expanded then
&#9;&#9;&#9;&#9;&#9;&#9;node.Expanded = true
&#9;&#9;&#9;&#9;&#9;&#9;lupdate = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;node = node.Parent
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;supdate = true
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return lupdate,supdate
&#9;end

&#9;Selection.Finding = false
&#9;Selection.Found = {}
&#9;
&#9;function Selection:Set(objects)
&#9;&#9;if Selection.Finding then
&#9;&#9;&#9;Selection.Found = objects&#9;
&#9;&#9;end
&#9;&#9;
&#9;&#9;local lupdate = false
&#9;&#9;local supdate = false

&#9;&#9;if #SelectionList &gt; 0 then
&#9;&#9;&#9;for i = 1,#SelectionList do
&#9;&#9;&#9;&#9;local object = SelectionList[i]
&#9;&#9;&#9;&#9;local node = NodeLookup[object]
&#9;&#9;&#9;&#9;if node then
&#9;&#9;&#9;&#9;&#9;node.Selected = false
&#9;&#9;&#9;&#9;&#9;SelectionSet[object] = nil
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end

&#9;&#9;&#9;SelectionList = {}
&#9;&#9;&#9;Selection.List = SelectionList
&#9;&#9;&#9;supdate = true
&#9;&#9;end

&#9;&#9;for i = 1,#objects do
&#9;&#9;&#9;local l,s = addObject(objects[i])
&#9;&#9;&#9;lupdate = l or lupdate
&#9;&#9;&#9;supdate = s or supdate
&#9;&#9;end

&#9;&#9;if lupdate then
&#9;&#9;&#9;rawUpdateList()
&#9;&#9;&#9;supdate = true
&#9;&#9;elseif supdate then
&#9;&#9;&#9;scrollBar:Update()
&#9;&#9;end

&#9;&#9;if supdate then
&#9;&#9;&#9;bindSelectionChanged:Fire()
&#9;&#9;&#9;updateActions()
&#9;&#9;end
&#9;end

&#9;function Selection:Add(object)
&#9;&#9;local l,s = addObject(object)
&#9;&#9;if l then
&#9;&#9;&#9;rawUpdateList()
&#9;&#9;&#9;if Updates then
&#9;&#9;&#9;&#9;bindSelectionChanged:Fire()
&#9;&#9;&#9;&#9;updateActions()
&#9;&#9;&#9;end
&#9;&#9;elseif s then
&#9;&#9;&#9;scrollBar:Update()
&#9;&#9;&#9;if Updates then
&#9;&#9;&#9;&#9;bindSelectionChanged:Fire()
&#9;&#9;&#9;&#9;updateActions()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;function Selection:StopUpdates()
&#9;&#9;Updates = false
&#9;end
&#9;
&#9;function Selection:ResumeUpdates()
&#9;&#9;Updates = true
&#9;&#9;bindSelectionChanged:Fire()
&#9;&#9;updateActions()
&#9;end

&#9;function Selection:Remove(object,noupdate)
&#9;&#9;if SelectionSet[object] then
&#9;&#9;&#9;local node = NodeLookup[object]
&#9;&#9;&#9;if node then
&#9;&#9;&#9;&#9;node.Selected = false
&#9;&#9;&#9;&#9;SelectionSet[object] = nil
&#9;&#9;&#9;&#9;for i = 1,#SelectionList do
&#9;&#9;&#9;&#9;&#9;if SelectionList[i] == object then
&#9;&#9;&#9;&#9;&#9;&#9;table.remove(SelectionList,i)
&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;if not noupdate then
&#9;&#9;&#9;&#9;&#9;scrollBar:Update()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;bindSelectionChanged:Fire()
&#9;&#9;&#9;&#9;updateActions()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;function Selection:Get()
&#9;&#9;local list = {}
&#9;&#9;for i = 1,#SelectionList do
&#9;&#9;&#9;if SelectionList[i] ~= HiddenEntriesMain and SelectionList[i] ~= DexOutputMain then
&#9;&#9;&#9;&#9;table.insert(list, SelectionList[i])
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;return list
&#9;end

&#9;bindSetSelection.OnInvoke = function(...)
&#9;&#9;Selection:Set(...)
&#9;end

&#9;bindGetSelection.OnInvoke = function()
&#9;&#9;return Selection:Get()
&#9;end
end

function CreateCaution(title,msg)
&#9;local newCaution = CautionWindow
&#9;newCaution.Visible = true
&#9;newCaution.Title.Text = title
&#9;newCaution.MainWindow.Desc.Text = msg
&#9;newCaution.MainWindow.Ok.MouseButton1Up:connect(function()
&#9;&#9;newCaution.Visible = false
&#9;end)
end

function CreateTableCaution(title,msg)
&#9;if type(msg) ~= &quot;table&quot; then return CreateCaution(title,tostring(msg)) end
&#9;local newCaution = TableCautionWindow:Clone()
&#9;newCaution.Title.Text = title
&#9;
&#9;local TableList = newCaution.MainWindow.TableResults
&#9;local TableTemplate = newCaution.MainWindow.TableTemplate
&#9;
&#9;for i,v in pairs(msg) do
&#9;&#9;local newResult = TableTemplate:Clone()
&#9;&#9;newResult.Type.Text = type(v)
&#9;&#9;newResult.Value.Text = tostring(v)
&#9;&#9;newResult.Position = UDim2.new(0,0,0,#TableList:GetChildren() * 20)
&#9;&#9;newResult.Parent = TableList
&#9;&#9;TableList.CanvasSize = UDim2.new(0,0,0,#TableList:GetChildren() * 20)
&#9;&#9;newResult.Visible = true
&#9;end
&#9;newCaution.Parent = explorerPanel.Parent
&#9;newCaution.Visible = true
&#9;newCaution.MainWindow.Ok.MouseButton1Up:connect(function()
&#9;&#9;newCaution:Destroy()
&#9;end)
end

local function Split(str, delimiter)
&#9;local start = 1
&#9;local t = {}
&#9;while true do
&#9;&#9;local pos = string.find (str, delimiter, start, true)
&#9;&#9;if not pos then
&#9;&#9;&#9;break
&#9;&#9;end
&#9;&#9;table.insert (t, string.sub (str, start, pos - 1))
&#9;&#9;start = pos + string.len (delimiter)
&#9;end
&#9;table.insert (t, string.sub (str, start))
&#9;return t
end

local function ToValue(value,type)
&#9;if type == &quot;Vector2&quot; then
&#9;&#9;local list = Split(value,&quot;,&quot;)
&#9;&#9;if #list &lt; 2 then return nil end
&#9;&#9;local x = tonumber(list[1]) or 0
&#9;&#9;local y = tonumber(list[2]) or 0
&#9;&#9;return Vector2.new(x,y)
&#9;elseif type == &quot;Vector3&quot; then
&#9;&#9;local list = Split(value,&quot;,&quot;)
&#9;&#9;if #list &lt; 3 then return nil end
&#9;&#9;local x = tonumber(list[1]) or 0
&#9;&#9;local y = tonumber(list[2]) or 0
&#9;&#9;local z = tonumber(list[3]) or 0
&#9;&#9;return Vector3.new(x,y,z)
&#9;elseif type == &quot;Color3&quot; then
&#9;&#9;local list = Split(value,&quot;,&quot;)
&#9;&#9;if #list &lt; 3 then return nil end
&#9;&#9;local r = tonumber(list[1]) or 0
&#9;&#9;local g = tonumber(list[2]) or 0
&#9;&#9;local b = tonumber(list[3]) or 0
&#9;&#9;return Color3.new(r/255,g/255, b/255)
&#9;elseif type == &quot;UDim2&quot; then
&#9;&#9;local list = Split(string.gsub(string.gsub(value, &quot;{&quot;, &quot;&quot;),&quot;}&quot;,&quot;&quot;),&quot;,&quot;)
&#9;&#9;if #list &lt; 4 then return nil end
&#9;&#9;local xScale = tonumber(list[1]) or 0
&#9;&#9;local xOffset = tonumber(list[2]) or 0
&#9;&#9;local yScale = tonumber(list[3]) or 0
&#9;&#9;local yOffset = tonumber(list[4]) or 0
&#9;&#9;return UDim2.new(xScale, xOffset, yScale, yOffset)
&#9;elseif type == &quot;Number&quot; then
&#9;&#9;return tonumber(value)
&#9;elseif type == &quot;String&quot; then
&#9;&#9;return value
&#9;elseif type == &quot;NumberRange&quot; then
&#9;&#9;local list = Split(value,&quot;,&quot;)
&#9;&#9;if #list == 1 then
&#9;&#9;&#9;if tonumber(list[1]) == nil then return nil end
&#9;&#9;&#9;local newVal = tonumber(list[1]) or 0
&#9;&#9;&#9;return NumberRange.new(newVal)
&#9;&#9;end
&#9;&#9;if #list &lt; 2 then return nil end
&#9;&#9;local x = tonumber(list[1]) or 0
&#9;&#9;local y = tonumber(list[2]) or 0
&#9;&#9;return NumberRange.new(x,y)
&#9;elseif type == &quot;Script&quot; then
&#9;&#9;local success,err = ypcall(function()
&#9;&#9;return loadstring(
&#9;&#9;&#9;&quot;return &quot;..value
&#9;&#9;)()
&#9;&#9;end)
&#9;&#9;if err then
&#9;&#9;&#9;return nil
&#9;&#9;end
&#9;else
&#9;&#9;return nil
&#9;end
end

local function ToPropValue(value,type)
&#9;if type == &quot;Vector2&quot; then
&#9;&#9;local list = Split(value,&quot;,&quot;)
&#9;&#9;if #list &lt; 2 then return nil end
&#9;&#9;local x = tonumber(list[1]) or 0
&#9;&#9;local y = tonumber(list[2]) or 0
&#9;&#9;return Vector2.new(x,y)
&#9;elseif type == &quot;Vector3&quot; then
&#9;&#9;local list = Split(value,&quot;,&quot;)
&#9;&#9;if #list &lt; 3 then return nil end
&#9;&#9;local x = tonumber(list[1]) or 0
&#9;&#9;local y = tonumber(list[2]) or 0
&#9;&#9;local z = tonumber(list[3]) or 0
&#9;&#9;return Vector3.new(x,y,z)
&#9;elseif type == &quot;Color3&quot; then
&#9;&#9;local list = Split(value,&quot;,&quot;)
&#9;&#9;if #list &lt; 3 then return nil end
&#9;&#9;local r = tonumber(list[1]) or 0
&#9;&#9;local g = tonumber(list[2]) or 0
&#9;&#9;local b = tonumber(list[3]) or 0
&#9;&#9;return Color3.new(r/255,g/255, b/255)
&#9;elseif type == &quot;UDim2&quot; then
&#9;&#9;local list = Split(string.gsub(string.gsub(value, &quot;{&quot;, &quot;&quot;),&quot;}&quot;,&quot;&quot;),&quot;,&quot;)
&#9;&#9;if #list &lt; 4 then return nil end
&#9;&#9;local xScale = tonumber(list[1]) or 0
&#9;&#9;local xOffset = tonumber(list[2]) or 0
&#9;&#9;local yScale = tonumber(list[3]) or 0
&#9;&#9;local yOffset = tonumber(list[4]) or 0
&#9;&#9;return UDim2.new(xScale, xOffset, yScale, yOffset)
&#9;elseif type == &quot;Content&quot; then
&#9;&#9;return value
&#9;elseif type == &quot;float&quot; or type == &quot;int&quot; or type == &quot;double&quot; then
&#9;&#9;return tonumber(value)
&#9;elseif type == &quot;string&quot; then
&#9;&#9;return value
&#9;elseif type == &quot;NumberRange&quot; then
&#9;&#9;local list = Split(value,&quot;,&quot;)
&#9;&#9;if #list == 1 then
&#9;&#9;&#9;if tonumber(list[1]) == nil then return nil end
&#9;&#9;&#9;local newVal = tonumber(list[1]) or 0
&#9;&#9;&#9;return NumberRange.new(newVal)
&#9;&#9;end
&#9;&#9;if #list &lt; 2 then return nil end
&#9;&#9;local x = tonumber(list[1]) or 0
&#9;&#9;local y = tonumber(list[2]) or 0
&#9;&#9;return NumberRange.new(x,y)
&#9;elseif string.sub(value,1,4) == &quot;Enum&quot; then
&#9;&#9;local getEnum = value
&#9;&#9;while true do
&#9;&#9;&#9;local x,y = string.find(getEnum,&quot;.&quot;)
&#9;&#9;&#9;if y then
&#9;&#9;&#9;&#9;getEnum = string.sub(getEnum,y+1)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;print(getEnum)
&#9;&#9;return getEnum
&#9;else
&#9;&#9;return nil
&#9;end
end

function PromptRemoteCaller(inst)
&#9;if CurrentRemoteWindow then
&#9;&#9;CurrentRemoteWindow:Destroy()
&#9;&#9;CurrentRemoteWindow = nil
&#9;end
&#9;CurrentRemoteWindow = RemoteWindow:Clone()
&#9;CurrentRemoteWindow.Parent = explorerPanel.Parent
&#9;CurrentRemoteWindow.Visible = true
&#9;
&#9;local displayValues = false
&#9;
&#9;local ArgumentList = CurrentRemoteWindow.MainWindow.Arguments
&#9;local ArgumentTemplate = CurrentRemoteWindow.MainWindow.ArgumentTemplate
&#9;
&#9;if inst:IsA(&quot;RemoteEvent&quot;) then
&#9;&#9;CurrentRemoteWindow.Title.Text = &quot;Fire Event&quot;
&#9;&#9;CurrentRemoteWindow.MainWindow.Ok.Text = &quot;Fire&quot;
&#9;&#9;CurrentRemoteWindow.MainWindow.DisplayReturned.Visible = false
&#9;&#9;CurrentRemoteWindow.MainWindow.Desc2.Visible = false
&#9;end
&#9;
&#9;local newArgument = ArgumentTemplate:Clone()
&#9;newArgument.Parent = ArgumentList
&#9;newArgument.Visible = true
&#9;newArgument.Type.MouseButton1Down:connect(function()
&#9;&#9;createDDown(newArgument.Type,function(choice)
&#9;&#9;&#9;newArgument.Type.Text = choice
&#9;&#9;end,&quot;Script&quot;,&quot;Number&quot;,&quot;String&quot;,&quot;Color3&quot;,&quot;Vector3&quot;,&quot;Vector2&quot;,&quot;UDim2&quot;,&quot;NumberRange&quot;)
&#9;end)
&#9;
&#9;CurrentRemoteWindow.MainWindow.Ok.MouseButton1Up:connect(function()
&#9;&#9;if CurrentRemoteWindow and inst.Parent ~= nil then
&#9;&#9;&#9;local MyArguments = {}
&#9;&#9;&#9;for i,v in pairs(ArgumentList:GetChildren()) do
&#9;&#9;&#9;&#9;table.insert(MyArguments,ToValue(v.Value.Text,v.Type.Text))
&#9;&#9;&#9;end
&#9;&#9;&#9;if inst:IsA(&quot;RemoteFunction&quot;) then
&#9;&#9;&#9;&#9;if displayValues then
&#9;&#9;&#9;&#9;&#9;spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;local myResults = inst:InvokeServer(unpack(MyArguments))
&#9;&#9;&#9;&#9;&#9;&#9;if myResults then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;CreateTableCaution(&quot;Remote Caller&quot;,myResults)
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;CreateCaution(&quot;Remote Caller&quot;,&quot;This remote did not return anything.&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;inst:InvokeServer(unpack(MyArguments))
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;inst:FireServer(unpack(MyArguments))
&#9;&#9;&#9;end
&#9;&#9;&#9;CurrentRemoteWindow:Destroy()
&#9;&#9;&#9;CurrentRemoteWindow = nil
&#9;&#9;end
&#9;end)
&#9;
&#9;CurrentRemoteWindow.MainWindow.Add.MouseButton1Up:connect(function()
&#9;&#9;if CurrentRemoteWindow then
&#9;&#9;&#9;local newArgument = ArgumentTemplate:Clone()
&#9;&#9;&#9;newArgument.Position = UDim2.new(0,0,0,#ArgumentList:GetChildren() * 20)
&#9;&#9;&#9;newArgument.Parent = ArgumentList
&#9;&#9;&#9;ArgumentList.CanvasSize = UDim2.new(0,0,0,#ArgumentList:GetChildren() * 20)
&#9;&#9;&#9;newArgument.Visible = true
&#9;&#9;&#9;newArgument.Type.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;createDDown(newArgument.Type,function(choice)
&#9;&#9;&#9;&#9;&#9;newArgument.Type.Text = choice
&#9;&#9;&#9;&#9;end,&quot;Script&quot;,&quot;Number&quot;,&quot;String&quot;,&quot;Color3&quot;,&quot;Vector3&quot;,&quot;Vector2&quot;,&quot;UDim2&quot;,&quot;NumberRange&quot;)
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end)
&#9;
&#9;CurrentRemoteWindow.MainWindow.Subtract.MouseButton1Up:connect(function()
&#9;&#9;if CurrentRemoteWindow then
&#9;&#9;&#9;if #ArgumentList:GetChildren() &gt; 1 then
&#9;&#9;&#9;&#9;ArgumentList:GetChildren()[#ArgumentList:GetChildren()]:Destroy()
&#9;&#9;&#9;&#9;ArgumentList.CanvasSize = UDim2.new(0,0,0,#ArgumentList:GetChildren() * 20)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end)
&#9;
&#9;CurrentRemoteWindow.MainWindow.Cancel.MouseButton1Up:connect(function()
&#9;&#9;if CurrentRemoteWindow then
&#9;&#9;&#9;CurrentRemoteWindow:Destroy()
&#9;&#9;&#9;CurrentRemoteWindow = nil
&#9;&#9;end
&#9;end)
&#9;
&#9;CurrentRemoteWindow.MainWindow.DisplayReturned.MouseButton1Up:connect(function()
&#9;&#9;if displayValues then
&#9;&#9;&#9;displayValues = false
&#9;&#9;&#9;CurrentRemoteWindow.MainWindow.DisplayReturned.enabled.Visible = false
&#9;&#9;else
&#9;&#9;&#9;displayValues = true
&#9;&#9;&#9;CurrentRemoteWindow.MainWindow.DisplayReturned.enabled.Visible = true
&#9;&#9;end
&#9;end)
end

function PromptSaveInstance(inst)
&#9;if CurrentSaveInstanceWindow then
&#9;&#9;CurrentSaveInstanceWindow:Destroy()
&#9;&#9;CurrentSaveInstanceWindow = nil
&#9;&#9;if explorerPanel.Parent:FindFirstChild(&quot;SaveInstanceOverwriteCaution&quot;) then
&#9;&#9;&#9;explorerPanel.Parent.SaveInstanceOverwriteCaution:Destroy()
&#9;&#9;end
&#9;end
&#9;
&#9;CurrentSaveInstanceWindow = SaveInstanceWindow:Clone()
&#9;CurrentSaveInstanceWindow.Parent = explorerPanel.Parent
&#9;CurrentSaveInstanceWindow.Visible = true
&#9;
&#9;local filename = CurrentSaveInstanceWindow.MainWindow.FileName
&#9;local saveObjects = true
&#9;local overwriteCaution = false
&#9;
&#9;CurrentSaveInstanceWindow.MainWindow.Save.MouseButton1Up:connect(function()
&#9;&#9;if readfile then
&#9;&#9;&#9;if readfile(filename.Text..&quot;.rbxmx&quot;) then
&#9;&#9;&#9;&#9;if not overwriteCaution then
&#9;&#9;&#9;&#9;&#9;overwriteCaution = true
&#9;&#9;&#9;&#9;&#9;local newCaution = ConfirmationWindow:Clone()
&#9;&#9;&#9;&#9;&#9;newCaution.Name = &quot;SaveInstanceOverwriteCaution&quot;
&#9;&#9;&#9;&#9;&#9;newCaution.MainWindow.Desc.Text = &quot;The file, &quot;..filename.Text..&quot;.rbxmx, already exists. Overwrite?&quot;
&#9;&#9;&#9;&#9;&#9;newCaution.Parent = explorerPanel.Parent
&#9;&#9;&#9;&#9;&#9;newCaution.Visible = true
&#9;&#9;&#9;&#9;&#9;newCaution.MainWindow.Yes.MouseButton1Up:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;ypcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;SaveInstance(inst,filename.Text..&quot;.rbxmx&quot;,not saveObjects)
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;overwriteCaution = false
&#9;&#9;&#9;&#9;&#9;&#9;newCaution:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;if CurrentSaveInstanceWindow then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;CurrentSaveInstanceWindow:Destroy()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;CurrentSaveInstanceWindow = nil
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;newCaution.MainWindow.No.MouseButton1Up:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;overwriteCaution = false
&#9;&#9;&#9;&#9;&#9;&#9;newCaution:Destroy()
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;ypcall(function()
&#9;&#9;&#9;&#9;&#9;SaveInstance(inst,filename.Text..&quot;.rbxmx&quot;,not saveObjects)
&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;if CurrentSaveInstanceWindow then
&#9;&#9;&#9;&#9;&#9;CurrentSaveInstanceWindow:Destroy()
&#9;&#9;&#9;&#9;&#9;CurrentSaveInstanceWindow = nil
&#9;&#9;&#9;&#9;&#9;if explorerPanel.Parent:FindFirstChild(&quot;SaveInstanceOverwriteCaution&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;explorerPanel.Parent.SaveInstanceOverwriteCaution:Destroy()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;else
&#9;&#9;&#9;ypcall(function()
&#9;&#9;&#9;&#9;if SaveInstance then
&#9;&#9;&#9;&#9;&#9;SaveInstance(inst,filename.Text..&quot;.rbxmx&quot;,not saveObjects)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;_G.SaveInstance(inst,filename.Text,not saveObjects)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end)
&#9;&#9;&#9;if CurrentSaveInstanceWindow then
&#9;&#9;&#9;&#9;CurrentSaveInstanceWindow:Destroy()
&#9;&#9;&#9;&#9;CurrentSaveInstanceWindow = nil
&#9;&#9;&#9;&#9;if explorerPanel.Parent:FindFirstChild(&quot;SaveInstanceOverwriteCaution&quot;) then
&#9;&#9;&#9;&#9;&#9;explorerPanel.Parent.SaveInstanceOverwriteCaution:Destroy()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end)
&#9;CurrentSaveInstanceWindow.MainWindow.Cancel.MouseButton1Up:connect(function()
&#9;&#9;if CurrentSaveInstanceWindow then
&#9;&#9;&#9;CurrentSaveInstanceWindow:Destroy()
&#9;&#9;&#9;CurrentSaveInstanceWindow = nil
&#9;&#9;&#9;if explorerPanel.Parent:FindFirstChild(&quot;SaveInstanceOverwriteCaution&quot;) then
&#9;&#9;&#9;&#9;explorerPanel.Parent.SaveInstanceOverwriteCaution:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end)
&#9;CurrentSaveInstanceWindow.MainWindow.SaveObjects.MouseButton1Up:connect(function()
&#9;&#9;if saveObjects then
&#9;&#9;&#9;saveObjects = false
&#9;&#9;&#9;CurrentSaveInstanceWindow.MainWindow.SaveObjects.enabled.Visible = false
&#9;&#9;else
&#9;&#9;&#9;saveObjects = true
&#9;&#9;&#9;CurrentSaveInstanceWindow.MainWindow.SaveObjects.enabled.Visible = true
&#9;&#9;end
&#9;end)
end

function DestroyRightClick()
&#9;if currentRightClickMenu then
&#9;&#9;currentRightClickMenu:Destroy()
&#9;&#9;currentRightClickMenu = nil
&#9;end
&#9;if CurrentInsertObjectWindow and CurrentInsertObjectWindow.Visible then
&#9;&#9;CurrentInsertObjectWindow.Visible = false
&#9;end
end

function rightClickMenu(sObj)
&#9;local mouse = game:GetService(&quot;Players&quot;).LocalPlayer:GetMouse()
&#9;
&#9;currentRightClickMenu = CreateRightClickMenu(
&#9;&#9;{&quot;Cut&quot;,&quot;Copy&quot;,&quot;Paste Into&quot;,&quot;Duplicate&quot;,&quot;Delete&quot;,false,&quot;Group&quot;,&quot;Ungroup&quot;,&quot;Select Children&quot;,false,&quot;Teleport To&quot;,&quot;Call Function&quot;,&quot;Call Remote&quot;,false,&quot;Insert Part&quot;,&quot;Insert Object&quot;,&quot;Save to File...&quot;,false,&quot;View Script&quot;},
&#9;&#9;&quot;&quot;,
&#9;&#9;false,
&#9;&#9;function(option)
&#9;&#9;&#9;if option == &quot;Cut&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;clipboard = {}
&#9;&#9;&#9;&#9;local list = Selection.List
&#9;&#9;&#9;&#9;local cut = {}
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;local _, obj = pcall(function() return list[i]:Clone() end)
&#9;&#9;&#9;&#9;&#9;if obj then
&#9;&#9;&#9;&#9;&#9;&#9;table.insert(clipboard,obj)
&#9;&#9;&#9;&#9;&#9;&#9;table.insert(cut,list[i])
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;for i = 1,#cut do
&#9;&#9;&#9;&#9;&#9;pcall(delete,cut[i])
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;updateActions()
&#9;&#9;&#9;elseif option == &quot;Copy&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;clipboard = {}
&#9;&#9;&#9;&#9;local list = Selection.List
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;local _, obj = pcall(function() return list[i]:Clone() end)
&#9;&#9;&#9;&#9;&#9;if obj then
&#9;&#9;&#9;&#9;&#9;&#9;table.insert(clipboard,obj)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;updateActions()
&#9;&#9;&#9;elseif option == &quot;Paste Into&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local parent = Selection.List[1] or workspace
&#9;&#9;&#9;&#9;for i = 1,#clipboard do
&#9;&#9;&#9;&#9;&#9;if (clipboard[i]) then
&#9;&#9;&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;clipboard[i]:Clone().Parent = parent
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif option == &quot;Duplicate&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;local _, obj = pcall(function() return list[i]:Clone() end)
&#9;&#9;&#9;&#9;&#9;if obj then
&#9;&#9;&#9;&#9;&#9;&#9;obj.Parent = Selection.List[1].Parent or workspace
&#9;&#9;&#9;&#9;&#9;end&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif option == &quot;Delete&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;pcall(delete,list[i])
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Selection:Set({})
&#9;&#9;&#9;elseif option == &quot;Group&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local newModel = Instance.new(&quot;Model&quot;)
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;newModel.Parent = Selection.List[1].Parent or workspace
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;list[i].Parent = newModel
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Selection:Set({})
&#9;&#9;&#9;elseif option == &quot;Ungroup&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local ungrouped = {}
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;if list[i]:IsA(&quot;Model&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;for i2,v2 in pairs(list[i]:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;v2.Parent = list[i].Parent or workspace
&#9;&#9;&#9;&#9;&#9;&#9;&#9;table.insert(ungrouped,v2)
&#9;&#9;&#9;&#9;&#9;&#9;end&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;pcall(delete,list[i])&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Selection:Set({})
&#9;&#9;&#9;&#9;if SettingsRemote:Invoke(&quot;SelectUngrouped&quot;) then
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(ungrouped) do
&#9;&#9;&#9;&#9;&#9;&#9;Selection:Add(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif option == &quot;Select Children&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;Selection:Set({})
&#9;&#9;&#9;&#9;Selection:StopUpdates()
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;for i2,v2 in pairs(list[i]:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;Selection:Add(v2)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;Selection:ResumeUpdates()
&#9;&#9;&#9;elseif option == &quot;Teleport To&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;if list[i]:IsA(&quot;BasePart&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;game:GetService(&quot;Players&quot;).LocalPlayer.Character.HumanoidRootPart.CFrame = list[i].CFrame
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif option == &quot;Insert Part&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local insertedParts = {}
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;local newPart = Instance.new(&quot;Part&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;newPart.Parent = list[i]
&#9;&#9;&#9;&#9;&#9;&#9;newPart.CFrame = CFrame.new(game:GetService(&quot;Players&quot;).LocalPlayer.Character.Head.Position) + Vector3.new(0,3,0)
&#9;&#9;&#9;&#9;&#9;&#9;table.insert(insertedParts,newPart)
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif option == &quot;Save to File...&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;if #list == 1 then
&#9;&#9;&#9;&#9;&#9;list[1].Archivable = true
&#9;&#9;&#9;&#9;&#9;ypcall(function()SaveInstance(list[1],tostring(list[1]) .. tick())end)
&#9;&#9;&#9;&#9;elseif #list &gt; 1 then
&#9;&#9;&#9;&#9;&#9;local newModel = Instance.new(&quot;Model&quot;)
&#9;&#9;&#9;&#9;&#9;newModel.Name = &quot;SavedInstances&quot;
&#9;&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;&#9;ypcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;list[i].Archivable = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;list[i]:Clone().Parent = newModel
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;ypcall(function()SaveInstance(newModel,&quot;SavedInstances&quot; .. tick())end)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif option == &quot;Call Remote&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;if list[i]:IsA(&quot;RemoteFunction&quot;) or list[i]:IsA(&quot;RemoteEvent&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;PromptRemoteCaller(list[i])
&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;elseif option == &quot;View Script&quot; then
&#9;&#9;&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;&#9;&#9;local list = Selection:Get()
&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;if list[i]:IsA(&quot;LocalScript&quot;) or list[i]:IsA(&quot;ModuleScript&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;ScriptEditorEvent:Fire(list[i])
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;end)
&#9;currentRightClickMenu.Parent = explorerPanel.Parent
&#9;currentRightClickMenu.Position = UDim2.new(0,mouse.X,0,mouse.Y)
&#9;if currentRightClickMenu.AbsolutePosition.X + currentRightClickMenu.AbsoluteSize.X &gt; explorerPanel.AbsolutePosition.X + explorerPanel.AbsoluteSize.X then
&#9;&#9;currentRightClickMenu.Position = UDim2.new(0, explorerPanel.AbsolutePosition.X + explorerPanel.AbsoluteSize.X - currentRightClickMenu.AbsoluteSize.X, 0, mouse.Y)
&#9;end
end

local function cancelReparentDrag()end
local function cancelSelectDrag()end
do
&#9;local listEntries = {}
&#9;local nameConnLookup = {}

&#9;local mouseDrag = Create(&apos;ImageButton&apos;,{
&#9;&#9;Name = &quot;MouseDrag&quot;;
&#9;&#9;Position = UDim2.new(-0.25,0,-0.25,0);
&#9;&#9;Size = UDim2.new(1.5,0,1.5,0);
&#9;&#9;Transparency = 1;
&#9;&#9;AutoButtonColor = false;
&#9;&#9;Active = true;
&#9;&#9;ZIndex = 10;
&#9;})
&#9;local function dragSelect(last,add,button)
&#9;&#9;local connDrag
&#9;&#9;local conUp

&#9;&#9;conDrag = mouseDrag.MouseMoved:connect(function(x,y)
&#9;&#9;&#9;local pos = Vector2.new(x,y) - listFrame.AbsolutePosition
&#9;&#9;&#9;local size = listFrame.AbsoluteSize
&#9;&#9;&#9;if pos.x &lt; 0 or pos.x &gt; size.x or pos.y &lt; 0 or pos.y &gt; size.y then return end

&#9;&#9;&#9;local i = math.ceil(pos.y/ENTRY_BOUND) + scrollBar.ScrollIndex
&#9;&#9;&#9;-- Mouse may have made a large step, so interpolate between the
&#9;&#9;&#9;-- last index and the current.
&#9;&#9;&#9;for n = i&lt;last and i or last, i&gt;last and i or last do
&#9;&#9;&#9;&#9;local node = TreeList[n]
&#9;&#9;&#9;&#9;if node then
&#9;&#9;&#9;&#9;&#9;if add then
&#9;&#9;&#9;&#9;&#9;&#9;Selection:Add(node.Object)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;Selection:Remove(node.Object)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;last = i
&#9;&#9;end)

&#9;&#9;function cancelSelectDrag()
&#9;&#9;&#9;mouseDrag.Parent = nil
&#9;&#9;&#9;conDrag:disconnect()
&#9;&#9;&#9;conUp:disconnect()
&#9;&#9;&#9;function cancelSelectDrag()end
&#9;&#9;end

&#9;&#9;conUp = mouseDrag[button]:connect(cancelSelectDrag)

&#9;&#9;mouseDrag.Parent = GetScreen(listFrame)
&#9;end

&#9;local function dragReparent(object,dragGhost,clickPos,ghostOffset)
&#9;&#9;local connDrag
&#9;&#9;local conUp
&#9;&#9;local conUp2

&#9;&#9;local parentIndex = nil
&#9;&#9;local dragged = false

&#9;&#9;local parentHighlight = Create(&apos;Frame&apos;,{
&#9;&#9;&#9;Transparency = 1;
&#9;&#9;&#9;Visible = false;
&#9;&#9;&#9;Create(&apos;Frame&apos;,{
&#9;&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;&#9;&#9;BackgroundTransparency = 0.1;
&#9;&#9;&#9;&#9;Position = UDim2.new(0,0,0,0);
&#9;&#9;&#9;&#9;Size = UDim2.new(1,0,0,1);
&#9;&#9;&#9;});
&#9;&#9;&#9;Create(&apos;Frame&apos;,{
&#9;&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;&#9;&#9;BackgroundTransparency = 0.1;
&#9;&#9;&#9;&#9;Position = UDim2.new(1,0,0,0);
&#9;&#9;&#9;&#9;Size = UDim2.new(0,1,1,0);
&#9;&#9;&#9;});
&#9;&#9;&#9;Create(&apos;Frame&apos;,{
&#9;&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;&#9;&#9;BackgroundTransparency = 0.1;
&#9;&#9;&#9;&#9;Position = UDim2.new(0,0,1,0);
&#9;&#9;&#9;&#9;Size = UDim2.new(1,0,0,1);
&#9;&#9;&#9;});
&#9;&#9;&#9;Create(&apos;Frame&apos;,{
&#9;&#9;&#9;&#9;BorderSizePixel = 0;
&#9;&#9;&#9;&#9;BackgroundColor3 = Color3.new(0,0,0);
&#9;&#9;&#9;&#9;BackgroundTransparency = 0.1;
&#9;&#9;&#9;&#9;Position = UDim2.new(0,0,0,0);
&#9;&#9;&#9;&#9;Size = UDim2.new(0,1,1,0);
&#9;&#9;&#9;});
&#9;&#9;})
&#9;&#9;SetZIndex(parentHighlight,9)

&#9;&#9;conDrag = mouseDrag.MouseMoved:connect(function(x,y)
&#9;&#9;&#9;local dragPos = Vector2.new(x,y)
&#9;&#9;&#9;if dragged then
&#9;&#9;&#9;&#9;local pos = dragPos - listFrame.AbsolutePosition
&#9;&#9;&#9;&#9;local size = listFrame.AbsoluteSize

&#9;&#9;&#9;&#9;parentIndex = nil
&#9;&#9;&#9;&#9;parentHighlight.Visible = false
&#9;&#9;&#9;&#9;if pos.x &gt;= 0 and pos.x &lt;= size.x and pos.y &gt;= 0 and pos.y &lt;= size.y + ENTRY_SIZE*2 then
&#9;&#9;&#9;&#9;&#9;local i = math.ceil(pos.y/ENTRY_BOUND-2)
&#9;&#9;&#9;&#9;&#9;local node = TreeList[i + scrollBar.ScrollIndex]
&#9;&#9;&#9;&#9;&#9;if node and node.Object ~= object and not object:IsAncestorOf(node.Object) then
&#9;&#9;&#9;&#9;&#9;&#9;parentIndex = i
&#9;&#9;&#9;&#9;&#9;&#9;local entry = listEntries[i]
&#9;&#9;&#9;&#9;&#9;&#9;if entry then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;parentHighlight.Visible = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;parentHighlight.Position = UDim2.new(0,1,0,entry.AbsolutePosition.y-listFrame.AbsolutePosition.y)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;parentHighlight.Size = UDim2.new(0,size.x-4,0,entry.AbsoluteSize.y)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;dragGhost.Position = UDim2.new(0,dragPos.x+ghostOffset.x,0,dragPos.y+ghostOffset.y)
&#9;&#9;&#9;elseif (clickPos-dragPos).magnitude &gt; 8 then
&#9;&#9;&#9;&#9;dragged = true
&#9;&#9;&#9;&#9;SetZIndex(dragGhost,9)
&#9;&#9;&#9;&#9;dragGhost.IndentFrame.Transparency = 0.25
&#9;&#9;&#9;&#9;dragGhost.IndentFrame.EntryText.TextColor3 = GuiColor.TextSelected
&#9;&#9;&#9;&#9;dragGhost.Position = UDim2.new(0,dragPos.x+ghostOffset.x,0,dragPos.y+ghostOffset.y)
&#9;&#9;&#9;&#9;dragGhost.Parent = GetScreen(listFrame)
&#9;&#9;&#9;&#9;parentHighlight.Parent = listFrame
&#9;&#9;&#9;end
&#9;&#9;end)

&#9;&#9;function cancelReparentDrag()
&#9;&#9;&#9;mouseDrag.Parent = nil
&#9;&#9;&#9;conDrag:disconnect()
&#9;&#9;&#9;conUp:disconnect()
&#9;&#9;&#9;conUp2:disconnect()
&#9;&#9;&#9;dragGhost:Destroy()
&#9;&#9;&#9;parentHighlight:Destroy()
&#9;&#9;&#9;function cancelReparentDrag()end
&#9;&#9;end

&#9;&#9;local wasSelected = Selection.Selected[object]
&#9;&#9;if not wasSelected and Option.Selectable then
&#9;&#9;&#9;Selection:Set({object})
&#9;&#9;end

&#9;&#9;conUp = mouseDrag.MouseButton1Up:connect(function()
&#9;&#9;&#9;cancelReparentDrag()
&#9;&#9;&#9;if dragged then
&#9;&#9;&#9;&#9;if parentIndex then
&#9;&#9;&#9;&#9;&#9;local parentNode = TreeList[parentIndex + scrollBar.ScrollIndex]
&#9;&#9;&#9;&#9;&#9;if parentNode then
&#9;&#9;&#9;&#9;&#9;&#9;parentNode.Expanded = true

&#9;&#9;&#9;&#9;&#9;&#9;local parentObj = parentNode.Object
&#9;&#9;&#9;&#9;&#9;&#9;local function parent(a,b)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;a.Parent = b
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;if Option.Selectable then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local list = Selection.List
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;pcall(parent,list[i],parentObj)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;pcall(parent,object,parentObj)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;-- do selection click
&#9;&#9;&#9;&#9;if wasSelected and Option.Selectable then
&#9;&#9;&#9;&#9;&#9;Selection:Set({})
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;&#9;conUp2 = mouseDrag.MouseButton2Down:connect(function()
&#9;&#9;&#9;cancelReparentDrag()
&#9;&#9;end)

&#9;&#9;mouseDrag.Parent = GetScreen(listFrame)
&#9;end

&#9;local entryTemplate = Create(&apos;ImageButton&apos;,{
&#9;&#9;Name = &quot;Entry&quot;;
&#9;&#9;Transparency = 1;
&#9;&#9;AutoButtonColor = false;
&#9;&#9;Position = UDim2.new(0,0,0,0);
&#9;&#9;Size = UDim2.new(1,0,0,ENTRY_SIZE);
&#9;&#9;Create(&apos;Frame&apos;,{
&#9;&#9;&#9;Name = &quot;IndentFrame&quot;;
&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;BackgroundColor3 = GuiColor.Selected;
&#9;&#9;&#9;BorderColor3 = GuiColor.BorderSelected;
&#9;&#9;&#9;Position = UDim2.new(0,0,0,0);
&#9;&#9;&#9;Size = UDim2.new(1,0,1,0);
&#9;&#9;&#9;Create(Icon(&apos;ImageButton&apos;,0),{
&#9;&#9;&#9;&#9;Name = &quot;Expand&quot;;
&#9;&#9;&#9;&#9;AutoButtonColor = false;
&#9;&#9;&#9;&#9;Position = UDim2.new(0,-GUI_SIZE,0.5,-GUI_SIZE/2);
&#9;&#9;&#9;&#9;Size = UDim2.new(0,GUI_SIZE,0,GUI_SIZE);
&#9;&#9;&#9;});
&#9;&#9;&#9;Create(Icon(nil,0),{
&#9;&#9;&#9;&#9;Name = &quot;ExplorerIcon&quot;;
&#9;&#9;&#9;&#9;Position = UDim2.new(0,2+ENTRY_PADDING,0.5,-GUI_SIZE/2);
&#9;&#9;&#9;&#9;Size = UDim2.new(0,GUI_SIZE,0,GUI_SIZE);
&#9;&#9;&#9;});
&#9;&#9;&#9;Create(&apos;TextLabel&apos;,{
&#9;&#9;&#9;&#9;Name = &quot;EntryText&quot;;
&#9;&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;&#9;TextColor3 = GuiColor.Text;
&#9;&#9;&#9;&#9;TextXAlignment = &apos;Left&apos;;
&#9;&#9;&#9;&#9;TextYAlignment = &apos;Center&apos;;
&#9;&#9;&#9;&#9;Font = FONT;
&#9;&#9;&#9;&#9;FontSize = FONT_SIZE;
&#9;&#9;&#9;&#9;Text = &quot;&quot;;
&#9;&#9;&#9;&#9;Position = UDim2.new(0,2+ENTRY_SIZE+4,0,0);
&#9;&#9;&#9;&#9;Size = UDim2.new(1,-2,1,0);
&#9;&#9;&#9;});
&#9;&#9;});
&#9;})

&#9;function scrollBar.UpdateCallback(self)
&#9;&#9;for i = 1,self.VisibleSpace do
&#9;&#9;&#9;local node = TreeList[i + self.ScrollIndex]
&#9;&#9;&#9;if node then
&#9;&#9;&#9;&#9;local entry = listEntries[i]
&#9;&#9;&#9;&#9;if not entry then
&#9;&#9;&#9;&#9;&#9;entry = Create(entryTemplate:Clone(),{
&#9;&#9;&#9;&#9;&#9;&#9;Position = UDim2.new(0,2,0,ENTRY_BOUND*(i-1)+2);
&#9;&#9;&#9;&#9;&#9;&#9;Size = UDim2.new(0,nodeWidth,0,ENTRY_SIZE);
&#9;&#9;&#9;&#9;&#9;&#9;ZIndex = listFrame.ZIndex;
&#9;&#9;&#9;&#9;&#9;})
&#9;&#9;&#9;&#9;&#9;listEntries[i] = entry

&#9;&#9;&#9;&#9;&#9;local expand = entry.IndentFrame.Expand
&#9;&#9;&#9;&#9;&#9;&#9;expand.MouseEnter:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;local node = TreeList[i + self.ScrollIndex]
&#9;&#9;&#9;&#9;&#9;&#9;if #node &gt; 0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if node.Object ~= HiddenEntriesMain then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if node.Expanded then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Icon(expand,NODE_EXPANDED_OVER)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Icon(expand,NODE_COLLAPSED_OVER)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if node.HiddenExpanded then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Icon(expand,NODE_EXPANDED_OVER)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Icon(expand,NODE_COLLAPSED_OVER)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;expand.MouseLeave:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local node = TreeList[i + self.ScrollIndex]
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if node.Object == HiddenEntriesMain then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if node.HiddenExpanded then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Icon(expand,NODE_EXPANDED)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Icon(expand,NODE_COLLAPSED)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if #node &gt; 0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if node.Expanded then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Icon(expand,NODE_EXPANDED)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Icon(expand,NODE_COLLAPSED)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;local function radd(o,refresh,parent)&#9;
&#9;&#9;&#9;&#9;&#9;&#9;addObject(o,refresh,parent)&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;local s,children = pcall(function() return o:GetChildren() end, o)
&#9;&#9;&#9;&#9;&#9;&#9;if s then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i = 1,#children do&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;radd(children[i],refresh,o)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;expand.MouseButton1Down:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;local node = TreeList[i + self.ScrollIndex]
&#9;&#9;&#9;&#9;&#9;&#9;if #node &gt; 0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if node.Object ~= HiddenEntriesMain then&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;node.Expanded = not node.Expanded
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if not MuteHiddenItems then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;NodeLookup[HiddenGame] = {
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Object = HiddenGame;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Parent = nil;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Index = 0;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Expanded = true;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;}
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i,v in pairs(game:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if not childrenGame[v] then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;radd(v, true, HiddenGame)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;MuteHiddenItems = not MuteHiddenItems
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;node.HiddenExpanded = not node.HiddenExpanded
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if node.Object == explorerPanel.Parent and node.Expanded then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;CreateCaution(&quot;Warning&quot;, &quot;Modifying the contents of this Instance could cause erratic or unstable behavior. Proceed with caution.&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;-- use raw update so the list updates instantly
&#9;&#9;&#9;&#9;&#9;&#9;&#9;rawUpdateList()
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;&#9;entry.MouseButton1Down:connect(function(x,y)
&#9;&#9;&#9;&#9;&#9;&#9;local node = TreeList[i + self.ScrollIndex]
&#9;&#9;&#9;&#9;&#9;&#9;DestroyRightClick()
&#9;&#9;&#9;&#9;&#9;&#9;if GetAwaitRemote:Invoke() then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;bindSetAwaiting:Fire(node.Object)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if node.Object == HiddenEntriesMain then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if not HoldingShift then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;lastSelectedNode = i + self.ScrollIndex
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if HoldingShift and not filteringWorkspace() then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if lastSelectedNode then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if i + self.ScrollIndex - lastSelectedNode &gt; 0 then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:StopUpdates()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i2 = 1, i + self.ScrollIndex - lastSelectedNode do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local newNode = TreeList[lastSelectedNode + i2]
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if newNode then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:Add(newNode.Object)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:ResumeUpdates()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:StopUpdates()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;for i2 = i + self.ScrollIndex - lastSelectedNode, 1 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local newNode = TreeList[lastSelectedNode + i2]
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if newNode then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:Add(newNode.Object)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:ResumeUpdates()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if HoldingCtrl then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Selection.Selected[node.Object] then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:Remove(node.Object)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:Add(node.Object)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;if Option.Modifiable then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local pos = Vector2.new(x,y)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;dragReparent(node.Object,entry:Clone(),pos,entry.AbsolutePosition-pos)
&#9;&#9;&#9;&#9;&#9;&#9;elseif Option.Selectable then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if Selection.Selected[node.Object] then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:Set({})
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:Set({node.Object})
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;dragSelect(i+self.ScrollIndex,true,&apos;MouseButton1Up&apos;)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;&#9;entry.MouseButton2Down:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;if not Option.Selectable then return end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;DestroyRightClick()
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;curSelect = entry
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;local node = TreeList[i + self.ScrollIndex]
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if node.Object == HiddenEntriesMain then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if GetAwaitRemote:Invoke() then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;bindSetAwaiting:Fire(node.Object)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if not Selection.Selected[node.Object] then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;Selection:Set({node.Object})
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;entry.MouseButton2Up:connect(function()
&#9;&#9;&#9;&#9;&#9;&#9;if not Option.Selectable then return end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;local node = TreeList[i + self.ScrollIndex]
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if node.Object == HiddenEntriesMain then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;return
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;if checkMouseInGui(curSelect) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;rightClickMenu(node.Object)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;&#9;entry.Parent = listFrame
&#9;&#9;&#9;&#9;end

&#9;&#9;&#9;&#9;entry.Visible = true

&#9;&#9;&#9;&#9;local object = node.Object

&#9;&#9;&#9;&#9;-- update expand icon
&#9;&#9;&#9;&#9;if node.Object ~= HiddenEntriesMain then
&#9;&#9;&#9;&#9;&#9;if #node == 0 then
&#9;&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.Expand.Visible = false
&#9;&#9;&#9;&#9;&#9;elseif node.Expanded then
&#9;&#9;&#9;&#9;&#9;&#9;Icon(entry.IndentFrame.Expand,NODE_EXPANDED)
&#9;&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.Expand.Visible = true
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;Icon(entry.IndentFrame.Expand,NODE_COLLAPSED)
&#9;&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.Expand.Visible = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;if node.HiddenExpanded then
&#9;&#9;&#9;&#9;&#9;&#9;Icon(entry.IndentFrame.Expand,NODE_EXPANDED)
&#9;&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.Expand.Visible = true
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;Icon(entry.IndentFrame.Expand,NODE_COLLAPSED)
&#9;&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.Expand.Visible = true
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;-- update explorer icon
&#9;&#9;&#9;&#9;if object ~= HiddenEntriesMain then
&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.EntryText.Position = UDim2.new(0,2+ENTRY_SIZE+4,0,0);
&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.ExplorerIcon.Visible = true
&#9;&#9;&#9;&#9;&#9;Icon(entry.IndentFrame.ExplorerIcon,ExplorerIndex[object.ClassName] or 0)
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.EntryText.Position = UDim2.new(0,0,0,0);
&#9;&#9;&#9;&#9;&#9;entry.IndentFrame.ExplorerIcon.Visible = false
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;-- update indentation
&#9;&#9;&#9;&#9;local w = (node.Depth)*(2+ENTRY_PADDING+GUI_SIZE)
&#9;&#9;&#9;&#9;entry.IndentFrame.Position = UDim2.new(0,w,0,0)
&#9;&#9;&#9;&#9;entry.IndentFrame.Size = UDim2.new(1,-w,1,0)

&#9;&#9;&#9;&#9;-- update hidden entries name
&#9;&#9;&#9;&#9;NameHiddenEntries()
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;-- update name change detection
&#9;&#9;&#9;&#9;if nameConnLookup[entry] then
&#9;&#9;&#9;&#9;&#9;nameConnLookup[entry]:disconnect()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;local text = entry.IndentFrame.EntryText
&#9;&#9;&#9;&#9;text.Text = object.Name
&#9;&#9;&#9;&#9;nameConnLookup[entry] = node.Object.Changed:connect(function(p)
&#9;&#9;&#9;&#9;&#9;if p == &apos;Name&apos; then
&#9;&#9;&#9;&#9;&#9;&#9;text.Text = object.Name
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end)

&#9;&#9;&#9;&#9;-- update selection
&#9;&#9;&#9;&#9;entry.IndentFrame.Transparency = node.Selected and 0 or 1
&#9;&#9;&#9;&#9;text.TextColor3 = GuiColor[node.Selected and &apos;TextSelected&apos; or &apos;Text&apos;]

&#9;&#9;&#9;&#9;entry.Size = UDim2.new(0,nodeWidth,0,ENTRY_SIZE)
&#9;&#9;&#9;elseif listEntries[i] then
&#9;&#9;&#9;&#9;listEntries[i].Visible = false
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for i = self.VisibleSpace+1,self.TotalSpace do
&#9;&#9;&#9;local entry = listEntries[i]
&#9;&#9;&#9;if entry then
&#9;&#9;&#9;&#9;listEntries[i] = nil
&#9;&#9;&#9;&#9;entry:Destroy()
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;function scrollBarH.UpdateCallback(self)
&#9;&#9;for i = 1,scrollBar.VisibleSpace do
&#9;&#9;&#9;local node = TreeList[i + scrollBar.ScrollIndex]
&#9;&#9;&#9;if node then
&#9;&#9;&#9;&#9;local entry = listEntries[i]
&#9;&#9;&#9;&#9;if entry then
&#9;&#9;&#9;&#9;&#9;entry.Position = UDim2.new(0,2 - scrollBarH.ScrollIndex,0,ENTRY_BOUND*(i-1)+2)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end

&#9;Connect(listFrame.Changed,function(p)
&#9;&#9;if p == &apos;AbsoluteSize&apos; then
&#9;&#9;&#9;rawUpdateSize()
&#9;&#9;end
&#9;end)

&#9;local wheelAmount = 6
&#9;explorerPanel.MouseWheelForward:connect(function()
&#9;&#9;if scrollBar.VisibleSpace - 1 &gt; wheelAmount then
&#9;&#9;&#9;scrollBar:ScrollTo(scrollBar.ScrollIndex - wheelAmount)
&#9;&#9;else
&#9;&#9;&#9;scrollBar:ScrollTo(scrollBar.ScrollIndex - scrollBar.VisibleSpace)
&#9;&#9;end
&#9;end)
&#9;explorerPanel.MouseWheelBackward:connect(function()
&#9;&#9;if scrollBar.VisibleSpace - 1 &gt; wheelAmount then
&#9;&#9;&#9;scrollBar:ScrollTo(scrollBar.ScrollIndex + wheelAmount)
&#9;&#9;else
&#9;&#9;&#9;scrollBar:ScrollTo(scrollBar.ScrollIndex + scrollBar.VisibleSpace)
&#9;&#9;end
&#9;end)
end

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
---- Object detection

-- Inserts `v` into `t` at `i`. Also sets `Index` field in `v`.
local function insert(t,i,v)
&#9;for n = #t,i,-1 do
&#9;&#9;local v = t[n]
&#9;&#9;v.Index = n+1
&#9;&#9;t[n+1] = v
&#9;end
&#9;v.Index = i
&#9;t[i] = v
end

-- Removes `i` from `t`. Also sets `Index` field in removed value.
local function remove(t,i)
&#9;local v = t[i]
&#9;for n = i+1,#t do
&#9;&#9;local v = t[n]
&#9;&#9;v.Index = n-1
&#9;&#9;t[n-1] = v
&#9;end
&#9;t[#t] = nil
&#9;v.Index = 0
&#9;return v
end

-- Returns how deep `o` is in the tree.
local function depth(o)
&#9;local d = -1
&#9;while o do
&#9;&#9;o = o.Parent
&#9;&#9;d = d + 1
&#9;end
&#9;return d
end


local connLookup = {}

-- Returns whether a node would be present in the tree list
local function nodeIsVisible(node)
&#9;local visible = true
&#9;node = node.Parent
&#9;while node and visible do
&#9;&#9;visible = visible and node.Expanded
&#9;&#9;node = node.Parent
&#9;end
&#9;return visible
end

-- Removes an object&apos;s tree node. Called when the object stops existing in the
-- game tree.
removeObject = function(object)
&#9;local objectNode = NodeLookup[object]
&#9;if not objectNode then
&#9;&#9;return
&#9;end

&#9;local visible = nodeIsVisible(objectNode)

&#9;Selection:Remove(object,true)

&#9;local parent = objectNode.Parent
&#9;remove(parent,objectNode.Index)
&#9;NodeLookup[object] = nil
&#9;connLookup[object]:disconnect()
&#9;connLookup[object] = nil

&#9;if visible then
&#9;&#9;updateList()
&#9;elseif nodeIsVisible(parent) then
&#9;&#9;updateScroll()
&#9;end
end

-- Moves a tree node to a new parent. Called when an existing object&apos;s parent
-- changes.
local function moveObject(object,parent)
&#9;local objectNode = NodeLookup[object]
&#9;if not objectNode then
&#9;&#9;return
&#9;end

&#9;local parentNode = NodeLookup[parent]
&#9;if not parentNode then
&#9;&#9;return
&#9;end

&#9;local visible = nodeIsVisible(objectNode)

&#9;remove(objectNode.Parent,objectNode.Index)
&#9;objectNode.Parent = parentNode

&#9;objectNode.Depth = depth(object)
&#9;local function r(node,d)
&#9;&#9;for i = 1,#node do
&#9;&#9;&#9;node[i].Depth = d
&#9;&#9;&#9;r(node[i],d+1)
&#9;&#9;end
&#9;end
&#9;r(objectNode,objectNode.Depth+1)

&#9;insert(parentNode,#parentNode+1,objectNode)

&#9;if visible or nodeIsVisible(objectNode) then
&#9;&#9;updateList()
&#9;elseif nodeIsVisible(objectNode.Parent) then
&#9;&#9;updateScroll()
&#9;end
end

-- ScriptContext[&apos;/Libraries/LibraryRegistration/LibraryRegistration&apos;]
-- This RobloxLocked object lets me index its properties for some reason

local function check(object)
&#9;return object.AncestryChanged
end

-- Creates a new tree node from an object. Called when an object starts
-- existing in the game tree.
addObject = function(object,noupdate,parent)
&#9;if script then
&#9;&#9;-- protect against naughty RobloxLocked objects
&#9;&#9;local s = pcall(check,object)
&#9;&#9;if not s then
&#9;&#9;&#9;return
&#9;&#9;end
&#9;end

&#9;local parentNode 
&#9;
&#9;if parent then
&#9;&#9;parentNode = NodeLookup[parent]
&#9;else
&#9;&#9;parentNode = NodeLookup[object.Parent]&#9;
&#9;end
&#9;
&#9;if not parentNode then
&#9;&#9;return
&#9;end

&#9;local objectNode = {
&#9;&#9;Object = object;
&#9;&#9;Parent = parentNode;
&#9;&#9;Index = 0;
&#9;&#9;Expanded = false;
&#9;&#9;Selected = false;
&#9;&#9;Depth = depth(object);
&#9;}

&#9;connLookup[object] = Connect(object.AncestryChanged,function(c,p)
&#9;&#9;if c == object then
&#9;&#9;&#9;if p == nil then
&#9;&#9;&#9;&#9;removeObject(c)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;moveObject(c,p)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end)

&#9;NodeLookup[object] = objectNode
&#9;insert(parentNode,#parentNode+1,objectNode)

&#9;if not noupdate then
&#9;&#9;if nodeIsVisible(objectNode) then
&#9;&#9;&#9;updateList()
&#9;&#9;elseif nodeIsVisible(objectNode.Parent) then
&#9;&#9;&#9;updateScroll()
&#9;&#9;end
&#9;end
end

local function makeObject(obj,par)
&#9;local newObject = Instance.new(obj.ClassName)
&#9;for i,v in pairs(obj.Properties) do
&#9;&#9;ypcall(function()
&#9;&#9;&#9;local newProp
&#9;&#9;&#9;newProp = ToPropValue(v.Value,v.Type)
&#9;&#9;&#9;newObject[v.Name] = newProp
&#9;&#9;end)
&#9;end
&#9;newObject.Parent = par
end

local function writeObject(obj)
&#9;local newObject = {ClassName = obj.ClassName, Properties = {}}
&#9;for i,v in pairs(RbxApi.GetProperties(obj.className)) do
&#9;&#9;if v[&quot;Name&quot;] ~= &quot;Parent&quot; then
&#9;&#9;&#9;print(&quot;thispassed&quot;)
&#9;&#9;&#9;table.insert(newObject.Properties,{Name = v[&quot;Name&quot;], Type = v[&quot;ValueType&quot;], Value = tostring(obj[v[&quot;Name&quot;]])})
&#9;&#9;end
&#9;end
&#9;return newObject
end

local function buildDexStorage()
&#9;local localDexStorage
&#9;
&#9;local success,err = ypcall(function()
&#9;&#9;localDexStorage = game:GetObjects(&quot;rbxasset://DexStorage.rbxm&quot;)[1]
&#9;end)
&#9;
&#9;if success and localDexStorage then
&#9;&#9;for i,v in pairs(localDexStorage:GetChildren()) do
&#9;&#9;&#9;ypcall(function()
&#9;&#9;&#9;&#9;v.Parent = DexStorageMain
&#9;&#9;&#9;end)
&#9;&#9;end
&#9;end
&#9;
&#9;updateDexStorageListeners()
&#9;--[[
&#9;local localDexStorage = readfile(getelysianpath()..&quot;DexStorage.txt&quot;)--game:GetService(&quot;CookiesService&quot;):GetCookieValue(&quot;DexStorage&quot;)
&#9;--local success,err = pcall(function()
&#9;&#9;if localDexStorage then
&#9;&#9;&#9;local objTable = game:GetService(&quot;HttpService&quot;):JSONDecode(localDexStorage)
&#9;&#9;&#9;for i,v in pairs(objTable) do
&#9;&#9;&#9;&#9;makeObject(v,DexStorageMain)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;--end)
&#9;--]]
end

local dexStorageDebounce = false
local dexStorageListeners = {}

local function updateDexStorage()
&#9;if dexStorageDebounce then return end
&#9;dexStorageDebounce = true&#9;
&#9;
&#9;wait()
&#9;
&#9;pcall(function()
&#9;&#9;saveinstance(&quot;content//DexStorage.rbxm&quot;,DexStorageMain)
&#9;end)
&#9;
&#9;updateDexStorageListeners()
&#9;
&#9;dexStorageDebounce = false
&#9;--[[
&#9;local success,err = ypcall(function()
&#9;&#9;local objs = {}
&#9;&#9;for i,v in pairs(DexStorageMain:GetChildren()) do
&#9;&#9;&#9;table.insert(objs,writeObject(v))
&#9;&#9;end
&#9;&#9;writefile(getelysianpath()..&quot;DexStorage.txt&quot;,game:GetService(&quot;HttpService&quot;):JSONEncode(objs))
&#9;&#9;--game:GetService(&quot;CookiesService&quot;):SetCookieValue(&quot;DexStorage&quot;,game:GetService(&quot;HttpService&quot;):JSONEncode(objs))
&#9;end)
&#9;if err then
&#9;&#9;CreateCaution(&quot;DexStorage Save Fail!&quot;,&quot;DexStorage broke! If you see this message, report to Raspberry Pi!&quot;)
&#9;end
&#9;print(&quot;hi&quot;)
&#9;--]]
end

function updateDexStorageListeners()
&#9;for i,v in pairs(dexStorageListeners) do
&#9;&#9;v:Disconnect()
&#9;end
&#9;dexStorageListeners = {}
&#9;for i,v in pairs(DexStorageMain:GetChildren()) do
&#9;&#9;pcall(function()
&#9;&#9;&#9;local ev = v.Changed:connect(updateDexStorage)
&#9;&#9;&#9;table.insert(dexStorageListeners,ev)
&#9;&#9;end)
&#9;end
end

do
&#9;local function registerNodeLookup4(o)
&#9;&#9;NodeLookup[o] = {
&#9;&#9;&#9;Object = o;
&#9;&#9;&#9;Parent = nil;
&#9;&#9;&#9;Index = 0;
&#9;&#9;&#9;Expanded = true;
&#9;&#9;}
&#9;end
&#9;
&#9;registerNodeLookup4(game)
&#9;
&#9;NodeLookup[DexOutput] = {
&#9;&#9;Object = DexOutput;
&#9;&#9;Parent = nil;
&#9;&#9;Index = 0;
&#9;&#9;Expanded = true;
&#9;}
&#9;
&#9;if DexStorageEnabled then
&#9;&#9;NodeLookup[DexStorage] = {
&#9;&#9;&#9;Object = DexStorage;
&#9;&#9;&#9;Parent = nil;
&#9;&#9;&#9;Index = 0;
&#9;&#9;&#9;Expanded = true;
&#9;&#9;}
&#9;end
&#9;
&#9;if NilStorageEnabled then
&#9;&#9;NodeLookup[NilStorage] = {
&#9;&#9;&#9;Object = NilStorage;
&#9;&#9;&#9;Parent = nil;
&#9;&#9;&#9;Index = 0;
&#9;&#9;&#9;Expanded = true;
&#9;&#9;}
&#9;end

&#9;registerNodeLookup4(HiddenEntries)&#9;
&#9;registerNodeLookup4(HiddenGame)&#9;
&#9;
&#9;Connect(game.DescendantAdded,addObject)
&#9;Connect(game.DescendantRemoving,removeObject)
&#9;
&#9;Connect(DexOutput.DescendantAdded,addObject)
&#9;Connect(DexOutput.DescendantRemoving,removeObject)
&#9;
&#9;if DexStorageEnabled then
&#9;&#9;--[[
&#9;&#9;if readfile(getelysianpath()..&quot;DexStorage.txt&quot;) == nil then
&#9;&#9;&#9;writefile(getelysianpath()..&quot;DexStorage.txt&quot;,&quot;&quot;)
&#9;&#9;end
&#9;&#9;--]]
&#9;&#9;
&#9;&#9;buildDexStorage()
&#9;
&#9;&#9;Connect(DexStorage.DescendantAdded,addObject)
&#9;&#9;Connect(DexStorage.DescendantRemoving,removeObject)
&#9;
&#9;&#9;Connect(DexStorage.DescendantAdded,updateDexStorage)
&#9;&#9;Connect(DexStorage.DescendantRemoving,updateDexStorage)
&#9;end
&#9;
&#9;if NilStorageEnabled then
&#9;&#9;Connect(NilStorage.DescendantAdded,addObject)
&#9;&#9;Connect(NilStorage.DescendantRemoving,removeObject)&#9;&#9;
&#9;&#9;
&#9;&#9;local currentTable = get_nil_instances()&#9;
&#9;&#9;
&#9;&#9;spawn(function()
&#9;&#9;&#9;while wait() do
&#9;&#9;&#9;&#9;if #currentTable ~= #get_nil_instances() then
&#9;&#9;&#9;&#9;&#9;currentTable = get_nil_instances()
&#9;&#9;&#9;&#9;&#9;--NilStorageMain:ClearAllChildren()
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(get_nil_instances()) do
&#9;&#9;&#9;&#9;&#9;&#9;if v ~= NilStorage and v ~= DexStorage then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;v.Parent = NilStorageMain
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--[[
&#9;&#9;&#9;&#9;&#9;&#9;&#9;local newNil = v
&#9;&#9;&#9;&#9;&#9;&#9;&#9;newNil.Archivable = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;newNil:Clone().Parent = NilStorageMain
&#9;&#9;&#9;&#9;&#9;&#9;&#9;--]]
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end)
&#9;end

&#9;local function get(o)
&#9;&#9;return o:GetChildren()
&#9;end
&#9;&#9;
&#9;local function r(o)
&#9;&#9;if o == game and MuteHiddenItems then
&#9;&#9;&#9;for i, v in pairs(gameChildren) do&#9;&#9;&#9;
&#9;&#9;&#9;&#9;addObject(v,true)
&#9;&#9;&#9;&#9;r(v)
&#9;&#9;&#9;end
&#9;&#9;&#9;return&#9;
&#9;&#9;end
&#9;&#9;
&#9;&#9;local s,children = pcall(get,o)
&#9;&#9;if s then
&#9;&#9;&#9;for i = 1,#children do
&#9;&#9;&#9;&#9;addObject(children[i],true)
&#9;&#9;&#9;&#9;r(children[i])
&#9;&#9;&#9;end
&#9;&#9;end
&#9;end
&#9;
&#9;r(game)&#9;
&#9;r(DexOutput)
&#9;if DexStorageEnabled then
&#9;&#9;r(DexStorage)
&#9;end
&#9;if NilStorageEnabled then
&#9;&#9;r(NilStorage)
&#9;end
&#9;
&#9;r(HiddenEntries)

&#9;scrollBar.VisibleSpace = math.ceil(listFrame.AbsoluteSize.y/ENTRY_BOUND)
&#9;updateList()
end

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
---- Actions

local actionButtons do
&#9;actionButtons = {}

&#9;local totalActions = 1
&#9;local currentActions = totalActions
&#9;local function makeButton(icon,over,name,vis,cond)
&#9;&#9;local buttonEnabled = false
&#9;&#9;
&#9;&#9;local button = Create(Icon(&apos;ImageButton&apos;,icon),{
&#9;&#9;&#9;Name = name .. &quot;Button&quot;;
&#9;&#9;&#9;Visible = Option.Modifiable and Option.Selectable;
&#9;&#9;&#9;Position = UDim2.new(1, -4 + -(GUI_SIZE+2)*currentActions+2,0.25,-GUI_SIZE/2);
&#9;&#9;&#9;Size = UDim2.new(0,GUI_SIZE,0,GUI_SIZE);
&#9;&#9;&#9;Parent = headerFrame;
&#9;&#9;})

&#9;&#9;local tipText = Create(&apos;TextLabel&apos;,{
&#9;&#9;&#9;Name = name .. &quot;Text&quot;;
&#9;&#9;&#9;Text = name;
&#9;&#9;&#9;Visible = false;
&#9;&#9;&#9;BackgroundTransparency = 1;
&#9;&#9;&#9;TextXAlignment = &apos;Right&apos;;
&#9;&#9;&#9;Font = FONT;
&#9;&#9;&#9;FontSize = FONT_SIZE;
&#9;&#9;&#9;Position = UDim2.new(0,0,0,0);
&#9;&#9;&#9;Size = UDim2.new(1,-(GUI_SIZE+2)*totalActions,1,0);
&#9;&#9;&#9;Parent = headerFrame;
&#9;&#9;})
&#9;&#9;
&#9;&#9;button.MouseEnter:connect(function()
&#9;&#9;&#9;if buttonEnabled then
&#9;&#9;&#9;&#9;button.BackgroundTransparency = 0.9
&#9;&#9;&#9;end
&#9;&#9;&#9;--Icon(button,over)
&#9;&#9;&#9;--tipText.Visible = true
&#9;&#9;end)
&#9;&#9;button.MouseLeave:connect(function()
&#9;&#9;&#9;button.BackgroundTransparency = 1
&#9;&#9;&#9;--Icon(button,icon)
&#9;&#9;&#9;--tipText.Visible = false
&#9;&#9;end)

&#9;&#9;currentActions = currentActions + 1
&#9;&#9;actionButtons[#actionButtons+1] = {Obj = button,Cond = cond}
&#9;&#9;QuickButtons[#actionButtons+1] = {Obj = button,Cond = cond, Toggle = function(on)
&#9;&#9;&#9;if on then
&#9;&#9;&#9;&#9;buttonEnabled = true
&#9;&#9;&#9;&#9;Icon(button,over)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;buttonEnabled = false
&#9;&#9;&#9;&#9;Icon(button,icon)
&#9;&#9;&#9;end
&#9;&#9;end}
&#9;&#9;return button
&#9;end

&#9;--local clipboard = {}
&#9;local function delete(o)
&#9;&#9;o.Parent = nil
&#9;end
&#9;&#9;

&#9;-- DELETE
&#9;makeButton(ACTION_DELETE,ACTION_DELETE_OVER,&quot;Delete&quot;,true,function() return #Selection:Get() &gt; 0 end).MouseButton1Click:connect(function()
&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;local list = Selection:Get()
&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;pcall(delete,list[i])
&#9;&#9;end
&#9;&#9;Selection:Set({})
&#9;end)
&#9;
&#9;-- PASTE
&#9;makeButton(ACTION_PASTE,ACTION_PASTE_OVER,&quot;Paste&quot;,true,function() return #Selection:Get() &gt; 0 and #clipboard &gt; 0 end).MouseButton1Click:connect(function()
&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;local parent = Selection.List[1] or workspace
&#9;&#9;for i = 1,#clipboard do
&#9;&#9;&#9;clipboard[i]:Clone().Parent = parent
&#9;&#9;end
&#9;end)
&#9;
&#9;-- COPY
&#9;makeButton(ACTION_COPY,ACTION_COPY_OVER,&quot;Copy&quot;,true,function() return #Selection:Get() &gt; 0 end).MouseButton1Click:connect(function()
&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;clipboard = {}
&#9;&#9;local list = Selection.List
&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;table.insert(clipboard,list[i]:Clone())
&#9;&#9;end
&#9;&#9;updateActions()
&#9;end)
&#9;
&#9;-- CUT
&#9;makeButton(ACTION_CUT,ACTION_CUT_OVER,&quot;Cut&quot;,true,function() return #Selection:Get() &gt; 0 end).MouseButton1Click:connect(function()
&#9;&#9;if not Option.Modifiable then return end
&#9;&#9;clipboard = {}
&#9;&#9;local list = Selection.List
&#9;&#9;local cut = {}
&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;local obj = list[i]:Clone()
&#9;&#9;&#9;if obj then
&#9;&#9;&#9;&#9;table.insert(clipboard,obj)
&#9;&#9;&#9;&#9;table.insert(cut,list[i])
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;for i = 1,#cut do
&#9;&#9;&#9;pcall(delete,cut[i])
&#9;&#9;end
&#9;&#9;updateActions()
&#9;end)
&#9;
&#9;-- FREEZE


&#9;-- SORT
&#9;-- local actionSort = makeButton(ACTION_SORT,ACTION_SORT_OVER,&quot;Sort&quot;)
end

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
---- Option Bindables

do
&#9;local optionCallback = {
&#9;&#9;Modifiable = function(value)
&#9;&#9;&#9;for i = 1,#actionButtons do
&#9;&#9;&#9;&#9;actionButtons[i].Obj.Visible = value and Option.Selectable
&#9;&#9;&#9;end
&#9;&#9;&#9;cancelReparentDrag()
&#9;&#9;end;
&#9;&#9;Selectable = function(value)
&#9;&#9;&#9;for i = 1,#actionButtons do
&#9;&#9;&#9;&#9;actionButtons[i].Obj.Visible = value and Option.Modifiable
&#9;&#9;&#9;end
&#9;&#9;&#9;cancelSelectDrag()
&#9;&#9;&#9;Selection:Set({})
&#9;&#9;end;
&#9;}

&#9;local bindSetOption = explorerPanel:FindFirstChild(&quot;SetOption&quot;)
&#9;if not bindSetOption then
&#9;&#9;bindSetOption = Create(&apos;BindableFunction&apos;,{Name = &quot;SetOption&quot;})
&#9;&#9;bindSetOption.Parent = explorerPanel
&#9;end

&#9;bindSetOption.OnInvoke = function(optionName,value)
&#9;&#9;if optionCallback[optionName] then
&#9;&#9;&#9;Option[optionName] = value
&#9;&#9;&#9;optionCallback[optionName](value)
&#9;&#9;end
&#9;end

&#9;local bindGetOption = explorerPanel:FindFirstChild(&quot;GetOption&quot;)
&#9;if not bindGetOption then
&#9;&#9;bindGetOption = Create(&apos;BindableFunction&apos;,{Name = &quot;GetOption&quot;})
&#9;&#9;bindGetOption.Parent = explorerPanel
&#9;end

&#9;bindGetOption.OnInvoke = function(optionName)
&#9;&#9;if optionName then
&#9;&#9;&#9;return Option[optionName]
&#9;&#9;else
&#9;&#9;&#9;local options = {}
&#9;&#9;&#9;for k,v in pairs(Option) do
&#9;&#9;&#9;&#9;options[k] = v
&#9;&#9;&#9;end
&#9;&#9;&#9;return options
&#9;&#9;end
&#9;end
end

function SelectionVar()
&#9;return Selection
end

Input.InputBegan:connect(function(key)
&#9;if key.KeyCode == Enum.KeyCode.LeftControl then
&#9;&#9;HoldingCtrl = true
&#9;end
&#9;if key.KeyCode == Enum.KeyCode.LeftShift then
&#9;&#9;HoldingShift = true
&#9;end
end)

Input.InputEnded:connect(function(key)
&#9;if key.KeyCode == Enum.KeyCode.LeftControl then
&#9;&#9;HoldingCtrl = false
&#9;end
&#9;if key.KeyCode == Enum.KeyCode.LeftShift then
&#9;&#9;HoldingShift = false
&#9;end
end)

while RbxApi == nil do
&#9;RbxApi = GetApiRemote:Invoke()
&#9;wait()
end

explorerFilter.Changed:connect(function(prop)
&#9;if prop == &quot;Text&quot; then&#9;&#9;
&#9;&#9;Selection.Finding = true
&#9;&#9;rawUpdateList()
&#9;end
end)

explorerFilter.FocusLost:connect(function()&#9;
&#9;if explorerFilter.Text == &quot;&quot; then
&#9;&#9;if Selection.Found[1] then
&#9;&#9;&#9;scrollBar:ScrollTo(NodeLookup[Selection.Found[1]].Index)
&#9;&#9;end
&#9;&#9;
&#9;&#9;Selection.Finding = false
&#9;&#9;Selection.Found = {}
&#9;end
end)

CurrentInsertObjectWindow = CreateInsertObjectMenu(
&#9;GetClasses(),
&#9;&quot;&quot;,
&#9;false,
&#9;function(option)
&#9;&#9;CurrentInsertObjectWindow.Visible = false
&#9;&#9;local list = SelectionVar():Get()
&#9;&#9;for i = 1,#list do
&#9;&#9;&#9;pcall(function() Instance.new(option,list[i]) end)
&#9;&#9;end
&#9;&#9;DestroyRightClick()
&#9;end
)</ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Frame" referent="RBXC7D55D71642F49929768A2039B52862F">
			<Properties>
				<bool name="Active">false</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.168627456</R>
					<G>0.168627456</G>
					<B>0.168627456</B>
				</Color3>
				<float name="BackgroundTransparency">1</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">SideMenu</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>-330</XO>
					<YS>0</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>30</XO>
					<YS>0</YS>
					<YO>180</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">false</bool>
				<int name="ZIndex">2</int>
			</Properties>
			<Item class="TextButton" referent="RBXB6D409CB828045A6AF1B3AE6C54CABE3">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoButtonColor">true</bool>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<bool name="Modal">false</bool>
					<string name="Name">Toggle</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>60</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<bool name="Selected">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">&gt;</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">24</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.800000012</float>
					<float name="TextTransparency">1</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="TextLabel" referent="RBXD68747B1435B49DB9485CA5CFFADD8DC">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>20</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">DEX</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="TextLabel" referent="RBX9FA2717C841147658651DB8F28A542AF">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Version</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>15</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>20</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">v4</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">12</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="ImageLabel" referent="RBXF79F83CA12614B3AB51DA5C3C12989B0">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<Content name="Image"><url>rbxassetid://1513966937</url></Content>
					<Color3 name="ImageColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<Vector2 name="ImageRectOffset">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<Vector2 name="ImageRectSize">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<float name="ImageTransparency">0.100000001</float>
					<int name="LayoutOrder">0</int>
					<string name="Name">Slant</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>90</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">180</float>
					<token name="ScaleType">0</token>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<Rect2D name="SliceCenter">
						<min>
							<X>0</X>
							<Y>0</Y>
						</min>
						<max>
							<X>0</X>
							<Y>0</Y>
						</max>
					</Rect2D>
					<float name="SliceScale">1</float>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UDim2 name="TileSize">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBX1423A7FC4D7846B0A31FC0187368E7F3">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Main</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBX297FBAE5151D4E18B5451A251DB5B78B">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">true</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">SlideOut</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>150</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="Frame" referent="RBX2785043D1E05441AA409B644644B90D5">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.145098045</R>
							<G>0.145098045</G>
							<B>0.164705887</B>
						</Color3>
						<float name="BackgroundTransparency">0.100000001</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<int name="LayoutOrder">0</int>
						<string name="Name">SlideFrame</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>-120</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>30</XO>
							<YS>0</YS>
							<YO>120</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX747C8366E64848A1897A574E7F9F2CAA">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">false</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.156862751</R>
								<G>0.156862751</G>
								<B>0.156862751</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">Explorer</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>90</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>30</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">24</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="ImageLabel" referent="RBXCF2EA5CD3D2841F0BE57BC207E9A8AAF">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">1</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<Content name="Image"><url>rbxassetid://472635937</url></Content>
								<Color3 name="ImageColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<Vector2 name="ImageRectOffset">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<Vector2 name="ImageRectSize">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<float name="ImageTransparency">0</float>
								<int name="LayoutOrder">0</int>
								<string name="Name">Icon</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<token name="ScaleType">0</token>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>20</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<Rect2D name="SliceCenter">
									<min>
										<X>0</X>
										<Y>0</Y>
									</min>
									<max>
										<X>0</X>
										<Y>0</Y>
									</max>
								</Rect2D>
								<float name="SliceScale">1</float>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UDim2 name="TileSize">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Visible">true</bool>
								<int name="ZIndex">2</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBXCE14CD131CCF418E86C6FEB6F131D027">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">false</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.156862751</R>
								<G>0.156862751</G>
								<B>0.156862751</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">SaveMap</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>60</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>30</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">24</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="ImageLabel" referent="RBX706C0AE306F446A180127DC6866C78CD">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">1</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<Content name="Image"><url>rbxassetid://472636337</url></Content>
								<Color3 name="ImageColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<Vector2 name="ImageRectOffset">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<Vector2 name="ImageRectSize">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<float name="ImageTransparency">0</float>
								<int name="LayoutOrder">0</int>
								<string name="Name">Icon</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<token name="ScaleType">0</token>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>20</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<Rect2D name="SliceCenter">
									<min>
										<X>0</X>
										<Y>0</Y>
									</min>
									<max>
										<X>0</X>
										<Y>0</Y>
									</max>
								</Rect2D>
								<float name="SliceScale">1</float>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UDim2 name="TileSize">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Visible">true</bool>
								<int name="ZIndex">2</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX2AF6FBA81BB947DEAA02A9ADC33FC072">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">false</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.156862751</R>
								<G>0.156862751</G>
								<B>0.156862751</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">Settings</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>30</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">24</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="ImageLabel" referent="RBX14DF81880ED84BAFB869D211325C89C0">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">1</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<Content name="Image"><url>rbxassetid://472635774</url></Content>
								<Color3 name="ImageColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<Vector2 name="ImageRectOffset">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<Vector2 name="ImageRectSize">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<float name="ImageTransparency">0</float>
								<int name="LayoutOrder">0</int>
								<string name="Name">Icon</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<token name="ScaleType">0</token>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>20</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<Rect2D name="SliceCenter">
									<min>
										<X>0</X>
										<Y>0</Y>
									</min>
									<max>
										<X>0</X>
										<Y>0</Y>
									</max>
								</Rect2D>
								<float name="SliceScale">1</float>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UDim2 name="TileSize">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Visible">true</bool>
								<int name="ZIndex">2</int>
							</Properties>
						</Item>
					</Item>
					<Item class="TextButton" referent="RBX0D46EF0650054977B7A68874DC8A5A13">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">false</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.156862751</R>
								<G>0.156862751</G>
								<B>0.156862751</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">About</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>30</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">24</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="ImageLabel" referent="RBX2845F3060F264243AE4E73D469389D93">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">1</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<Content name="Image"><url>rbxassetid://476354004</url></Content>
								<Color3 name="ImageColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<Vector2 name="ImageRectOffset">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<Vector2 name="ImageRectSize">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<float name="ImageTransparency">0</float>
								<int name="LayoutOrder">0</int>
								<string name="Name">Icon</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>5</XO>
									<YS>0</YS>
									<YO>5</YO>
								</UDim2>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<token name="ScaleType">0</token>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>20</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<Rect2D name="SliceCenter">
									<min>
										<X>0</X>
										<Y>0</Y>
									</min>
									<max>
										<X>0</X>
										<Y>0</Y>
									</max>
								</Rect2D>
								<float name="SliceScale">1</float>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<UDim2 name="TileSize">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="Visible">true</bool>
								<int name="ZIndex">2</int>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
			<Item class="TextButton" referent="RBX66182EEE2EE948CEA6805D307F763144">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoButtonColor">true</bool>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<bool name="Modal">false</bool>
					<string name="Name">OpenScriptEditor</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<bool name="Selected">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text"></string>
					<Color3 name="TextColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">24</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="ImageLabel" referent="RBX53BCC58BDD254EF893BD9AD9EBC83A26">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<Content name="Image"><url>rbxassetid://475456048</url></Content>
						<Color3 name="ImageColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<Vector2 name="ImageRectOffset">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<Vector2 name="ImageRectSize">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<float name="ImageTransparency">1</float>
						<int name="LayoutOrder">0</int>
						<string name="Name">Icon</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>5</XO>
							<YS>0</YS>
							<YO>5</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<token name="ScaleType">0</token>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>20</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<Rect2D name="SliceCenter">
							<min>
								<X>0</X>
								<Y>0</Y>
							</min>
							<max>
								<X>0</X>
								<Y>0</Y>
							</max>
						</Rect2D>
						<float name="SliceScale">1</float>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UDim2 name="TileSize">
							<XS>1</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="Visible">true</bool>
						<int name="ZIndex">2</int>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Frame" referent="RBXC001EB81A53642CCB1768DAD14868A9B">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.0784313753</R>
					<G>0.0784313753</G>
					<B>0.0784313753</B>
				</Color3>
				<float name="BackgroundTransparency">0</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">true</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">Confirmation</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>0.5</XS>
					<XO>-175</XO>
					<YS>0.5</YS>
					<YO>-75</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>350</XO>
					<YS>0</YS>
					<YO>20</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">false</bool>
				<int name="ZIndex">3</int>
			</Properties>
			<Item class="TextLabel" referent="RBX77CE10D35A044A01B1F0E889041F3084">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.639215708</R>
						<G>0.635294139</G>
						<B>0.647058845</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text"> Confirm</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">3</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBXCA09E56076BD44E3841CF93F7E72899F">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.749019623</R>
						<G>0.749019623</G>
						<B>0.749019623</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">MainWindow</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>150</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
				<Item class="TextButton" referent="RBX35467838B6A641FDBE4BBF3910DF427E">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.345098048</R>
							<G>0.345098048</G>
							<B>0.345098048</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Yes</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.075000003</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>-40</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.400000006</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Yes</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">2</int>
					</Properties>
					<Item class="UICorner" referent="RBXD90BCC510BC245068213283815B45305">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="TextLabel" referent="RBX134F510A269146399A61F7DDE2BF76A7">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.345098048</R>
							<G>0.345098048</G>
							<B>0.345098048</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Desc</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>40</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">The file, FILENAME, already exists. Overwrite?</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">2</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBX77241CFAC85B43FF8ADC9BC30EE6E0C0">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.345098048</R>
							<G>0.345098048</G>
							<B>0.345098048</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">No</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.524999976</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>-40</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.400000006</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">No</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">2</int>
					</Properties>
					<Item class="UICorner" referent="RBXE422AE77B3414D3BA54A796EE21C8E1E">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="UICorner" referent="RBX0A8987D4CB39406097EA32BB3F24860F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<UDim name="CornerRadius">
							<S>0</S>
							<O>10</O>
						</UDim>
						<string name="Name"></string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Frame" referent="RBX5A36531089A84EA9A168F0162B2DDC2F">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.0588235296</R>
					<G>0.0588235296</G>
					<B>0.0784313753</B>
				</Color3>
				<float name="BackgroundTransparency">0</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">true</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">Caution</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>0.5</XS>
					<XO>-175</XO>
					<YS>0.5</YS>
					<YO>-75</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>350</XO>
					<YS>0</YS>
					<YO>20</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">false</bool>
				<int name="ZIndex">5</int>
			</Properties>
			<Item class="TextLabel" referent="RBX188D6EF0DDAA478F93A632CB4083832D">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.639215708</R>
						<G>0.635294139</G>
						<B>0.647058845</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">true</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text"> Caution</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">5</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBXF20A895E79AC42C38C609DEC14EFFAC5">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.749019623</R>
						<G>0.749019623</G>
						<B>0.749019623</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">true</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">MainWindow</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>150</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">4</int>
				</Properties>
				<Item class="TextLabel" referent="RBX7ED8D86792E249238853D69D9AC0700C">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">16</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Desc</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>82</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">The file, FILENAME, already exists. Overwrite?</string>
						<Color3 name="TextColor3">
							<R>0.980392158</R>
							<G>0.980392158</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">1</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">4</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBXA9130B7476524F68AB8458938452506D">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.372549027</R>
							<G>0.372549027</G>
							<B>0.392156869</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">4</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Ok</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.300000012</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>-45</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.400000006</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>25</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Ok</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">4</int>
					</Properties>
					<Item class="UICorner" referent="RBXC4AAC0FB644F41B9B4DE800E64732985">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="UICorner" referent="RBXA6C6A5E43A8B44859A02EE54617526C1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<UDim name="CornerRadius">
							<S>0</S>
							<O>10</O>
						</UDim>
						<string name="Name"></string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Frame" referent="RBX1ABE477661D748A2B6D70E4F9A4EF989">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.0784313753</R>
					<G>0.0784313753</G>
					<B>0.0784313753</B>
				</Color3>
				<float name="BackgroundTransparency">0</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">true</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">CallRemote</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>0.5</XS>
					<XO>-175</XO>
					<YS>0.5</YS>
					<YO>-100</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>350</XO>
					<YS>0</YS>
					<YO>20</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">false</bool>
				<int name="ZIndex">2</int>
			</Properties>
			<Item class="TextLabel" referent="RBXB705A7C88C8D465094AEC4DAD46AB08B">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.639215708</R>
						<G>0.635294139</G>
						<B>0.647058845</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text"> Call Remote</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBXEB80326D08D04CDBB03142EFE789FAC2">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.749019623</R>
						<G>0.749019623</G>
						<B>0.749019623</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">MainWindow</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>200</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBXD3C3D43925824F6C8EF2000A80C37C31">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Desc</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Arguments</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="ScrollingFrame" referent="RBX19EDD6BFCFF94FAB80BCF9A250054008">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticCanvasSize">0</token>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<Content name="BottomImage"><url>rbxasset://textures/blackBkg_square.png</url></Content>
						<Vector2 name="CanvasPosition">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<UDim2 name="CanvasSize">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="ClipsDescendants">true</bool>
						<bool name="Draggable">false</bool>
						<token name="ElasticBehavior">0</token>
						<token name="HorizontalScrollBarInset">0</token>
						<int name="LayoutOrder">0</int>
						<Content name="MidImage"><url>rbxasset://textures/blackBkg_square.png</url></Content>
						<string name="Name">Arguments</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>40</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<Color3 name="ScrollBarImageColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="ScrollBarImageTransparency">0</float>
						<int name="ScrollBarThickness">12</int>
						<token name="ScrollingDirection">2</token>
						<bool name="ScrollingEnabled">true</bool>
						<bool name="Selectable">true</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>80</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TopImage"><url>rbxasset://textures/blackBkg_square.png</url></Content>
						<token name="VerticalScrollBarInset">0</token>
						<token name="VerticalScrollBarPosition">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBXC25148FFADCA45509D88653A36DD38AD">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.600000024</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">DisplayReturned</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.075000003</XS>
							<XO>0</XO>
							<YS>0.625</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>20</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">2</int>
					</Properties>
					<Item class="TextLabel" referent="RBX4EE7C4D5171142DA9C3D0545148A7E0E">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.380392194</R>
								<G>0.380392194</G>
								<B>0.380392194</B>
							</Color3>
							<float name="BackgroundTransparency">0.400000006</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">enabled</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>3</XO>
								<YS>0</YS>
								<YO>3</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>14</XO>
								<YS>0</YS>
								<YO>14</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.494117677</R>
								<G>0.494117677</G>
								<B>0.494117677</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.75</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">false</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="UICorner" referent="RBX8CAB145CD7BD49D1989DA8370FB1BE6D">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="TextLabel" referent="RBXB891CABA2946474798D631E1B7521081">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Desc2</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.075000003</XS>
							<XO>30</XO>
							<YS>0.625</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.925000012</XS>
							<XO>-30</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Display values returned</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBX8AD21EA978714468AC4803923B37F2FE">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">4</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Add</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.800000012</XS>
							<XO>0</XO>
							<YS>0.625</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>20</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">+</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">24</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UICorner" referent="RBX906B17A22A5C49D28DEEB14038510D86">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="TextButton" referent="RBXCC7E75B01AB54295A3A34FD9C462474A">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">4</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Subtract</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.899999976</XS>
							<XO>0</XO>
							<YS>0.625</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>20</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">-</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">24</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UICorner" referent="RBX654C014960D74BC8BD96C569B67D47F8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="Frame" referent="RBXE3B6B987A15B42FF9500735C45ED86C4">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.223529428</R>
							<G>0.223529428</G>
							<B>0.223529428</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0.749019623</R>
							<G>0.749019623</G>
							<B>0.749019623</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<int name="LayoutOrder">0</int>
						<string name="Name">ArgumentTemplate</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Visible">false</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextButton" referent="RBX8F851F3AC44E463180467E6AEE3AF2CE">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">true</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">0.899999976</float>
							<Color3 name="BorderColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">Type</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0.400000006</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>20</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Script</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">18</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.75</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="TextBox" referent="RBXB48075FDD26A42D49627BD3D07E22226">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">0.899999976</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClearTextOnFocus">true</bool>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="MultiLine">false</bool>
							<string name="Name">Value</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<Color3 name="PlaceholderColor3">
								<R>0.698039234</R>
								<G>0.698039234</G>
								<B>0.698039234</B>
							</Color3>
							<string name="PlaceholderText"></string>
							<UDim2 name="Position">
								<XS>0.400000006</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<bool name="ShowNativeInput">true</bool>
							<UDim2 name="Size">
								<XS>0.600000024</XS>
								<XO>-12</XO>
								<YS>0</YS>
								<YO>20</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextEditable">true</bool>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.75</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="TextButton" referent="RBX0B2AC60F70AB4DCF8A88206048CDB099">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Cancel</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.524999976</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>-40</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.400000006</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Cancel</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UICorner" referent="RBX6BAE1B8F520B4A0E96B270089E47915E">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="TextButton" referent="RBX6CFF2CE35D5D4443A09CA156A3DAAB58">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Ok</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.075000003</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>-40</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.400000006</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Call</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UICorner" referent="RBX8C7F3406337841F38DB8D14095E0B261">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="UICorner" referent="RBXE92A0D9913F14A6895AF8A6285BD4083">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<UDim name="CornerRadius">
							<S>0</S>
							<O>10</O>
						</UDim>
						<string name="Name"></string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Frame" referent="RBXC62A6B0E0A2E477F8F8F8AC56DFD4286">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.0784313753</R>
					<G>0.0784313753</G>
					<B>0.0784313753</B>
				</Color3>
				<float name="BackgroundTransparency">0</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">true</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">TableCaution</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>0.300000012</XS>
					<XO>0</XO>
					<YS>0.300000012</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>350</XO>
					<YS>0</YS>
					<YO>20</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">false</bool>
				<int name="ZIndex">2</int>
			</Properties>
			<Item class="Frame" referent="RBX2FB91045F6F7455C850A64BE82492EC8">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.749019623</R>
						<G>0.749019623</G>
						<B>0.749019623</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">MainWindow</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>150</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextButton" referent="RBX78E3FF908B404EF980119F9BB45E2DC9">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.423529446</R>
							<G>0.423529446</G>
							<B>0.423529446</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Ok</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.300000012</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>-40</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.400000006</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Ok</string>
						<Color3 name="TextColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UICorner" referent="RBX61A11601C51C49B09ACAA26520E2F658">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="ScrollingFrame" referent="RBX262C76A3D3E0432D81A64F7368EBCE13">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticCanvasSize">0</token>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<Content name="BottomImage"><url>rbxasset://textures/blackBkg_square.png</url></Content>
						<Vector2 name="CanvasPosition">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<UDim2 name="CanvasSize">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="ClipsDescendants">true</bool>
						<bool name="Draggable">false</bool>
						<token name="ElasticBehavior">0</token>
						<token name="HorizontalScrollBarInset">0</token>
						<int name="LayoutOrder">0</int>
						<Content name="MidImage"><url>rbxasset://textures/blackBkg_square.png</url></Content>
						<string name="Name">TableResults</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<Color3 name="ScrollBarImageColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="ScrollBarImageTransparency">0</float>
						<int name="ScrollBarThickness">12</int>
						<token name="ScrollingDirection">2</token>
						<bool name="ScrollingEnabled">true</bool>
						<bool name="Selectable">true</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>80</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TopImage"><url>rbxasset://textures/blackBkg_square.png</url></Content>
						<token name="VerticalScrollBarInset">0</token>
						<token name="VerticalScrollBarPosition">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="Frame" referent="RBXE701BBFEDDF0499C98800E30010D8245">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.168627456</R>
							<G>0.168627456</G>
							<B>0.168627456</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0.749019623</R>
							<G>0.749019623</G>
							<B>0.749019623</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<int name="LayoutOrder">0</int>
						<string name="Name">TableTemplate</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Visible">false</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBX9EE35DD192DA42D7A24593171EF1423D">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.400000036</R>
								<G>0.400000036</G>
								<B>0.400000036</B>
							</Color3>
							<float name="BackgroundTransparency">0.899999976</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">Type</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0.400000006</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>20</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Script</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">18</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.800000012</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="TextLabel" referent="RBX29F595E127FB478CA5CE23871D52AFA2">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.400000036</R>
								<G>0.400000036</G>
								<B>0.400000036</B>
							</Color3>
							<float name="BackgroundTransparency">0.899999976</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">Value</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0.400000006</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0.600000024</XS>
								<XO>-12</XO>
								<YS>0</YS>
								<YO>20</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Script</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.800000012</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="UICorner" referent="RBX684A66F07C2B4C4C92A85C1ED3CF3F7F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<UDim name="CornerRadius">
							<S>0</S>
							<O>10</O>
						</UDim>
						<string name="Name"></string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
			<Item class="TextLabel" referent="RBXA8964D967B9C4395BEC8BC2117DFDEF6">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.639215708</R>
						<G>0.635294139</G>
						<B>0.647058845</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Caution</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.800000012</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
		</Item>
		<Item class="Frame" referent="RBXDA4DEF4345DD4355A1886187E4CB797E">
			<Properties>
				<bool name="Active">false</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.145098045</R>
					<G>0.145098045</G>
					<B>0.164705887</B>
				</Color3>
				<float name="BackgroundTransparency">0.100000001</float>
				<Color3 name="BorderColor3">
					<R>0.749019623</R>
					<G>0.749019623</G>
					<B>0.749019623</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">SaveMapWindow</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>0</XO>
					<YS>0</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>300</XO>
					<YS>1</YS>
					<YO>0</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">true</bool>
				<int name="ZIndex">1</int>
			</Properties>
			<Item class="Frame" referent="RBX6DD980AFC2F34D0B9F496757326892E0">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.0784313753</R>
						<G>0.0784313753</G>
						<B>0.0784313753</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.58431375</R>
						<G>0.58431375</G>
						<B>0.58431375</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Header</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>17</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBXB4539645AFD64374B1568F6033ADE001">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.639215708</R>
							<G>0.635294139</G>
							<B>0.647058845</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">16</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">TextLabel</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>4</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>-4</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Map Downloader</string>
						<Color3 name="TextColor3">
							<R>0.980392158</R>
							<G>0.980392158</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="Frame" referent="RBX377C546B1D0E4CFC9B164CE25F9E80AB">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">MapSettings</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>38</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>240</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="Frame" referent="RBX09628509291A4BAFB0FA47930D735777">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<int name="LayoutOrder">0</int>
						<string name="Name">Scripts</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>60</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBX340E443EE5F446C0B0B2119CB3F795A6">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">SName</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>10</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-20</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Save Scripts</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">18</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.75</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="TextLabel" referent="RBXC08D4828FD2E4665BDC33E6C708FBDDF">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">Status</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>60</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>50</XO>
								<YS>0</YS>
								<YO>15</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">On</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">18</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.75</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="TextButton" referent="RBX13C3B44E9DE04DFEA6E4D3F649F5C57F">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">true</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.862745166</R>
								<G>0.862745166</G>
								<B>0.862745166</B>
							</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">Change</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>10</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>40</XO>
								<YS>0</YS>
								<YO>15</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextLabel" referent="RBX1D3F0DCAD5A14F3E8EF5563D0A4E1E43">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>0</R>
									<G>0.576470613</G>
									<B>0.862745166</B>
								</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">3</token>
								<int name="LayoutOrder">0</int>
								<float name="LineHeight">1</float>
								<int name="MaxVisibleGraphemes">-1</int>
								<string name="Name">OnBar</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="RichText">false</bool>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>40</XO>
									<YS>0</YS>
									<YO>15</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<string name="Text"></string>
								<Color3 name="TextColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<bool name="TextScaled">false</bool>
								<float name="TextSize">14</float>
								<Color3 name="TextStrokeColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<token name="TextTruncate">0</token>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="UICorner" referent="RBX651E044879F14ECF9F4718B6A6DAFC1C">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<UDim name="CornerRadius">
										<S>0</S>
										<O>10</O>
									</UDim>
									<string name="Name"></string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
								</Properties>
							</Item>
						</Item>
						<Item class="TextLabel" referent="RBX6199CC0103BB4CE0B0D7BA7CC1C32E62">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">true</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">3</token>
								<int name="LayoutOrder">0</int>
								<float name="LineHeight">1</float>
								<int name="MaxVisibleGraphemes">-1</int>
								<string name="Name">Bar</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>32</XO>
									<YS>0</YS>
									<YO>-2</YO>
								</UDim2>
								<bool name="RichText">false</bool>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>10</XO>
									<YS>0</YS>
									<YO>19</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<string name="Text"></string>
								<Color3 name="TextColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<bool name="TextScaled">false</bool>
								<float name="TextSize">14</float>
								<Color3 name="TextStrokeColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<token name="TextTruncate">0</token>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="UICorner" referent="RBX652333E1F6D4482FAF74FA1CFDA53468">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<UDim name="CornerRadius">
										<S>0</S>
										<O>10</O>
									</UDim>
									<string name="Name"></string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
								</Properties>
							</Item>
						</Item>
						<Item class="UICorner" referent="RBXEFC05D67E1534213AE26159A1457290C">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<UDim name="CornerRadius">
									<S>0</S>
									<O>10</O>
								</UDim>
								<string name="Name"></string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="UIListLayout" referent="RBX53EEBCB94E3E4377B06821698B4F53DB">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<token name="FillDirection">1</token>
						<token name="HorizontalAlignment">1</token>
						<string name="Name">UIListLayout</string>
						<UDim name="Padding">
							<S>0</S>
							<O>0</O>
						</UDim>
						<token name="SortOrder">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<token name="VerticalAlignment">1</token>
					</Properties>
				</Item>
				<Item class="Frame" referent="RBXD1330977ABF24AE4A2F0F2FB2C75FC19">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<int name="LayoutOrder">0</int>
						<string name="Name">ScriptCache</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>60</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBXEBA0B979D2FF474086CD11C20DC355B3">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">SName</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>10</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>-20</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Script Cache</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">18</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.75</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="TextLabel" referent="RBXFC7C786D1F5F4A0486A87BE08B9BBBDD">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">Status</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>60</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>50</XO>
								<YS>0</YS>
								<YO>15</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">On</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">18</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">0.75</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="TextButton" referent="RBXB97DBACEE0134E7F9E50CFD33C9BEC8F">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">true</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.862745166</R>
								<G>0.862745166</G>
								<B>0.862745166</B>
							</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">Change</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>10</XO>
								<YS>0</YS>
								<YO>30</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>40</XO>
								<YS>0</YS>
								<YO>15</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextLabel" referent="RBX3BA1288CA72E4745B5FED1FB235E4333">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>0</R>
									<G>0.576470613</G>
									<B>0.862745166</B>
								</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">3</token>
								<int name="LayoutOrder">0</int>
								<float name="LineHeight">1</float>
								<int name="MaxVisibleGraphemes">-1</int>
								<string name="Name">OnBar</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="RichText">false</bool>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>40</XO>
									<YS>0</YS>
									<YO>15</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<string name="Text"></string>
								<Color3 name="TextColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<bool name="TextScaled">false</bool>
								<float name="TextSize">14</float>
								<Color3 name="TextStrokeColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<token name="TextTruncate">0</token>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="UICorner" referent="RBXE257C8289FBD4BBFBCCF305D08A3A5BE">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<UDim name="CornerRadius">
										<S>0</S>
										<O>10</O>
									</UDim>
									<string name="Name"></string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
								</Properties>
							</Item>
						</Item>
						<Item class="TextLabel" referent="RBXCE80B835AF51408EBF021BE15D2489C7">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">0</int>
								<bool name="ClipsDescendants">true</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">3</token>
								<int name="LayoutOrder">0</int>
								<float name="LineHeight">1</float>
								<int name="MaxVisibleGraphemes">-1</int>
								<string name="Name">Bar</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>32</XO>
									<YS>0</YS>
									<YO>-2</YO>
								</UDim2>
								<bool name="RichText">false</bool>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>10</XO>
									<YS>0</YS>
									<YO>19</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<string name="Text"></string>
								<Color3 name="TextColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<bool name="TextScaled">false</bool>
								<float name="TextSize">14</float>
								<Color3 name="TextStrokeColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<token name="TextTruncate">0</token>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="UICorner" referent="RBXF80C3763FCF6478F822113001F33D770">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<UDim name="CornerRadius">
										<S>0</S>
										<O>10</O>
									</UDim>
									<string name="Name"></string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
								</Properties>
							</Item>
						</Item>
						<Item class="UICorner" referent="RBX0105B3A428AD4B21B9AB87DB4D2479C9">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<UDim name="CornerRadius">
									<S>0</S>
									<O>10</O>
								</UDim>
								<string name="Name"></string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
			<Item class="TextLabel" referent="RBX54DC943016804187B109286E9C4B23B5">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.639215708</R>
						<G>0.635294139</G>
						<B>0.647058845</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Save Settings</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>17</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>20</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Save Settings</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">18</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBX0956345BED0F414EAD3AF5C6B5160ECB">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.145098045</R>
						<G>0.145098045</G>
						<B>0.164705887</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.58431375</R>
						<G>0.58431375</G>
						<B>0.58431375</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Bottom</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>-50</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>50</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBXEFFDCD00AF5640C4966BFC1F6EBA4BD1">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.639215708</R>
							<G>0.635294139</G>
							<B>0.647058845</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">5</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">TextLabel</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">After the map saves, open a new place on studio, then right click Lighting and &quot;Insert from file...&quot;, then select your file and run the unpacker script inside the folder.</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.800000012</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="TextButton" referent="RBXE75067D96A19499186009D66FF8B3208">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoButtonColor">true</bool>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.941176534</R>
						<G>0.941176534</G>
						<B>0.941176534</B>
					</Color3>
					<float name="BackgroundTransparency">0.800000012</float>
					<Color3 name="BorderColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">16</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<bool name="Modal">false</bool>
					<string name="Name">Save</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>-80</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<bool name="Selected">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Save</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">18</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBX7A8BEAF1EDE345FAA802DCE7B5A213CB">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">0.800000012</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">CopyList</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>37</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>163</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBXB19922C269E64BDD8990EEAA79467BEB">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Entry</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>22</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">false</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextButton" referent="RBXCF56270C6AFF462AB4A7C5E56E919834">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.600000024</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Change</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>10</XO>
							<YS>0</YS>
							<YO>1</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>20</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">2</int>
					</Properties>
					<Item class="TextLabel" referent="RBX3D8B716D723947B48EB9F9D26F705493">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.380392194</R>
								<G>0.380392194</G>
								<B>0.380392194</B>
							</Color3>
							<float name="BackgroundTransparency">0.400000006</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">enabled</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>3</XO>
								<YS>0</YS>
								<YO>3</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>14</XO>
								<YS>0</YS>
								<YO>14</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="TextLabel" referent="RBX2803548B07A84219BE907DCA3B62ACA2">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.639215708</R>
							<G>0.635294139</G>
							<B>0.647058845</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Info</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>40</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>-40</XO>
							<YS>0</YS>
							<YO>22</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Workspace</string>
						<Color3 name="TextColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="TextBox" referent="RBX0591C97086094AA487C3519DF9E84B5B">
				<Properties>
					<bool name="Active">true</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.941176534</R>
						<G>0.941176534</G>
						<B>0.941176534</B>
					</Color3>
					<float name="BackgroundTransparency">0.600000024</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClearTextOnFocus">true</bool>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<bool name="MultiLine">false</bool>
					<string name="Name">FileName</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<Color3 name="PlaceholderColor3">
						<R>0.699999988</R>
						<G>0.699999988</G>
						<B>0.699999988</B>
					</Color3>
					<string name="PlaceholderText"></string>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>-105</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<bool name="ShowNativeInput">true</bool>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>25</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">PlaceName</string>
					<Color3 name="TextColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<bool name="TextEditable">true</bool>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">18</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
		</Item>
		<Item class="Frame" referent="RBXF82F250A240F4D9BB3063414141E3B10">
			<Properties>
				<bool name="Active">false</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.145098045</R>
					<G>0.145098045</G>
					<B>0.164705887</B>
				</Color3>
				<float name="BackgroundTransparency">0.100000001</float>
				<Color3 name="BorderColor3">
					<R>0.749019623</R>
					<G>0.749019623</G>
					<B>0.749019623</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">RemoteDebugWindow</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>0</XO>
					<YS>0</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">true</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>300</XO>
					<YS>1</YS>
					<YO>0</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">true</bool>
				<int name="ZIndex">1</int>
			</Properties>
			<Item class="Frame" referent="RBX6095B9E622BC4AD59A4E2FF415D059EB">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.0784313753</R>
						<G>0.0784313753</G>
						<B>0.0784313753</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.58431375</R>
						<G>0.58431375</G>
						<B>0.58431375</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Header</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>17</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBX4F8207D4F024464293E359E610C0AA40">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.639215708</R>
							<G>0.635294139</G>
							<B>0.647058845</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">TextLabel</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>4</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>-4</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Remote Debugger</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="TextLabel" referent="RBX9E28A36DBA8B498A90300D98F0DF5E8B">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Desc</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>20</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>40</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Have fun with remotes</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">32</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX142B5134A31548F9961C6CBBA1E3E2C7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetSetting</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="ImageButton" referent="RBXECB7FF88AB8642DCA4181F305CE7689C">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoButtonColor">true</bool>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>1</R>
					<G>1</G>
					<B>1</B>
				</Color3>
				<float name="BackgroundTransparency">1</float>
				<Color3 name="BorderColor3">
					<R>0.105882362</R>
					<G>0.164705887</G>
					<B>0.207843155</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">1</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<Content name="HoverImage"><null></null></Content>
				<Content name="Image"><url>rbxassetid://1513966937</url></Content>
				<Color3 name="ImageColor3">
					<R>0.145098045</R>
					<G>0.145098045</G>
					<B>0.164705887</B>
				</Color3>
				<Vector2 name="ImageRectOffset">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<Vector2 name="ImageRectSize">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<float name="ImageTransparency">0.100000001</float>
				<int name="LayoutOrder">0</int>
				<bool name="Modal">false</bool>
				<string name="Name">Toggle</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>0</XO>
					<YS>0</YS>
					<YO>0</YO>
				</UDim2>
				<Content name="PressedImage"><null></null></Content>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">180</float>
				<token name="ScaleType">0</token>
				<bool name="Selectable">true</bool>
				<bool name="Selected">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>40</XO>
					<YS>0</YS>
					<YO>40</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<Rect2D name="SliceCenter">
					<min>
						<X>0</X>
						<Y>0</Y>
					</min>
					<max>
						<X>0</X>
						<Y>0</Y>
					</max>
				</Rect2D>
				<float name="SliceScale">1</float>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<UDim2 name="TileSize">
					<XS>1</XS>
					<XO>0</XO>
					<YS>1</YS>
					<YO>0</YO>
				</UDim2>
				<bool name="Visible">true</bool>
				<int name="ZIndex">1</int>
			</Properties>
			<Item class="TextLabel" referent="RBXC07F0535578E4C208DB87315CDBCC7F3">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">TextLabel</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>2</XO>
						<YS>0</YS>
						<YO>10</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">180</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">&lt;</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">24</float>
					<Color3 name="TextStrokeColor3">
						<R>0.117647067</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
		</Item>
		<Item class="Frame" referent="RBX69A4E56E05924991AB6DFCC14A70EBDC">
			<Properties>
				<bool name="Active">false</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.196078435</R>
					<G>0.196078435</G>
					<B>0.215686277</B>
				</Color3>
				<float name="BackgroundTransparency">0</float>
				<Color3 name="BorderColor3">
					<R>0.105882362</R>
					<G>0.164705887</G>
					<B>0.207843155</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">IntroFrame</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>30</XO>
					<YS>0</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>301</XO>
					<YS>1</YS>
					<YO>0</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">true</bool>
				<int name="ZIndex">2</int>
			</Properties>
			<Item class="TextLabel" referent="RBX4056A936E03B4EC2B1B24A931AA21209">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Version</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>100</XO>
						<YS>0</YS>
						<YO>210</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>100</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Synapse Edition</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">28</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.5</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="TextLabel" referent="RBX377F6277C3AA45ED94C4D4AFD569BAEF">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>100</XO>
						<YS>0</YS>
						<YO>150</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>100</XO>
						<YS>0</YS>
						<YO>60</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Dex | Beta</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">60</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.5</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="TextLabel" referent="RBX78068545E93B4447B10F8073945349A9">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Creator</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>80</XO>
						<YS>0</YS>
						<YO>300</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>140</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text"><![CDATA[Created by: Moon
Edited by: wally, ic3, Yarios]]></string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">18</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.5</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="ImageLabel" referent="RBX62E66AA80C8042268AFE1C4B0B41B6D5">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<Content name="Image"><url>rbxassetid://483437370</url></Content>
					<Color3 name="ImageColor3">
						<R>0.960784376</R>
						<G>0.960784376</G>
						<B>0.960784376</B>
					</Color3>
					<Vector2 name="ImageRectOffset">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<Vector2 name="ImageRectSize">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<float name="ImageTransparency">0</float>
					<int name="LayoutOrder">0</int>
					<string name="Name">Sad</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>50</XO>
						<YS>1</YS>
						<YO>-250</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<token name="ScaleType">0</token>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>200</XO>
						<YS>0</YS>
						<YO>200</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<Rect2D name="SliceCenter">
						<min>
							<X>0</X>
							<Y>0</Y>
						</min>
						<max>
							<X>0</X>
							<Y>0</Y>
						</max>
					</Rect2D>
					<float name="SliceScale">1</float>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UDim2 name="TileSize">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="Visible">false</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBX851937AD1AED4878929961DFE6696BA4">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.196078435</R>
						<G>0.196078435</G>
						<B>0.215686277</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Main</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>-30</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>90</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="ImageLabel" referent="RBX855876DF71214F838BB09C15F851E103">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.196078435</R>
						<G>0.196078435</G>
						<B>0.215686277</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<Content name="Image"><url>rbxassetid://1513966937</url></Content>
					<Color3 name="ImageColor3">
						<R>0.196078435</R>
						<G>0.196078435</G>
						<B>0.215686277</B>
					</Color3>
					<Vector2 name="ImageRectOffset">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<Vector2 name="ImageRectSize">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<float name="ImageTransparency">0</float>
					<int name="LayoutOrder">0</int>
					<string name="Name">Slant</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>-30</XO>
						<YS>0</YS>
						<YO>90</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">180</float>
					<token name="ScaleType">0</token>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>30</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<Rect2D name="SliceCenter">
						<min>
							<X>0</X>
							<Y>0</Y>
						</min>
						<max>
							<X>0</X>
							<Y>0</Y>
						</max>
					</Rect2D>
					<float name="SliceScale">1</float>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UDim2 name="TileSize">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="TextLabel" referent="RBX2D19DC7761C94D1BA5CE97CBA6578E95">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0.5</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">USID</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0.75</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>25</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">USID: 0_?????</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">20</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
		</Item>
		<Item class="Frame" referent="RBX09C0A410EA344EDDA04C0E4E85E7B90D">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.117647067</R>
					<G>0.117647067</G>
					<B>0.117647067</B>
				</Color3>
				<float name="BackgroundTransparency">1</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">true</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">ScriptEditor</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>0.5</XS>
					<XO>-368</XO>
					<YS>0.5</YS>
					<YO>-216</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>642</XO>
					<YS>0</YS>
					<YO>25</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">false</bool>
				<int name="ZIndex">5</int>
			</Properties>
			<Item class="LocalScript" referent="RBX7F24BAAB2E344D2488DE6205502D81E9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LocalScript</string>
					<string name="ScriptGuid">{C3D22DB9-C47B-48DD-B339-5772B7E16088}</string>
					<ProtectedString name="Source"><![CDATA[-- < Services > --
local UserInputService = game:GetService('UserInputService')
local TextService = game:GetService('TextService')
-- < Aliases > --
local Vector2_new = Vector2.new
local Color3_fromRGB = Color3.fromRGB
local Color3_new = Color3.new
local table_insert = table.insert
local table_concat = table.concat
local min, max, floor, ceil, random = math.min, math.max, math.floor, math.ceil, math.random
local sub, gsub, match, gmatch, find, rep, format, lower = string.sub, string.gsub, string.match, string.gmatch, string.find, string.rep, string.format, string.lower
local udim2 = UDim2.new
local newInst = Instance.new
-- < Bindables > --
local Bindables = script.Parent.Parent:WaitForChild("Bindables", 300)
local OpenScript_Bindable = Bindables:WaitForChild("OpenScript", 300)
-- < Source > --
local editor = script.Parent

local SaveScript = editor:WaitForChild("TopBar"):WaitForChild("Other"):WaitForChild('SaveScript')
local CopyScript = editor:WaitForChild("TopBar"):WaitForChild("Other"):WaitForChild('CopyScript')
local ClearScript = editor:WaitForChild("TopBar"):WaitForChild("Other"):WaitForChild('ClearScript')
local CloseEditor = editor:WaitForChild("TopBar"):WaitForChild("Close")
local FileName = editor:WaitForChild("TopBar"):WaitForChild("Other"):WaitForChild('FileName')
local Title	= editor:WaitForChild("TopBar"):WaitForChild("title")

local cache = {}

local LocalPlayer = game:GetService("Players").LocalPlayer
local PlayerMouse = LocalPlayer:GetMouse()
local Heartbeat = game:GetService("RunService").Heartbeat

local dragger = {} 
do
	function dragger.new(frame)
		frame.Draggable = false
		local s, event = pcall(function()
			return frame.MouseEnter
		end)

		if s then
			frame.Active = true

			event:Connect(function()
				local input = frame.InputBegan:Connect(function(key)
					if key.UserInputType == Enum.UserInputType.MouseButton1 then
						local objectPosition = Vector2_new(PlayerMouse.X - frame.AbsolutePosition.X, PlayerMouse.Y - frame.AbsolutePosition.Y)
						while Heartbeat:Wait() and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
							pcall(function()
								frame:TweenPosition(udim2(0, PlayerMouse.X - objectPosition.X + (frame.Size.X.Offset * frame.AnchorPoint.X), 0, PlayerMouse.Y - objectPosition.Y + (frame.Size.Y.Offset * frame.AnchorPoint.Y)), 'Out', 'Quad', .1, true)
							end)
						end
					end
				end)

				local leave
				leave = frame.MouseLeave:Connect(function()
					input:Disconnect()
					leave:Disconnect()
				end)
			end)
		end
	end
end

dragger.new(editor)

local newline, tab = "\n", "\t"
local TabText = rep(" ", 4)
local SplitCacheResult, SplitCacheStr, SplitCacheDel
function Split(str, del)
	if SplitCacheStr == str and SplitCacheDel == del then
		return SplitCacheResult
	end
	local res = {}
	if #del == 0 then
		for i in gmatch(str, ".") do
			table_insert(res, i)
		end
	else
		local i,Si,si = 0, 1, nil
		str ..= del
		while i do
			si, Si, i = i, find(str, del, i + 1, true)
			if i == nil then
				return res
			end
			table_insert(res, sub(str, si + 1, Si - 1))
		end
	end
	SplitCacheResult, SplitCacheStr, SplitCacheDel = res, str, del
	return res
end

local Place = {
	new = function(X, Y)
		return {X = X, Y = Y}
	end
}

local Lexer do
	local lua_builtin = {}
	for Key, T in next, {} do
		if type(Key) == "string" then
			table_insert(lua_builtin, Key)
			if type(T) == "table" then
				for T_Key, _ in next, T do
					table_insert(lua_builtin, Key.."."..T_Key)
				end
			end
		end
	end
	local Keywords = {
		["and"] = true,
		["break"] = true,
		["do"] = true,
		["else"] = true,
		["elseif"] = true,
		["end"] = true,
		["false"] = true,
		["for"] = true,
		["function"] = true,
		["if"] = true,
		["in"] = true,
		["local"] = true,
		["nil"] = true,
		["not"] = true,
		["true"] = true,
		["or"] = true,
		["repeat"] = true,
		["continue"] = true,
		["return"] = true,
		["then"] = true,
		["until"] = true,
		["while"] = true,
		["self"] = true
	}
	local Tokens = {
		Comment = 1,
		Keyword = 2,
		Number = 3,
		Operator = 4,
		String = 5,
		Identifier = 6,
		Builtin = 7,
		Symbol = 19400
	}
	local Stream 
	do
		function Stream(Input, FileName)
			local Index, Line, Column = 1,1,0
			FileName = FileName or "{none}"
			local cols = {}
			return {
				Back = function()
					Index -= 1
					local Char = sub(Input, Index, Index)
					if Char == newline then
						Line -= 1
						Column = cols[#cols]
						cols[#cols] = nil
					else
						Column -= 1
					end
				end,
				Next = function()
					local Char = sub(Input, Index, Index)
					Index += 1
					if Char == newline then
						Line += 1
						cols[#cols + 1] = Column
						Column = 0
					else
						Column += 1
					end
					return Char, {
						Index = Index,
						Line = Line,
						Column = Column,
						File = FileName
					}
				end,
				Peek = function(length)
					return sub(Input, Index, Index + (length or 1) - 1)
				end,
				EOF = function()
					return Index > #Input
				end,
				Fault = function(Error)
					error(Error .. " (col " .. Column .. ", ln " .. Line .. ", file " .. FileName .. ")", 0)
				end
			}
		end
	end

	local idenCheck, numCheck, opCheck = "abcdefghijklmnopqrstuvwxyz_", "0123456789", "+-*/%^#~=<>:,."
	local blank, dot, equal, openbrak, closebrak, backslash, dash, quote, apos = "", ".", "=", "[", "]", "\\", "-", "\"", "'"
	function Lexer(Code)
		local Input = Stream(Code)
		local Current, LastToken, self
		local Clone = function(Table)
			local R = {}
			local Table_mt = {}--getrawmetatable(Table)
			for K, V in next, Table do
				R[K] = V
			end
			if Table_mt then
				--setrawmetatable(R, Table_mt)
			end
			return R
		end
		for Key, Value in next, Clone(Tokens) do
			Tokens[Value] = Key
		end
		local function Check(Value, Type, Start)
			if Type == Tokens.Identifier then
				return find(idenCheck, lower(Value), 1, true) ~= nil or not Start and find(numCheck, Value, 1, true) ~= nil
			elseif Type == Tokens.Keyword then
				return (Keywords[Value]) and true or false
			elseif Type == Tokens.Number then
				if Value == "." and not Start then
					return true
				end
				return find(numCheck, Value, 1, true) ~= nil
			elseif Type == Tokens.Operator then
				return find(opCheck, Value, 1, true) ~= nil
			end
		end
		local function Next()
			if Current ~= nil then
				local Token = Current
				Current = nil
				return Token
			end
			if Input.EOF() then
				return nil
			end
			local Char, DebugInfo = Input.Next()
			local Result = {
				Type = Tokens.Symbol
			}
			local sValue = Char
			for i = 0, 256 do
				local open = openbrak .. rep(equal, i) .. openbrak
				if Char .. Input.Peek(#open - 1) == open then
					self.StringDepth = i + 1
					break
				end
			end
			local resulting = false
			if 0 < self.StringDepth then
				local closer = closebrak .. rep(equal, self.StringDepth - 1) .. closebrak
				Input.Back()
				local Value = blank
				while not Input.EOF() and Input.Peek(#closer) ~= closer do
					Char, DebugInfo = Input.Next()
					Value ..= Char
				end
				if Input.Peek(#closer) == closer then
					for i = 1, #closer do
						Value ..= Input.Next()
					end
					self.StringDepth = 0
				end
				Result.Value = Value
				Result.Type = Tokens.String
				resulting = true
			elseif 0 < self.CommentDepth then
				local closer = closebrak .. rep(equal, self.CommentDepth - 1) .. closebrak
				Input.Back()
				local Value = blank
				while not Input.EOF() and Input.Peek(#closer) ~= closer do
					Char, DebugInfo = Input.Next()
					Value ..= Char
				end
				if Input.Peek(#closer) == closer then
					for i = 1, #closer do
						Value ..= Input.Next()
					end
					self.CommentDepth = 0
				end
				Result.Value = Value
				Result.Type = Tokens.Comment
				resulting = true
			end
			local skip = 1
			for i = 1, #lua_builtin do
				local k = lua_builtin[i]
				if Input.Peek(#k - 1) == sub(k, 2) and Char == sub(k, 1, 1) and skip < #k then
					Result.Type = Tokens.Builtin
					Result.Value = k
					skip = #k
					resulting = true
				end
			end
			for i = 1, skip - 1 do
				Char, DebugInfo = Input.Next()
			end
			if resulting then
			elseif Check(Char, Tokens.Identifier, true) then
				local Value = Char
				while Check(Input.Peek(), Tokens.Identifier) and not Input.EOF() do
					Value ..= Input.Next()
				end
				Result.Type = Check(Value, Tokens.Keyword) and Tokens.Keyword or Tokens.Identifier
				Result.Value = Value
			elseif Char == dash and Input.Peek() == dash then
				local Value = Char .. Input.Next()
				for i = 0, 256 do
					local open = openbrak .. rep(equal, i) .. openbrak
					if Input.Peek(#open) == open then
						self.CommentDepth = i + 1
						break
					end
				end
				if 0 < self.CommentDepth then
					local closer = closebrak .. rep(equal, self.CommentDepth - 1) .. closebrak
					while not Input.EOF() and Input.Peek(#closer) ~= closer do
						Char, DebugInfo = Input.Next()
						Value ..= Char
					end
					if Input.Peek(#closer) == closer then
						for i = 1, #closer do
							Value ..= Input.Next()
						end
						self.CommentDepth = 0
					end
				else
					while not Input.EOF() and not find(newline, Char, 1, true) do
						Char, DebugInfo = Input.Next()
						Value ..= Char
					end
				end
				Result.Value = Value
				Result.Type = Tokens.Comment
			elseif Check(Char, Tokens.Number, true) or Char == dot and Check(Input.Peek(), Tokens.Number, true) then
				local Value = Char
				while Check(Input.Peek(), Tokens.Number) and not Input.EOF() do
					Value ..= Input.Next()
				end
				Result.Value = Value
				Result.Type = Tokens.Number
			elseif Char == quote then
				local Escaped = false
				local String = blank
				Result.Value = quote
				while not Input.EOF() do
					local Char = Input.Next()
					Result.Value ..= Char
					if Escaped then
						String ..= Char
						Escaped = false
					elseif Char == backslash then
						Escaped = true
					elseif Char == quote or Char == newline then
						break
					else
						String ..= Char
					end
				end
				Result.Type = Tokens.String
			elseif Char == apos then
				local Escaped = false
				local String = blank
				Result.Value = apos
				while not Input.EOF() do
					local Char = Input.Next()
					Result.Value ..= Char
					if Escaped then
						String ..= Char
						Escaped = false
					elseif Char == backslash then
						Escaped = true
					elseif Char == apos or Char == newline then
						break
					else
						String ..= Char
					end
				end
				Result.Type = Tokens.String
			elseif Check(Char, Tokens.Operator) then
				Result.Value = Char
				Result.Type = Tokens.Operator
			else
				Result.Value = Char
			end
			Result.TypeName = Tokens[Result.Type]
			LastToken = Result
			return Result
		end
		local function Peek()
			local Result = Next()
			Current = Result
			return Result
		end
		self = {
			Next = Next,
			Peek = Peek,
			EOF = function()
				return Peek() == nil
			end,
			GetLast = function()
				return LastToken
			end,
			CommentDepth = 0,
			StringDepth = 0
		}
		return self
	end
end

function Place.fromIndex(CodeEditor, Index)
	local cache = CodeEditor.PlaceCache
	local fromCache = {}
	if cache.fromIndex then
		fromCache = cache.fromIndex
	else
		cache.fromIndex = fromCache
	end
	if fromCache[Index] then
	end
	local Content = CodeEditor.Content
	local ContentUpto = sub(Content, 1, Index)
	if Index == 0 then
		return Place.new(0, 0)
	end
	local Lines = Split(ContentUpto, newline)
	local res = Place.new(#gsub(Lines[#Lines], tab, TabText), #Lines - 1)
	fromCache[Index] = res
	return res
end
function Place.toIndex(CodeEditor, Place)
	local cache = CodeEditor.PlaceCache
	local toCache = {}
	if cache.toIndex then
		toCache = cache.toIndex
	else
		cache.toIndex = toCache
	end
	local Content = CodeEditor.Content
	if Place.X == 0 and Place.Y == 0 then
		return 0
	end
	local Lines = CodeEditor.Lines
	local Index = 0
	for I = 1, Place.Y do
		Index += #Lines[I] + 1
	end
	local line = Lines[Place.Y + 1]
	local roundedX = Place.X
	local ix = 0
	for i = 1, #line do
		local c = sub(line, i, i)
		local pix = ix
		if c == tab then
			ix += #TabText
		else
			ix += 1
		end
		if Place.X == ix then
			roundedX = i
		elseif pix < Place.X and ix > Place.X then
			if Place.X - pix < ix - Place.X then
				roundedX = i - 1
			else
				roundedX = i
			end
		end
	end
	local res = Index + min(#line, roundedX)
	toCache[Place.X .. "-$-" .. Place.Y] = res
	return res
end
local Selection = {}
local Side = {Left = 1, Right = 2}
function Selection.new(Start, End, CaretSide)
	return {
		Start = Start,
		End = End,
		Side = CaretSide
	}
end
local Themes = {
	Plain = {
		LineSelection = Color3_fromRGB(46, 46, 46),
		Background = Color3_fromRGB(45, 45, 45),
		Comment = Color3_fromRGB(150, 150, 150),
		Keyword = Color3_fromRGB(204, 153, 204),
		Builtin = Color3_fromRGB(102, 153, 204),
		Number = Color3_fromRGB(250, 145, 85),
		Operator = Color3_fromRGB(102, 204, 204),
		String = Color3_fromRGB(153, 204, 153),
		Text = Color3_fromRGB(204, 204, 204),
		SelectionBackground = Color3_fromRGB(150, 150, 150),
		SelectionColor = Color3_fromRGB(0, 0, 0),
		SelectionGentle = Color3_fromRGB(65, 65, 65)
	}
}

local EditorLib = {
	["Place"] = Place,
	["Selection"] = Selection,
	NewTheme = function(Name, Theme)
		Themes[Name] = Theme
	end
}

local TextCursor = {
	Image = "rbxassetid://1188942192",
	HotspotX = 3,
	HotspotY = 8,
	Size = udim2(0, 7, 0, 17)
}
function EditorLib.Initialize(Frame, Options)
	local themestuff = {}
	local function ThemeSet(obj, prop, val)
		themestuff[obj] = themestuff[obj] or {}
		themestuff[obj][prop] = val
	end
	local baseZIndex = Frame.ZIndex
	Options.CaretBlinkingRate = tonumber(Options.CaretBlinkingRate) or .25
	Options.FontSize = tonumber(Options.FontSize or Options.TextSize) or 14
	Options.CaretFocusedOpacity = tonumber(Options.CaretOpacity and Options.CaretOpacity.Focused or Options.CaretFocusedOpacity) or 1
	Options.CaretUnfocusedOpacity = tonumber(Options.CaretOpacity and Options.CaretOpacity.Unfocused or Options.CaretUnfocusedOpacity) or 0
	Options.Theme = type(Options.Theme) == "string" and Options.Theme or "Plain"
	local SizeDot = TextService:GetTextSize(".", Options.FontSize, Options.Font, Vector2_new(1000, 1000))
	local SizeM = TextService:GetTextSize("m", Options.FontSize, Options.Font, Vector2_new(1000, 1000))
	local SizeAV = TextService:GetTextSize("AV", Options.FontSize, Options.Font, Vector2_new(1000, 1000))
	local Editor = {
		Content = "",
		Lines = {""},
		Focused = false,
		PlaceCache = {},
		Selection = Selection.new(0, 0, Side.Left),
		StartingSelection = Selection.new(0, 0, Side.Left),
		LastKeyCode = false,
		UndoStack = {},
		RedoStack = {}
	}
	local CharWidth = SizeM.X
	local CharHeight = SizeM.Y + 4
	if (SizeDot.X ~= SizeM.X or SizeDot.Y ~= SizeM.Y) and SizeAV.X ~= SizeM.X + SizeDot.X then
		return error("CodeEditor requires a monospace font with no currying", 2)
	end
	local ContentChangedEvent = newInst("BindableEvent")
	local FocusLostEvent = newInst("BindableEvent")
	local PlayerGui = LocalPlayer:FindFirstChildOfClass("PlayerGui")
	local Container = newInst("Frame")
	Container.Name = "Container"
	Container.BorderSizePixel = 0
	Container.BackgroundColor3 = Themes[Options.Theme].Background
	ThemeSet(Container, "BackgroundColor3", "Background")
	Container.Size = udim2(1, 0, 1, 0)
	Container.ClipsDescendants = true
	local GutterSize = CharWidth * 4
	local TextArea = newInst("ScrollingFrame")
	TextArea.Name = "TextArea"
	TextArea.BackgroundTransparency = 1
	TextArea.BorderSizePixel = 0
	TextArea.Size = udim2(1, -GutterSize, 1, 0)
	TextArea.Position = udim2(0, GutterSize, 0, 0)
	TextArea.ScrollBarThickness = 10
	TextArea.ScrollBarImageTransparency = 0
	TextArea.ScrollBarImageColor3 = Color3_fromRGB(20, 20, 20)
	TextArea.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	TextArea.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	TextArea.ZIndex = 3

	local Gutter = newInst("Frame")
	Gutter.Name = "Gutter"
	Gutter.ZIndex = baseZIndex
	Gutter.BorderSizePixel = 0
	Gutter.BackgroundTransparency = .96
	Gutter.Size = udim2(0, GutterSize - 5, 1.5, 0)
	local GoodMouseDetector = newInst("TextButton")
	GoodMouseDetector.Text = [[]]
	GoodMouseDetector.BackgroundTransparency = 1
	GoodMouseDetector.Size = udim2(1, 0, 1, 0)
	GoodMouseDetector.Position = udim2(0, 0, 0, 0)
	GoodMouseDetector.Visible = false
	local Scroll = newInst("TextButton")
	Scroll.Name = "VertScroll"
	Scroll.Size = udim2(0, 10, 1, 0)
	Scroll.Position = udim2(1, -10, 0, 0)
	Scroll.BackgroundTransparency = 1
	Scroll.Text = ""
	Scroll.ZIndex = 1000
	Scroll.Parent = Container
	local ScrollBar = newInst("TextButton")
	ScrollBar.Name = "ScrollBar"
	ScrollBar.Size = udim2(1, 0, 0, 36)
	ScrollBar.Position = udim2(0, 0, 0, 0)
	ScrollBar.Text = ""
	ScrollBar.BackgroundColor3 = Themes[Options.Theme].ScrollBar or Color3_fromRGB(120, 120, 120)
	ScrollBar.BackgroundTransparency = .75
	ScrollBar.BorderSizePixel = 0
	ScrollBar.AutoButtonColor = false
	ScrollBar.ZIndex = 3 + baseZIndex
	ScrollBar.Parent = Scroll
	local CaretIndicator = newInst("Frame")
	CaretIndicator.Name = "CaretIndicator"
	CaretIndicator.Size = udim2(1, 0, 0, 2)
	CaretIndicator.Position = udim2(0, 0, 0, 0)
	CaretIndicator.BorderSizePixel = 0
	CaretIndicator.BackgroundColor3 = Themes[Options.Theme].Text
	ThemeSet(CaretIndicator, "BackgroundColor3", "Text")
	CaretIndicator.BackgroundTransparency = .29803921568627456
	CaretIndicator.ZIndex = 4 + baseZIndex
	CaretIndicator.Parent = Scroll
	local MarkersFolder = newInst("Folder", Scroll)
	local markers = {}
	local updateMarkers

	do
		local lerp = function(a, b, r)
			return a + r * (b - a)
		end
		function updateMarkers()
			MarkersFolder:ClearAllChildren()
			local ra = Themes[Options.Theme].Background.r
			local ga = Themes[Options.Theme].Background.g
			local ba = Themes[Options.Theme].Background.b
			local rb = Themes[Options.Theme].Text.r
			local gb = Themes[Options.Theme].Text.g
			local bb = Themes[Options.Theme].Text.b
			local r = lerp(ra, rb, .2980392156862745)
			local g = lerp(ga, gb, .2980392156862745)
			local b = lerp(ba, bb, .2980392156862745)
			local color = Color3_new(r, g, b)
			for i, v in ipairs(markers) do
				local Marker = newInst("Frame")
				Marker.BorderSizePixel = 0
				Marker.BackgroundColor3 = color
				Marker.Size = udim2(0, 4, 0, 6)
				Marker.Position = udim2(0, 4, v * CharHeight / TextArea.CanvasSize.Y.Offset, 0)
				Marker.ZIndex = 4 + baseZIndex
				Marker.Parent = MarkersFolder
			end
		end
	end
	do
		TextArea.Changed:Connect(function(property)
			if property == "CanvasSize" or property == "CanvasPosition" then
				Gutter.Position = udim2(0, 0, 0, -TextArea.CanvasPosition.Y)
			end
		end)
	end
	local ScrollBorder = newInst("Frame")
	ScrollBorder.Name = "ScrollBorder"
	ScrollBorder.Position = udim2(0, -1, 0, 0)
	ScrollBorder.Size = udim2(0, 1, 1, 0)
	ScrollBorder.BorderSizePixel = 0
	ScrollBorder.BackgroundColor3 = Color3_fromRGB(34, 34, 34)
	ScrollBorder.Parent = Scroll
	do
		TextArea.Changed:Connect(function(property)
			if property == "CanvasSize" or property == "CanvasPosition" then
				local percent = TextArea.AbsoluteWindowSize.X / TextArea.CanvasSize.X.Offset
				ScrollBar.Size = udim2(percent, 0, 1, 0)
				local max = max(TextArea.CanvasSize.X.Offset - TextArea.AbsoluteWindowSize.X, 0)
				local percent = max == 0 and 0 or TextArea.CanvasPosition.X / max
				local x = percent * (Scroll.AbsoluteSize.X - ScrollBar.AbsoluteSize.X)
				ScrollBar.Position = udim2(0, x, 0, 0)
				Scroll.Visible = false
			end
		end)
	end
	local LineSelection = newInst("Frame")
	LineSelection.Name = "LineSelection"
	LineSelection.BackgroundColor3 = Themes[Options.Theme].Background
	ThemeSet(LineSelection, "BackgroundColor3", "Background")
	LineSelection.BorderSizePixel = 2
	LineSelection.BorderColor3 = Themes[Options.Theme].LineSelection
	ThemeSet(LineSelection, "BorderColor3", "LineSelection")
	LineSelection.Size = udim2(1, -4, 0, CharHeight - 4)
	LineSelection.Position = udim2(0, 2, 0, 2)
	LineSelection.ZIndex = -1 + baseZIndex
	LineSelection.Parent = TextArea
	LineSelection.Visible = false

	local ErrorHighlighter = newInst("Frame")
	ErrorHighlighter.Name = "ErrorHighlighter"
	ErrorHighlighter.BackgroundColor3 = Color3_fromRGB(255, 0, 0)
	ErrorHighlighter.BackgroundTransparency = .9
	ErrorHighlighter.BorderSizePixel = 0
	ErrorHighlighter.Size = udim2(1, -4, 0, CharHeight - 4)
	ErrorHighlighter.Position = udim2(0, 2, 0, 2)
	ErrorHighlighter.ZIndex = 5 + baseZIndex
	ErrorHighlighter.Visible = false
	ErrorHighlighter.Parent = TextArea

	local ErrorMessage = newInst("TextLabel")
	ErrorMessage.Name = "ErrorMessage"
	ErrorMessage.BackgroundColor3 = Themes[Options.Theme].Background:Lerp(Color3_new(1, 1, 1), .1)
	ErrorMessage.TextColor3 = Color3_fromRGB(255, 152, 152)
	ErrorMessage.BorderSizePixel = 0
	ErrorMessage.Visible = false
	ErrorMessage.Size = udim2(0, 150, 0, CharHeight - 4)
	ErrorMessage.Position = udim2(0, 2, 0, 2)
	ErrorMessage.ZIndex = 6 + baseZIndex
	ErrorMessage.Parent = Container

	local Tokens = newInst("Frame")
	Tokens.BackgroundTransparency = 1
	Tokens.Name = "Tokens"
	Tokens.Parent = TextArea

	local Selection = newInst("Frame")
	Selection.BackgroundTransparency = 1
	Selection.Name = "Selection"
	Selection.ZIndex = baseZIndex
	Selection.Parent = TextArea

	local TextBox = newInst("TextBox")
	TextBox.BackgroundTransparency = 1
	TextBox.Size = udim2(0, 0, 0, 0)
	TextBox.Position = udim2(-1, 0, -1, 0)
	TextBox.Text = ""
	TextBox.ShowNativeInput = false
	TextBox.MultiLine = true
	TextBox.ClearTextOnFocus = true

	local Caret = newInst("Frame")
	Caret.Name = "Caret"
	Caret.BorderSizePixel = 0
	Caret.BackgroundColor3 = Themes[Options.Theme].Text
	ThemeSet(Caret, "BackgroundColor3", "Text")
	Caret.Size = udim2(0, 2, 0, CharHeight)
	Caret.Position = udim2(0, 0, 0, 0)
	Caret.ZIndex = 100
	Caret.Visible = false

	local selectedword
	local tokens = {}

	local function NewToken(Content, Color, Position, Parent)
		local Token = newInst("TextLabel")
		Token.BorderSizePixel = 0
		Token.TextColor3 = Themes[Options.Theme][Color]
		Token.BackgroundTransparency = (Content == selectedword) and 0 or 1
		Token.BackgroundColor3 = Themes[Options.Theme].SelectionGentle
		Token.Size = udim2(0, CharWidth * #Content, 0, CharHeight)
		Token.Position = udim2(0, Position.X * CharWidth, 0, Position.Y * CharHeight)
		Token.Font = Options.Font
		Token.TextSize = Options.FontSize
		Token.Text = Content
		Token.TextXAlignment = "Left"
		Token.ZIndex = baseZIndex
		Token.Parent = Parent
		tokens[#tokens + 1] = Token
	end

	local function updateselected()
		for _, v in ipairs(tokens) do
			v.BackgroundTransparency = (v.Text == selectedword) and 0 or 1
		end
		markers = {}
		if selectedword and selectedword ~= "" and selectedword ~= tab then
			for LineNumber = 1, #Editor.Lines do
				local line = Editor.Lines[LineNumber]
				local Dnable = "[^A-Za-z0-9_]"
				local has = false
				if sub(line, 1, #selectedword) == selectedword then
					has = true
				elseif sub(line, #line - #selectedword + 1) == selectedword then
					has = true
				elseif match(line, Dnable .. gsub(selectedword, "%W", "%%%1") .. Dnable) then
					has = true
				end
				if has then
					markers[#markers + 1] = LineNumber - 1
				end
			end
		end
		updateMarkers()
	end
	local DrawnLines = {}
	local depth, sdepth = {}, {}
	local function DrawTokens()
		local LineBegin = floor(TextArea.CanvasPosition.Y / CharHeight)
		local LineEnd = ceil((TextArea.CanvasPosition.Y + TextArea.AbsoluteWindowSize.Y) / CharHeight)
		LineEnd = min(LineEnd, #Editor.Lines)
		for LineNumber = 1, LineBegin - 1 do
			if not depth[LineNumber] then
				local line = Editor.Lines[LineNumber] or ""
				if match(line, "%[%=+%[") or match(line, "%]%=+%]") then
					local LexerStream = Lexer(line)
					LexerStream.CommentDepth = depth[LineNumber - 1] or 0
					LexerStream.StringDepth = sdepth[LineNumber - 1] or 0
					while not LexerStream.EOF() do
						LexerStream.Next()
					end
					sdepth[LineNumber] = LexerStream.StringDepth
					depth[LineNumber] = LexerStream.CommentDepth
				else
					sdepth[LineNumber] = sdepth[LineNumber - 1] or 0
					depth[LineNumber] = depth[LineNumber - 1] or 0
				end
			end
		end
		for LineNumber = LineBegin, LineEnd do
			if not DrawnLines[LineNumber] then
				DrawnLines[LineNumber] = true
				local X, Y = 0, LineNumber - 1
				local LineLabel = newInst("TextLabel")
				LineLabel.BorderSizePixel = 0
				LineLabel.TextColor3 = Color3_fromRGB(144, 145, 139)
				LineLabel.BackgroundTransparency = 1
				LineLabel.Size = udim2(1, 0, 0, CharHeight)
				LineLabel.Position = udim2(0, 0, 0, Y * CharHeight)
				LineLabel.Font = Options.Font
				LineLabel.TextSize = Options.FontSize
				LineLabel.TextXAlignment = Enum.TextXAlignment.Right
				LineLabel.Text = LineNumber
				LineLabel.Parent = Gutter
				LineLabel.ZIndex = baseZIndex
				if Editor.Lines[Y + 1] then
					local LexerStream = Lexer(Editor.Lines[Y + 1])
					LexerStream.CommentDepth = depth[LineNumber - 1] or 0
					LexerStream.StringDepth = sdepth[LineNumber - 1] or 0
					while not LexerStream.EOF() do
						local Token = LexerStream.Next()
						local Value = Token.Value
						local TokenType = Token.TypeName
						if find(" \t\r\n", Value, 1, true) == nil then
							NewToken(gsub(Value, tab, TabText), (TokenType == "Identifier" or TokenType == "Symbol") and "Text" or TokenType, Place.new(X, Y), Tokens)
						end
						X += #gsub(Value, tab, TabText)
					end
					depth[LineNumber] = LexerStream.CommentDepth
					sdepth[LineNumber] = LexerStream.StringDepth
				end
			end
		end
	end
	TextArea.Changed:Connect(function(Property)
		if Property == "CanvasPosition" or Property == "AbsoluteWindowSize" then
			DrawTokens()
		end
	end)
	local function ClearTokensAndSelection()
		depth = {}
		Tokens:ClearAllChildren()
		Selection:ClearAllChildren()
		Gutter:ClearAllChildren()
	end
	local function Write(Content, Start, End)
		local InBetween = sub(Editor.Content, Start + 1, End)
		local NoLN = find(InBetween, newline, 1, true) == nil and find(Content, newline, 1, true) == nil
		local StartPlace, EndPlace
		if NoLN then
			StartPlace, EndPlace = Place.fromIndex(Editor, Start), Place.fromIndex(Editor, End)
		end
		Editor.Content = sub(Editor.Content, 1, Start) .. Content .. sub(Editor.Content, End + 1)
		ContentChangedEvent:Fire(Editor.Content)
		Editor.PlaceCache = {}
		local CanvasWidth = TextArea.CanvasSize.X.Offset - 14
		Editor.Lines = Split(Editor.Content, newline)
		for _, Res in ipairs(Editor.Lines) do
			local width = #gsub(Res, tab, TabText) * CharWidth
			if CanvasWidth < width then
				CanvasWidth = width
			end
		end

		ClearTokensAndSelection()
		TextArea.CanvasSize = udim2(0, 3000, 0, select(2, gsub(Editor.Content, newline, "")) * CharHeight + TextArea.AbsoluteWindowSize.Y)
		DrawnLines = {}
		DrawTokens()
	end
	local function SetContent(Content)
		Editor.Content = Content
		ContentChangedEvent:Fire(Editor.Content)
		Editor.PlaceCache = {}
		Editor.Lines = Split(Editor.Content, newline)
		ClearTokensAndSelection()
		local CanvasWidth = TextArea.CanvasSize.X.Offset - 14
		for _, Res in ipairs(Editor.Lines) do
			if CanvasWidth < #Res then
				CanvasWidth = #Res * CharWidth
			end
		end
		TextArea.CanvasSize = udim2(0, 3000, 0, select(2, gsub(Editor.Content, newline, "")) * CharHeight + TextArea.AbsoluteWindowSize.Y)
		DrawnLines = {}
		DrawTokens()
	end
	local function UpdateSelection()
		Selection:ClearAllChildren()
		Selection.ZIndex = (Themes[Options.Theme].SelectionColor) and 2 or 1 + baseZIndex
		Tokens.ZIndex = (Themes[Options.Theme].SelectionColor) and 1 or 2 + baseZIndex
		if Editor.Selection.Start == Editor.Selection.End then
			LineSelection.Visible = true
			local CaretPlace = Place.fromIndex(Editor, Editor.Selection.Start)
			LineSelection.Position = udim2(0, 2, 0, CharHeight * CaretPlace.Y + 2)
		else
			LineSelection.Visible = false
		end
		local Index = 0
		local Start = #gsub(sub(Editor.Content, 1, Editor.Selection.Start), tab, TabText)
		local End = #gsub(sub(Editor.Content, 1, Editor.Selection.End), tab, TabText)
		for LineNumber, Line in ipairs(Editor.Lines) do
			Line = gsub(Line, tab, TabText)
			local StartX = Start - Index
			local EndX = End - Index
			local Y = LineNumber - 1
			local GoesOverLine = false
			if StartX < 0 then
				StartX = 0
			end
			if EndX > #Line then
				GoesOverLine = true
				EndX = #Line
			end
			local Width = EndX - StartX
			if GoesOverLine then
				Width += .5
			end
			if Width > 0 then
				local color = Themes[Options.Theme].SelectionColor
				local SelectionSegment = newInst(color and "TextLabel" or "Frame")
				SelectionSegment.BorderSizePixel = 0
				if color then
					SelectionSegment.TextColor3 = color
					SelectionSegment.Font = Options.Font
					SelectionSegment.TextSize = Options.FontSize
					SelectionSegment.Text = sub(Line, StartX + 1, EndX)
					SelectionSegment.TextXAlignment = "Left"
					SelectionSegment.ZIndex = baseZIndex
				end
				SelectionSegment.BackgroundColor3 = Themes[Options.Theme].SelectionBackground
				SelectionSegment.Size = udim2(0, CharWidth * Width, 0, CharHeight)
				SelectionSegment.Position = udim2(0, StartX * CharWidth, 0, Y * CharHeight)
				SelectionSegment.Parent = Selection
			end
			Index += #Line + 1
		end
		local NewY = Caret.Position.Y.Offset
		local MinBoundsY = TextArea.CanvasPosition.Y
		local MaxBoundsY = TextArea.CanvasPosition.Y + TextArea.AbsoluteWindowSize.Y - CharHeight
		if NewY < MinBoundsY then
			TextArea.CanvasPosition = Vector2_new(0, NewY)
		end
		if NewY > MaxBoundsY then
			TextArea.CanvasPosition = Vector2_new(0, NewY - TextArea.AbsoluteWindowSize.Y + CharHeight)
		end
	end
	TextBox.Parent = TextArea
	Caret.Parent = TextArea
	TextArea.Parent = Container
	Gutter.Parent = Container
	Container.Parent = Frame
	local function updateCaret(CaretPlace)
		Caret.Position = udim2(0, CaretPlace.X * CharWidth, 0, CaretPlace.Y * CharHeight)
		local percent = CaretPlace.Y * CharHeight / TextArea.CanvasSize.Y.Offset
		CaretIndicator.Position = udim2(0, 0, percent, -1)
	end
	local PressedKey, WorkingKey, LeftShift, RightShift, Shift, LeftCtrl, RightCtrl, Ctrl
	local MovementTimeout = tick()
	local BeginSelect, MoveCaret
	local function SetVisibility(Visible)
		Editor.Visible = Visible
	end
	local function selectWord()
		local Index = (Editor.Selection.Side == Side.Right) and Editor.Selection.End or Editor.Selection.Start
		local code = Editor.Content
		local left = max(Index - 1, 0)
		local right = min(Index + 1, #code)
		local Dable = "[A-Za-z0-9_]"
		while left ~= 0 and match(sub(code, left + 1, left + 1), Dable) do
			left -= 1
		end
		while right ~= #code and match(sub(code, right, right), Dable) do
			right += 1
		end
		if not match(sub(code, left + 1, left + 1), Dable) then
			left += 1
		end
		if not match(sub(code, right, right), Dable) then
			right -= 1
		end
		if left < right then
			Editor.Selection.Start = left
			Editor.Selection.End = right
		else
			Editor.Selection.Start = Index
			Editor.Selection.End = Index
		end
	end
	local settledAt
	local lastClick, lastCaretPos = 0, 0
	local function PushToUndoStack()
		Editor.UndoStack[#Editor.UndoStack + 1] = {
			Content = Editor.Content,
			Selection = {
				Start = Editor.Selection.Start,
				End = Editor.Selection.End,
				Side = Editor.Selection.Side
			},
			LastKeyCode = false
		}
		if #Editor.RedoStack > 0 then
			Editor.RedoStack = {}
		end
	end
	local function Undo()
		if #Editor.UndoStack > 1 then
			local Thing = Editor.UndoStack[#Editor.UndoStack - 1]
			for Key, Value in next, Thing do
				Editor[Key] = Value
			end
			Editor.SetContent(Thing.Content)
			Editor.RedoStack[#Editor.RedoStack + 1] = Editor.UndoStack[#Editor.UndoStack]
			Editor.UndoStack[#Editor.UndoStack] = nil
		end
	end
	local function Redo()
		if #Editor.RedoStack > 0 then
			local Thing = Editor.RedoStack[#Editor.RedoStack]
			for Key, Value in next, Thing do
				Editor[Key] = Value
			end
			Editor.SetContent(Thing.Content)
			Editor.UndoStack[#Editor.UndoStack + 1] = Thing
			Editor.RedoStack[#Editor.RedoStack] = nil
		end
	end
	PlayerMouse.Move:Connect(function()
		if BeginSelect then
			local Index = GetIndexAtMouse()
			if type(BeginSelect) == "number" then
				BeginSelect = {BeginSelect, BeginSelect}
			end
			Editor.Selection.Start = min(BeginSelect[1], Index)
			Editor.Selection.End = max(BeginSelect[2], Index)
			if Editor.Selection.Start ~= Editor.Selection.End then
				if Editor.Selection.Start == Index then
					Editor.Selection.Side = Side.Left
				else
					Editor.Selection.Side = Side.Right
				end
			end
			if BeginSelect[3] then
				selectWord()
				Editor.Selection.Start = min(BeginSelect[1], Editor.Selection.Start)
				Editor.Selection.End = max(BeginSelect[2], Editor.Selection.End)
			end
			local Ind = Editor.Selection.Start
			if Editor.Selection.Side == Side.Right then
				Ind = Editor.Selection.End
			end
			local CaretPlace = Place.fromIndex(Editor, Ind)
			updateCaret(CaretPlace)
			UpdateSelection()
		end
	end)
	TextBox.Focused:Connect(function()
		Editor.Focused = true
	end)
	TextBox.FocusLost:Connect(function()
		Editor.Focused = false
		FocusLostEvent:Fire()
		PressedKey = nil
		WorkingKey = nil
	end)
	function MoveCaret(Amount)
		local Direction = Amount < 0 and -1 or 1
		if Amount < 0 then
			Amount = -Amount
		end
		for Index = 1, Amount do
			if Direction == -1 then
				local Start = Editor.Selection.Start
				local End = Editor.Selection.End
				if Shift then
					if Start == End then
						if Start > 0 then
							Editor.Selection.Start = Start - 1
							Editor.Selection.Side = Side.Left
						end
					elseif Editor.Selection.Side == Side.Left then
						if Start > 0 then
							Editor.Selection.Start = Start - 1
						end
					elseif Editor.Selection.Side == Side.Right then
						Editor.Selection.End = End - 1
					end
				elseif Start ~= End then
					Editor.Selection.End = Start
				elseif Start > 0 then
					Editor.Selection.Start = Start - 1
					Editor.Selection.End = End - 1
				end
			elseif Direction == 1 then
				local Start = Editor.Selection.Start
				local End = Editor.Selection.End
				if Shift then
					if Start == End then
						if Start < #Editor.Content then
							Editor.Selection.End = End + 1
							Editor.Selection.Side = Side.Right
						end
					elseif Editor.Selection.Side == Side.Left then
						Editor.Selection.Start = Start + 1
					elseif Editor.Selection.Side == Side.Right and End < #Editor.Content then
						Editor.Selection.End = End + 1
					end
				elseif Start ~= End then
					Editor.Selection.Start = End
				elseif Start < #Editor.Content then
					Editor.Selection.Start = Start + 1
					Editor.Selection.End = End + 1
				end
			end
		end
	end
	local LastKeyCode
	local function ProcessInput(Type, Data)
		MovementTimeout = tick() + .25
		if Type == "Control+Key" then
			LastKeyCode = nil
		elseif Type == "KeyPress" then
			local Dat = Data
			if Dat == Enum.KeyCode.Up then
				Dat = Enum.KeyCode.Down
			end
			if LastKeyCode ~= Dat then
				Editor.StartingSelection.Start = Editor.Selection.Start
				Editor.StartingSelection.End = Editor.Selection.End
				Editor.StartingSelection.Side = Editor.Selection.Side
			end
			LastKeyCode = Dat
		elseif Type == "StringInput" then
			local Start = Editor.Selection.Start
			local End = Editor.Selection.End
			if Data == newline then
				local CaretPlaceInd = Editor.Selection.Start
				if Editor.Selection.Side == Side.Right then
					CaretPlaceInd = Editor.Selection.End
				end
				local CaretPlace = Place.fromIndex(Editor, CaretPlaceInd)
				local CaretLine = Editor.Lines
				CaretLine = CaretLine[CaretPlace.Y + 1]
				CaretLine = sub(CaretLine, 1, CaretPlace.X)
				local TabAmount = 0
				while sub(CaretLine, TabAmount + 1, TabAmount + 1) == tab do
					TabAmount += 1
				end
				Data ..= rep(tab, TabAmount)
				local SpTabAmount = 0
				while sub(CaretLine, SpTabAmount + 1, SpTabAmount + 1) == " " do
					SpTabAmount += 1
				end
				Data ..= gsub(rep(" ", SpTabAmount), TabText, tab)
				Write(Data, Start, End)
				Editor.Selection.Start = Start + #Data
				Editor.Selection.End = Editor.Selection.Start
				PushToUndoStack()
			elseif Data == tab and Editor.Selection.Start ~= Editor.Selection.End then
				local lstart = Place.fromIndex(Editor, Editor.Selection.Start)
				local lend = Place.fromIndex(Editor, Editor.Selection.End)
				local changes = 0
				local change1 = 0
				for i = lstart.Y + 1, lend.Y + 1 do
					local line = Editor.Lines[i]
					local change = 0
					if Shift then
						if sub(line, 1, 1) == tab then
							line = sub(line, 2)
							change = -1
						end
					else
						line = tab .. line
						change = 1
					end
					changes += change
					if i == lstart.Y + 1 then
						change1 = change
					end
					Editor.Lines[i] = line
				end
				SetContent(table_concat(Editor.Lines, newline))
				Editor.Selection.Start += change1
				Editor.Selection.End += changes
				PushToUndoStack()
			else
				Write(Data, Start, End)
				Editor.Selection.Start = Start + #Data
				Editor.Selection.End = Editor.Selection.Start
				PushToUndoStack()
			end
		end
		local CaretPlaceInd = (Editor.Selection.Side == Side.Right) and Editor.Selection.End or Editor.Selection.Start
		local CaretPlace = Place.fromIndex(Editor, CaretPlaceInd)
		updateCaret(CaretPlace)
		UpdateSelection()
	end
	TextBox:GetPropertyChangedSignal("Text"):Connect(function()
		if TextBox.Text ~= "" then
			ProcessInput("StringInput", (gsub(TextBox.Text, "\r", "")))
			TextBox.Text = ""
		end
	end)
	UserInputService.InputBegan:Connect(function(Input)
		if UserInputService:GetFocusedTextBox() == TextBox and Input.UserInputType ~= Enum.UserInputType.MouseButton1 then
			local KeyCode = Input.KeyCode
			if KeyCode == Enum.KeyCode.LeftShift then
				LeftShift = true
				Shift = true
			elseif KeyCode == Enum.KeyCode.RightShift then
				RightShift = true
				Shift = true
			elseif KeyCode == Enum.KeyCode.LeftControl then
				LeftCtrl = true
				Ctrl = true
			elseif KeyCode == Enum.KeyCode.RightControl then
				RightCtrl = true
				Ctrl = true
			else
				PressedKey = KeyCode
				ProcessInput(not (not Ctrl or Shift) and "Control+Key" or "KeyPress", KeyCode)
				local UniqueID = newproxy()
				WorkingKey = UniqueID
				wait(.25)
				if WorkingKey == UniqueID then
					WorkingKey = true
				end
			end
		end
	end)
	UserInputService.InputEnded:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 then
			BeginSelect = nil
		end
		if Input.KeyCode == Enum.KeyCode.LeftShift then
			LeftShift = false
		end
		if Input.KeyCode == Enum.KeyCode.RightShift then
			RightShift = false
		end
		if Input.KeyCode == Enum.KeyCode.LeftControl then
			LeftCtrl = false
		end
		if Input.KeyCode == Enum.KeyCode.RightControl then
			RightCtrl = false
		end
		Shift = LeftShift or RightShift
		Ctrl = LeftCtrl or RightCtrl
		if PressedKey == Input.KeyCode then
			PressedKey = nil
			WorkingKey = nil
		end
	end)
	local Count = 0
	Heartbeat:Connect(function()
		if Count == 0 and WorkingKey == true then
			ProcessInput(not (not Ctrl or Shift) and "Control+Key" or "KeyPress", PressedKey)
		end
		Count = (Count + 1) % 2
	end)
	Editor.Write = Write
	Editor.SetContent = SetContent
	Editor.SetVisibility = SetVisibility
	Editor.PushToUndoStack = PushToUndoStack
	Editor.Undo = Undo
	Editor.Redo = Redo
	function Editor.UpdateTheme(theme)
		for obj, v in next, themestuff do
			for key, value in next, v do
				obj[key] = Themes[theme][value]
			end
		end
		Options.Theme = theme
		ClearTokensAndSelection()
		updateMarkers()
	end
	function Editor.HighlightError(Visible, Line, Msg)
		if Visible then
			ErrorHighlighter.Position = udim2(0, 2, 0, CharHeight * Line + 2 - CharHeight)
			ErrorMessage.Text = "Line " .. Line .. " - " .. Msg
			ErrorMessage.Size = udim2(0, ErrorMessage.TextBounds.X + 15, 0, ErrorMessage.TextBounds.Y + 8)
		else
			ErrorMessage.Visible = false
		end
		ErrorHighlighter.Visible = Visible
	end
	Editor.ContentChanged = ContentChangedEvent.Event
	Editor.FocusLost = FocusLostEvent.Event
	TextArea.CanvasPosition = Vector2_new(0, 0)
	return Editor, TextBox, ClearTokensAndSelection, TextArea
end

local ScriptEditor, EditorGrid, Clear, TxtArea = EditorLib.Initialize(editor:FindFirstChild("Editor"), {
	Font = Enum.Font.Code,
	TextSize = 16,
	Language = "Luau",
	CaretBlinkingRate = .5
})

local function openScript(o)
	EditorGrid.Text = ""

	local Triggers = {'--This script could not be decompiled due to it having no bytecode', '"--This script could not be decompiled due to it having no bytecode"'}

	local id = o:GetDebugId()

	if cache[id] then
		ScriptEditor.SetContent(cache[id])
	else
		local decompiled = decompile(o)
		if find(decompiled, Triggers[1]) and not find(decompiled, Triggers[2]) then
			if #o.Source > 0 then
				decompiled = format("-- Script GUID: %s\n\n%s\n", tostring(gethiddenproperty(o,"ScriptGuid")) or "{Exploit generated script}", o.Source)
			elseif #o.Source <= 0 then
				decompiled = "-- Synapse X Dex Decompiler\n-- This script has no bytecode and no source.\n-- It can not be viewed."
			end
		elseif #decompiled <= 0 then
			decompiled = format("-- Script GUID: %s\n-- Synapse X Dex Decompiler\n-- Decompiler returned nothing, script has no bytecode or has anti-decompiler implemented.", tostring(gethiddenproperty(o,"ScriptGuid")))
		else
			decompiled = format("-- Script GUID: %s\n%s", tostring(gethiddenproperty(o,"ScriptGuid")), decompiled)
		end
		cache[id] = decompiled
		Heartbeat:Wait()
		ScriptEditor.SetContent(cache[id])
	end

	Title.Text = "[Script Viewer] Viewing: " .. o.Name
end

OpenScript_Bindable.Event:Connect(function(object)
	script.Parent.Visible = true
	openScript(object)
end)

SaveScript.Activated:Connect(function()
	if ScriptEditor.Content ~= "" then
		local fileName = FileName.Text
		if fileName == "File Name" or FileName == "" then
			fileName = "LocalScript_" .. random(1, 5000)
		end
		fileName ..= ".lua"
		writefile(fileName, ScriptEditor.Content)
	end
end)

CopyScript.Activated:Connect(function()
	setclipboard(ScriptEditor.Content)
end)

ClearScript.Activated:Connect(function()
	ScriptEditor.SetContent("")
	TxtArea.CanvasPosition = Vector2_new(0, 0)
	Title.Text = "[Script Viewer]"
	Clear()
end)

CloseEditor.Activated:Connect(function()
	script.Parent.Visible = false
end)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBXA841DAF4167B4EE3B76D924C1B15BCFD">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.156862751</R>
						<G>0.156862751</G>
						<B>0.156862751</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Editor</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>25</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>642</XO>
						<YS>0</YS>
						<YO>436</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBX5BF11EE89D53466F84FBA8967CCE0907">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.117647067</R>
						<G>0.117647067</G>
						<B>0.117647067</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">TopBar</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBX29FB4898CE2C41E0B13149B41ED7B42A">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">10</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">title</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">[Script Viewer]</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">16</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBX4751C3B358554FD8B9416CFB8DD43CB5">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">16</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Close</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>1</XS>
							<XO>-25</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>25</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">X</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">20</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="Frame" referent="RBX6E4296F8B8A04E178226C7F45CCC8BCB">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.137254909</R>
							<G>0.137254909</G>
							<B>0.137254909</B>
						</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<int name="LayoutOrder">0</int>
						<string name="Name">Other</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<bool name="Visible">true</bool>
						<int name="ZIndex">2</int>
					</Properties>
					<Item class="TextBox" referent="RBXF944449DCC884210BF03274555037D2D">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.0980392247</R>
								<G>0.0980392247</G>
								<B>0.0980392247</B>
							</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClearTextOnFocus">true</bool>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">10</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="MultiLine">false</bool>
							<string name="Name">FileName</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<Color3 name="PlaceholderColor3">
								<R>0.699999988</R>
								<G>0.699999988</G>
								<B>0.699999988</B>
							</Color3>
							<string name="PlaceholderText"></string>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<bool name="ShowNativeInput">true</bool>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>125</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">File Name</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextEditable">true</bool>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
					<Item class="UIListLayout" referent="RBX923668135BA04ED1B77D58BC1C29672D">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<token name="FillDirection">0</token>
							<token name="HorizontalAlignment">1</token>
							<string name="Name">UIListLayout</string>
							<UDim name="Padding">
								<S>0</S>
								<O>0</O>
							</UDim>
							<token name="SortOrder">2</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<token name="VerticalAlignment">1</token>
						</Properties>
					</Item>
					<Item class="TextButton" referent="RBXED6C59C0A74F4ED1923653C12A657287">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">true</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">10</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">SaveScript</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>125</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Save Script</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
					<Item class="TextButton" referent="RBXE0AFCD2692884403828F746FE7977A71">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">true</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">10</token>
							<int name="LayoutOrder">2</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">CopyScript</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>150</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Copy To Clipboard</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
					<Item class="TextButton" referent="RBX82A1B53E1D634F648EFA5DE9AC683DB8">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">true</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.176470593</R>
								<G>0.176470593</G>
								<B>0.176470593</B>
							</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">10</token>
							<int name="LayoutOrder">2</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<bool name="Modal">false</bool>
							<string name="Name">ClearScript</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>125</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Clear Editor</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">2</int>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="BindableEvent" referent="RBXC7DD16F2E5294F8B9794B6ED0642F51B">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">OpenScript</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Frame" referent="RBX44D8D713051B49C5BF0B2B8EE14009C2">
			<Properties>
				<bool name="Active">false</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.145098045</R>
					<G>0.145098045</G>
					<B>0.164705887</B>
				</Color3>
				<float name="BackgroundTransparency">0.100000001</float>
				<Color3 name="BorderColor3">
					<R>0.0784313753</R>
					<G>0</G>
					<B>0.0784313753</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">false</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">SettingsPanel</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>0</XO>
					<YS>0</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>300</XO>
					<YS>1</YS>
					<YO>0</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">true</bool>
				<int name="ZIndex">1</int>
			</Properties>
			<Item class="Frame" referent="RBX77257C7EFD75431F8DBC01E87F6F0072">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.0784313753</R>
						<G>0.0784313753</G>
						<B>0.0784313753</B>
					</Color3>
					<float name="BackgroundTransparency">0</float>
					<Color3 name="BorderColor3">
						<R>0.0784313753</R>
						<G>0.0784313753</G>
						<B>0.0784313753</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Header</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>17</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBX3A3B2DD938BC4CA093506E4B5F72A9B2">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.639215708</R>
							<G>0.635294139</G>
							<B>0.647058845</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">16</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">TextLabel</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>4</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>-4</XO>
							<YS>1</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Settings</string>
						<Color3 name="TextColor3">
							<R>0.980392158</R>
							<G>0.980392158</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="Frame" referent="RBX730E1FFE9DD646348321D0D2024F0737">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">SettingTemplate</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>18</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>60</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">false</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextLabel" referent="RBXD726B00409464A0983EF8B58EB1AE7D8">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">16</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">SName</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>10</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>-20</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">SettingName</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextLabel" referent="RBXB7AF1ABA2401482BBB5BE97A081BBA83">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Status</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>60</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>50</XO>
							<YS>0</YS>
							<YO>15</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Off</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">0.75</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBXA4D0D5D80E0442948C65596DE76E3BFD">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.862745166</R>
							<G>0.862745166</G>
							<B>0.862745166</B>
						</Color3>
						<float name="BackgroundTransparency">0</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">0</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Change</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>10</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>40</XO>
							<YS>0</YS>
							<YO>15</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBXC5EA86A0DB384E3EAA714EC4DA1966C6">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0</R>
								<G>0.576470613</G>
								<B>0.862745166</B>
							</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">OnBar</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>15</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="UICorner" referent="RBX8F18552A6EAF41B79BD6F36FC28ADA53">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<UDim name="CornerRadius">
									<S>0</S>
									<O>10</O>
								</UDim>
								<string name="Name"></string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
					</Item>
					<Item class="TextLabel" referent="RBX10D2D0C446A54C96A2D4B9D5B958C759">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="BackgroundTransparency">0</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">true</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">Bar</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>-2</XO>
								<YS>0</YS>
								<YO>-2</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>10</XO>
								<YS>0</YS>
								<YO>19</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="UICorner" referent="RBX0CD39F830B544F2DB8BADC2B23506EC7">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<UDim name="CornerRadius">
									<S>0</S>
									<O>10</O>
								</UDim>
								<string name="Name"></string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
					</Item>
					<Item class="UICorner" referent="RBX6C3BFCD221954D3F9A8CCA15191E8970">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>10</O>
							</UDim>
							<string name="Name"></string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="Frame" referent="RBX1962BC77FB6D46ADA3B3575236F7A3B9">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.0784313753</R>
						<G>0.0784313753</G>
						<B>0.0784313753</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">SettingList</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>17</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>-17</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX73CC9D0CD27F429EBCD799240B81E3FD">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetSetting</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBXE667F0DA0AA54B629B8C5980C76CBDED">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Bindables</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="BindableFunction" referent="RBX0C62CFFB4DF74CD9B1DD9407B3CD41E7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetOption</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX47A7F25B28804873B382254B4DA313B1">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetPrint</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX92F3465D9E3042E9A7E0CBEC11F31433">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetSelection</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBXEE0B79469989480584E60086EAB41BBD">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SetOption</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX98816EA15549415FAC419D6AD43AD5BF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SetSelection</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableEvent" referent="RBXB8005C3714C74B30B73E23D4701E55EC">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SelectionChanged</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBXF81A25B0B21F4075A9AE4D7F49E22A17">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetApi</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBXA27B7DD1B3EC4B8E82CD20B02A4AB305">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetAwaiting</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableEvent" referent="RBX6098C2B53E49439CACB7874E57D0B5B8">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">SetAwaiting</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="BindableFunction" referent="RBX9F9A6ACCF9A84C758AEDFDA7C6FC1F9B">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetSpecials</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Frame" referent="RBXBC8DE949754B4FC7A15B0C3A7B1B97D7">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.145098045</R>
					<G>0.145098045</G>
					<B>0.164705887</B>
				</Color3>
				<float name="BackgroundTransparency">0.100000001</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">true</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">About</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>1</XS>
					<XO>0</XO>
					<YS>0</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>300</XO>
					<YS>1</YS>
					<YO>0</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">true</bool>
				<int name="ZIndex">2</int>
			</Properties>
			<Item class="TextLabel" referent="RBX8A9CD679961B42448E6689A828F8B836">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Creator</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>300</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>50</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text"><![CDATA[Created by: Moon
Edited by: wally, ic3, Yarios]]></string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">18</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="TextLabel" referent="RBX35CAB5074FAD4F43A5D6F6A46B493B74">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>150</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>60</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Dex | Beta</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">60</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="TextLabel" referent="RBX0836DD09FA4B46DEA970F5F7D98D5EE1">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Version</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>100</XO>
						<YS>0</YS>
						<YO>210</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>100</XO>
						<YS>0</YS>
						<YO>30</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Synapse Edition</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">28</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="TextLabel" referent="RBX9DCED468CF874A5BA145AB4C8A2D8838">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0.5</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">4</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">USID</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0.75</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">true</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>25</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">USID: 0_?????</string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">20</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">0.75</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">2</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
		</Item>
		<Item class="LocalScript" referent="RBX360EDEDBCBB545E28D7C3AE5F36D2032">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Selection</string>
				<string name="ScriptGuid">{C6CE4E00-3C31-43EA-8B5D-6C21B37E351E}</string>
				<ProtectedString name="Source">local Gui = script.Parent

local IntroFrame = Gui:WaitForChild(&quot;IntroFrame&quot;)

local SideMenu = Gui:WaitForChild(&quot;SideMenu&quot;)
local OpenToggleButton = Gui:WaitForChild(&quot;Toggle&quot;)
local CloseToggleButton = SideMenu:WaitForChild(&quot;Toggle&quot;)
local OpenScriptEditorButton = SideMenu:WaitForChild(&quot;OpenScriptEditor&quot;)

local ScriptEditor = Gui:WaitForChild(&quot;ScriptEditor&quot;)

local SlideOut = SideMenu:WaitForChild(&quot;SlideOut&quot;)
local SlideFrame = SlideOut:WaitForChild(&quot;SlideFrame&quot;)
local Slant = SideMenu:WaitForChild(&quot;Slant&quot;)

local ExplorerButton = SlideFrame:WaitForChild(&quot;Explorer&quot;)
local SettingsButton = SlideFrame:WaitForChild(&quot;Settings&quot;)

local SelectionBox = Instance.new(&quot;SelectionBox&quot;)
SelectionBox.Parent = Gui

local ExplorerPanel = Gui:WaitForChild(&quot;ExplorerPanel&quot;)
local PropertiesFrame = Gui:WaitForChild(&quot;PropertiesFrame&quot;)
local SaveMapWindow = Gui:WaitForChild(&quot;SaveMapWindow&quot;)
local RemoteDebugWindow = Gui:WaitForChild(&quot;RemoteDebugWindow&quot;)

local SettingsPanel = Gui:WaitForChild(&quot;SettingsPanel&quot;)
local AboutPanel = Gui:WaitForChild(&quot;About&quot;)
local SettingsListener = SettingsPanel:WaitForChild(&quot;GetSetting&quot;)
local SettingTemplate = SettingsPanel:WaitForChild(&quot;SettingTemplate&quot;)
local SettingList = SettingsPanel:WaitForChild(&quot;SettingList&quot;)

local SaveMapCopyList = SaveMapWindow:WaitForChild(&quot;CopyList&quot;)
local SaveMapSettingFrame = SaveMapWindow:WaitForChild(&quot;MapSettings&quot;)
local SaveMapName = SaveMapWindow:WaitForChild(&quot;FileName&quot;)
local SaveMapButton = SaveMapWindow:WaitForChild(&quot;Save&quot;)
local SaveMapCopyTemplate = SaveMapWindow:WaitForChild(&quot;Entry&quot;)
local SaveMapSettings = {
&#9;CopyWhat = {
&#9;&#9;Workspace = true,
&#9;&#9;Lighting = true,
&#9;&#9;ReplicatedStorage = true,
&#9;&#9;ReplicatedFirst = true,
&#9;&#9;StarterPack = true,
&#9;&#9;StarterGui = true,
&#9;&#9;StarterPlayer = true
&#9;},
&#9;SaveScripts = false,
&#9;SaveTerrain = true,
&#9;LightingProperties = true,
&#9;CameraInstances = true
}

--[[
local ClickSelectOption = SettingsPanel:WaitForChild(&quot;ClickSelect&quot;):WaitForChild(&quot;Change&quot;)
local SelectionBoxOption = SettingsPanel:WaitForChild(&quot;SelectionBox&quot;):WaitForChild(&quot;Change&quot;)
local ClearPropsOption = SettingsPanel:WaitForChild(&quot;ClearProperties&quot;):WaitForChild(&quot;Change&quot;)
local SelectUngroupedOption = SettingsPanel:WaitForChild(&quot;SelectUngrouped&quot;):WaitForChild(&quot;Change&quot;)
--]]

local function dexWriteFile(dest, cont, name, filter, ext)
&#9;if writefileas then
&#9;&#9;writefileas(cont, name, filter, ext)
&#9;&#9;return true
&#9;elseif writefile then
&#9;&#9;writefile(dest, cont)
&#9;&#9;return true
&#9;else
&#9;&#9;return false
&#9;end&#9;
end

local SaveInstance
local SaveInstance
do
&#9;local function fetchAPI()
&#9;local api
&#9;local s,e = pcall(function()
&#9;&#9;local version = game:HttpGet(&quot;http://setup.roblox.com/versionQTStudio&quot;,true)
&#9;&#9;local rawApi = game:HttpGet(&quot;http://setup.roblox.com/&quot;..version..&quot;-API-Dump.json&quot;,true)
&#9;&#9;api = game:GetService(&quot;HttpService&quot;):JSONDecode(rawApi)
&#9;end)
&#9;if not s then return end
&#9;local classes,enums = {},{}
&#9;
&#9;for _,class in pairs(api.Classes) do
&#9;&#9;local newClass = {}
&#9;&#9;newClass.Name = class.Name
&#9;&#9;newClass.Superclass = class.Superclass
&#9;&#9;newClass.Properties = {}
&#9;&#9;newClass.Functions = {}
&#9;&#9;newClass.Events = {}
&#9;&#9;newClass.Callbacks = {}
&#9;&#9;newClass.Tags = {}
&#9;&#9;
&#9;&#9;if class.Tags then for c,tag in pairs(class.Tags) do newClass.Tags[tag] = true end end
&#9;&#9;for __,member in pairs(class.Members) do
&#9;&#9;&#9;local mType = member.MemberType
&#9;&#9;&#9;if mType == &quot;Property&quot; then
&#9;&#9;&#9;&#9;local newProp = {}
&#9;&#9;&#9;&#9;newProp.Name = member.Name
&#9;&#9;&#9;&#9;newProp.Class = class.Name
&#9;&#9;&#9;&#9;newProp.ValueType = member.ValueType.Name
&#9;&#9;&#9;&#9;newProp.Category = member.Category
&#9;&#9;&#9;&#9;newProp.Serialization = member.Serialization
&#9;&#9;&#9;&#9;newProp.Tags = {}
&#9;&#9;&#9;&#9;if member.Tags then for c,tag in pairs(member.Tags) do newProp.Tags[tag] = true end end
&#9;&#9;&#9;&#9;table.insert(newClass.Properties,newProp)
&#9;&#9;&#9;elseif mType == &quot;Function&quot; then
&#9;&#9;&#9;&#9;local newFunc = {}
&#9;&#9;&#9;&#9;newFunc.Name = member.Name
&#9;&#9;&#9;&#9;newFunc.Class = class.Name
&#9;&#9;&#9;&#9;newFunc.Parameters = {}
&#9;&#9;&#9;&#9;newFunc.ReturnType = member.ReturnType.Name
&#9;&#9;&#9;&#9;newFunc.Tags = {}
&#9;&#9;&#9;&#9;for c,param in pairs(member.Parameters) do
&#9;&#9;&#9;&#9;&#9;table.insert(newFunc.Parameters,{Name = param.Name, Type = param.Type.Name})
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if member.Tags then for c,tag in pairs(member.Tags) do newFunc.Tags[tag] = true end end
&#9;&#9;&#9;&#9;table.insert(newClass.Functions,newFunc)
&#9;&#9;&#9;elseif mType == &quot;Event&quot; then
&#9;&#9;&#9;&#9;local newEvent = {}
&#9;&#9;&#9;&#9;newEvent.Name = member.Name
&#9;&#9;&#9;&#9;newEvent.Class = class.Name
&#9;&#9;&#9;&#9;newEvent.Parameters = {}
&#9;&#9;&#9;&#9;newEvent.Tags = {}
&#9;&#9;&#9;&#9;for c,param in pairs(member.Parameters) do
&#9;&#9;&#9;&#9;&#9;table.insert(newEvent.Parameters,{Name = param.Name, Type = param.Type.Name})
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;if member.Tags then for c,tag in pairs(member.Tags) do newEvent.Tags[tag] = true end end
&#9;&#9;&#9;&#9;table.insert(newClass.Events,newEvent)
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;classes[class.Name] = newClass
&#9;end
&#9;
&#9;for _,enum in pairs(api.Enums) do
&#9;&#9;local newEnum = {}
&#9;&#9;newEnum.Name = enum.Name
&#9;&#9;newEnum.Items = {}
&#9;&#9;newEnum.Tags = {}
&#9;&#9;
&#9;&#9;if enum.Tags then for c,tag in pairs(enum.Tags) do newEnum.Tags[tag] = true end end
&#9;&#9;for __,item in pairs(enum.Items) do
&#9;&#9;&#9;local newItem = {}
&#9;&#9;&#9;newItem.Name = item.Name
&#9;&#9;&#9;newItem.Value = item.Value
&#9;&#9;&#9;table.insert(newEnum.Items,newItem)
&#9;&#9;end
&#9;&#9;
&#9;&#9;enums[enum.Name] = newEnum
&#9;end
&#9;
&#9;local function getMember(class,member)
&#9;&#9;if not classes[class] or not classes[class][member] then return end
&#9;    local result = {}
&#9;
&#9;    local currentClass = classes[class]
&#9;    while currentClass do
&#9;        for _,entry in pairs(currentClass[member]) do
&#9;            table.insert(result,entry)
&#9;        end
&#9;        currentClass = classes[currentClass.Superclass]
&#9;    end
&#9;
&#9;    table.sort(result,function(a,b) return a.Name &lt; b.Name end)
&#9;    return result
&#9;end
&#9;
&#9;return {
&#9;&#9;Classes = classes,
&#9;&#9;Enums = enums,
&#9;&#9;GetMember = getMember
&#9;}
&#9;end
&#9;
&#9;-- Dex Serializer Module
&#9;local function SerializerModule()
&#9;-- Modules
&#9;local Serializer,API
&#9;
&#9;-- Un-init
&#9;local _writefile,_getnilinstances,oldIndex,classes,enums
&#9;
&#9;-- Rest
&#9;local t_ins,t_concat = table.insert,table.concat
&#9;local buffer = {}
&#9;local refCount = 0
&#9;local getChildren = Instance.new(&quot;Part&quot;).GetChildren
&#9;local toDecompile = {}
&#9;local saveFilter = {}
&#9;local instDir = {}
&#9;
&#9;local elyFuncs = false
&#9;
&#9;local xmlReplace = {
&#9;&#9;[&quot;&apos;&quot;] = &quot;&amp;apos;&quot;,
&#9;&#9;[&quot;\&quot;&quot;] = &quot;&amp;quot;&quot;,
&#9;&#9;[&quot;&lt;&quot;] = &quot;&amp;lt;&quot;,
&#9;&#9;[&quot;&gt;&quot;] = &quot;&amp;gt;&quot;,
&#9;&#9;[&quot;&amp;&quot;] = &quot;&amp;amp;&quot;
&#9;}
&#9;
&#9;local propBypass = {
&#9;&#9;[&quot;BasePart&quot;] = {
&#9;&#9;&#9;[&quot;Size&quot;] = true,
&#9;&#9;&#9;[&quot;Color&quot;] = true,
&#9;&#9;},
&#9;&#9;[&quot;Part&quot;] = {
&#9;&#9;&#9;[&quot;Shape&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;Fire&quot;] = {
&#9;&#9;&#9;[&quot;Heat&quot;] = true,
&#9;&#9;&#9;[&quot;Size&quot;] = true,
&#9;&#9;},
&#9;&#9;[&quot;Smoke&quot;] = {
&#9;&#9;&#9;[&quot;Opacity&quot;] = true,
&#9;&#9;&#9;[&quot;RiseVelocity&quot;] = true,
&#9;&#9;&#9;[&quot;Size&quot;] = true,
&#9;&#9;},
&#9;&#9;[&quot;DoubleConstrainedValue&quot;] = {
&#9;&#9;&#9;[&quot;Value&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;IntConstrainedValue&quot;] = {
&#9;&#9;&#9;[&quot;Value&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;TrussPart&quot;] = {
&#9;&#9;&#9;[&quot;Style&quot;] = true
&#9;&#9;}
&#9;}
&#9;
&#9;local propFilter = {
&#9;&#9;[&quot;BaseScript&quot;] = {
&#9;&#9;&#9;[&quot;LinkedSource&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;ModuleScript&quot;] = {
&#9;&#9;&#9;[&quot;LinkedSource&quot;] = true
&#9;&#9;},
&#9;&#9;[&quot;Players&quot;] = {
&#9;&#9;&#9;[&quot;CharacterAutoLoads&quot;] = true
&#9;&#9;}
&#9;}
&#9;
&#9;local sProps = setmetatable({},{__index = function(self,class)
&#9;&#9;local props = {}
&#9;&#9;
&#9;&#9;local apiProps = API.GetMember(class,&quot;Properties&quot;) or {}
&#9;&#9;for i,v in pairs(apiProps) do
&#9;&#9;&#9;if (v.Serialization.CanSave and not v.Tags.NotScriptable) or (propBypass[v.Class] and propBypass[v.Class][v.Name]) then
&#9;&#9;&#9;&#9;if not propFilter[v.Class] or not propFilter[v.Class][v.Name] then
&#9;&#9;&#9;&#9;&#9;local s,e = pcall(function() local exist = instDir[class][v.Name] end)
&#9;&#9;&#9;&#9;&#9;if s then table.insert(props,v) end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;self[class] = props
&#9;&#9;
&#9;&#9;return props
&#9;end})
&#9;
&#9;local testInsts = setmetatable({},{__index = function(self,class)
&#9;&#9;local s,testInst = pcall(function() return Instance.new(class) end)
&#9;&#9;local testInstTable = {}
&#9;&#9;
&#9;&#9;if testInst then
&#9;&#9;&#9;for i,v in pairs(sProps[class]) do
&#9;&#9;&#9;&#9;testInstTable[v.Name] = testInst[v.Name]
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;self[class] = testInstTable
&#9;&#9;
&#9;&#9;return testInstTable
&#9;end})
&#9;
&#9;local refMt = {__index = function(self,inst)
&#9;&#9;if not inst then return &quot;&quot; end
&#9;&#9;refCount = refCount + 1
&#9;&#9;self[inst] = refCount
&#9;&#9;return refCount
&#9;end}
&#9;local refs = setmetatable({},refMt)
&#9;
&#9;local valueHandlers = {
&#9;&#9;[&quot;bool&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;bool name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..tostring(val)..&apos;&lt;/bool&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;float&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;float name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val..&apos;&lt;/float&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;int&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;int name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val..&apos;&lt;/int&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;int64&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;int64 name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val..&apos;&lt;/int64&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;double&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;double name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val..&apos;&lt;/double&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;string&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;string name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val:gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)..&apos;&lt;/string&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;BrickColor&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;int name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..val.Number..&apos;&lt;/int&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Vector2&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Vector2 name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;X&gt;&apos;..val.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..val.Y..&apos;&lt;/Y&gt;\
&#9;&lt;/Vector2&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Vector3&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Vector3 name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;X&gt;&apos;..val.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..val.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..val.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/Vector3&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;CFrame&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,(&apos;\n&lt;CoordinateFrame name=&quot;&apos;..name..[[&quot;&gt;
&#9;&lt;X&gt;%f&lt;/X&gt;
&#9;&lt;Y&gt;%f&lt;/Y&gt;
&#9;&lt;Z&gt;%f&lt;/Z&gt;
&#9;&lt;R00&gt;%f&lt;/R00&gt;
&#9;&lt;R01&gt;%f&lt;/R01&gt;
&#9;&lt;R02&gt;%f&lt;/R02&gt;
&#9;&lt;R10&gt;%f&lt;/R10&gt;
&#9;&lt;R11&gt;%f&lt;/R11&gt;
&#9;&lt;R12&gt;%f&lt;/R12&gt;
&#9;&lt;R20&gt;%f&lt;/R20&gt;
&#9;&lt;R21&gt;%f&lt;/R21&gt;
&#9;&lt;R22&gt;%f&lt;/R22&gt;
&#9;&lt;/CoordinateFrame&gt;]]):format(val:components()))
&#9;&#9;end,
&#9;&#9;[&quot;Content&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Content name=&quot;&apos;..name..&apos;&quot;&gt;&lt;url&gt;&apos;..val:gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)..&apos;&lt;/url&gt;&lt;/Content&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;UDim&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;UDim name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;S&gt;&apos;..val.Scale..&apos;&lt;/S&gt;\
&#9;&lt;O&gt;&apos;..val.Offset..&apos;&lt;/O&gt;\
&#9;&lt;/UDim&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;UDim2&quot;] = function(name,val)
&#9;&#9;&#9;local x = val.X
&#9;&#9;&#9;local y = val.Y
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;UDim2 name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;XS&gt;&apos;..x.Scale..&apos;&lt;/XS&gt;\
&#9;&lt;XO&gt;&apos;..x.Offset..&apos;&lt;/XO&gt;\
&#9;&lt;YS&gt;&apos;..y.Scale..&apos;&lt;/YS&gt;\
&#9;&lt;YO&gt;&apos;..y.Offset..&apos;&lt;/YO&gt;\
&#9;&lt;/UDim2&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Color3&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Color3 name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;R&gt;&apos;..val.r..&apos;&lt;/R&gt;\
&#9;&lt;G&gt;&apos;..val.g..&apos;&lt;/G&gt;\
&#9;&lt;B&gt;&apos;..val.b..&apos;&lt;/B&gt;\
&#9;&lt;/Color3&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;NumberRange&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;NumberRange name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..tostring(val)..&apos;&lt;/NumberRange&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;NumberSequence&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;NumberSequence name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..tostring(val)..&apos;&lt;/NumberSequence&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;ColorSequence&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;ColorSequence name=&quot;&apos;..name..&apos;&quot;&gt;&apos;..tostring(val)..&apos;&lt;/ColorSequence&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Rect&quot;] = function(name,val)
&#9;&#9;&#9;local min,max = val.Min,val.Max
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Rect2D name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;min&gt;\
&#9;&lt;X&gt;&apos;..min.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..min.Y..&apos;&lt;/Y&gt;\
&#9;&lt;/min&gt;\
&#9;&lt;max&gt;\
&#9;&lt;X&gt;&apos;..max.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..max.Y..&apos;&lt;/Y&gt;\
&#9;&lt;/max&gt;\
&#9;&lt;/Rect2D&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Object&quot;] = function(name,val)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Ref name=&quot;&apos;..name..&apos;&quot;&gt;RBX&apos;..refs[val]..&apos;&lt;/Ref&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;PhysicalProperties&quot;] = function(name,val)
&#9;&#9;&#9;if val then
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;PhysicalProperties name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;CustomPhysics&gt;true&lt;/CustomPhysics&gt;\
&#9;&lt;Density&gt;&apos;..val.Density..&apos;&lt;/Density&gt;\
&#9;&lt;Friction&gt;&apos;..val.Friction..&apos;&lt;/Friction&gt;\
&#9;&lt;Elasticity&gt;&apos;..val.Elasticity..&apos;&lt;/Elasticity&gt;\
&#9;&lt;FrictionWeight&gt;&apos;..val.FrictionWeight..&apos;&lt;/FrictionWeight&gt;\
&#9;&lt;ElasticityWeight&gt;&apos;..val.ElasticityWeight..&apos;&lt;/ElasticityWeight&gt;\
&#9;&lt;/PhysicalProperties&gt;&apos;)
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;PhysicalProperties name=&quot;&apos;..name..&apos;&quot;&gt;\n&lt;CustomPhysics&gt;false&lt;/CustomPhysics&gt;\n&lt;/PhysicalProperties&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;Faces&quot;] = function(name,val)
&#9;&#9;&#9;local faceInt = (val.Front and 32 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Bottom and 16 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Left and 8 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Back and 4 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Top and 2 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Right and 1 or 0)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Faces name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;faces&gt;&apos;..faceInt..&apos;&lt;/faces&gt;\
&#9;&lt;/Faces&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Axes&quot;] = function(name,val)
&#9;&#9;&#9;local axisInt = (val.Z and 4 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.Y and 2 or 0)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;+(val.X and 1 or 0)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Axes name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;axes&gt;&apos;..axisInt..&apos;&lt;/axes&gt;\
&#9;&lt;/Faces&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Ray&quot;] = function(name,val)
&#9;&#9;&#9;local origin = val.Origin
&#9;&#9;&#9;local direction = val.Direction
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Ray name=&quot;&apos;..name..&apos;&quot;&gt;\
&#9;&lt;origin&gt;\
&#9;&lt;X&gt;&apos;..origin.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..origin.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..origin.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/origin&gt;\
&#9;&lt;direction&gt;\
&#9;&lt;X&gt;&apos;..direction.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..direction.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..direction.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/direction&gt;\
&#9;&lt;/Ray&gt;&apos;)
&#9;&#9;end,
&#9;}
&#9;
&#9;local function getNS(inst,name)
&#9;&#9;rfl_setscriptable(inst,name,true)
&#9;&#9;local propVal = oldIndex and oldIndex(inst,name) or inst[name]
&#9;&#9;rfl_setscriptable(inst,name,false)
&#9;&#9;return propVal
&#9;end
&#9;
&#9;local function getBS(inst,name)
&#9;&#9;local bs = getbspval(inst,name,true)
&#9;&#9;if bs then
&#9;&#9;&#9;return &quot;&lt;![CDATA[&quot;..bs..&quot;]]&gt;&quot;
&#9;&#9;else
&#9;&#9;&#9;return &quot;&quot;
&#9;&#9;end
&#9;end
&#9;
&#9;local specialInst = {
&#9;&#9;[&quot;UnionOperation&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then -- Assume all ely funcs defined
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Content name=&quot;AssetId&quot;&gt;&lt;url&gt;&apos;..getNS(inst,&quot;AssetId&quot;):gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)..&apos;&lt;/url&gt;&lt;/Content&gt;&apos;)
&#9;&#9;&#9;&#9;local initialSize = getNS(inst,&quot;InitialSize&quot;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Vector3 name=&quot;InitialSize&quot;&gt;\
&#9;&lt;X&gt;&apos;..initialSize.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..initialSize.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..initialSize.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/Vector3&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;ChildData&quot;&gt;&apos;..getBS(inst,&quot;ChildData&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;MeshData&quot;&gt;&apos;..getBS(inst,&quot;MeshData&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;PhysicsData&quot;&gt;&apos;..getBS(inst,&quot;PhysicsData&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;MeshPart&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then -- Assume all ely funcs defined
&#9;&#9;&#9;&#9;local initialSize = getNS(inst,&quot;InitialSize&quot;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Vector3 name=&quot;InitialSize&quot;&gt;\
&#9;&lt;X&gt;&apos;..initialSize.X..&apos;&lt;/X&gt;\
&#9;&lt;Y&gt;&apos;..initialSize.Y..&apos;&lt;/Y&gt;\
&#9;&lt;Z&gt;&apos;..initialSize.Z..&apos;&lt;/Z&gt;\
&#9;&lt;/Vector3&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;PhysicsData&quot;&gt;&apos;..getBS(inst,&quot;PhysicsData&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;Terrain&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;MaterialColors&quot;&gt;&apos;..getBS(inst,&quot;MaterialColors&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;SmoothGrid&quot;&gt;&apos;..getBS(inst,&quot;SmoothGrid&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;TerrainRegion&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;SmoothGrid&quot;&gt;&apos;..getBS(inst,&quot;SmoothGrid&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;BinaryStringValue&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;BinaryString name=&quot;Value&quot;&gt;&apos;..getBS(inst,&quot;Value&quot;)..&apos;&lt;/BinaryString&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;[&quot;Workspace&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;token name=&quot;AutoJointsMode&quot;&gt;&apos;..getNS(inst,&quot;AutoJointsMode&quot;).Value..&apos;&lt;/token&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;bool name=&quot;PGSPhysicsSolverEnabled&quot;&gt;&apos;..tostring(inst:PGSIsEnabled())..&apos;&lt;/bool&gt;&apos;)
&#9;&#9;&#9;local groupTable = {}
&#9;&#9;&#9;for i,v in pairs(game:GetService(&quot;PhysicsService&quot;):GetCollisionGroups()) do
&#9;&#9;&#9;&#9;t_ins(groupTable,v.name:gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)..&quot;^&quot;..v.id..&quot;^&quot;..v.mask)
&#9;&#9;&#9;end
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;string name=&quot;CollisionGroups&quot;&gt;&apos;..t_concat(groupTable,&quot;\\&quot;)..&apos;&lt;/string&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Humanoid&quot;] = function(inst)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;float name=&quot;Health_XML&quot;&gt;&apos;..inst.Health..&apos;&lt;/float&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;Sound&quot;] = function(inst)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;float name=&quot;xmlRead_MaxDistance_3&quot;&gt;&apos;..inst.MaxDistance..&apos;&lt;/float&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;WeldConstraint&quot;] = function(inst)
&#9;&#9;&#9;if elyFuncs then
&#9;&#9;&#9;&#9;valueHandlers[&quot;CFrame&quot;](&quot;CFrame0&quot;,getNS(inst,&quot;CFrame0&quot;))
&#9;&#9;&#9;&#9;valueHandlers[&quot;CFrame&quot;](&quot;CFrame1&quot;,getNS(inst,&quot;CFrame1&quot;))
&#9;&#9;&#9;end
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Ref name=&quot;Part0Internal&quot;&gt;RBX&apos;..refs[inst.Part0]..&apos;&lt;/Ref&gt;&apos;)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Ref name=&quot;Part1Internal&quot;&gt;RBX&apos;..refs[inst.Part1]..&apos;&lt;/Ref&gt;&apos;)
&#9;&#9;end,
&#9;&#9;[&quot;LocalScript&quot;] = function(inst)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;ProtectedString name=&quot;Source&quot;&gt;&apos;)
&#9;&#9;&#9;t_ins(buffer,&quot;&quot;)
&#9;&#9;&#9;t_ins(buffer,&apos;&lt;/ProtectedString&gt;&apos;)
&#9;&#9;&#9;t_ins(toDecompile,{inst,#buffer-1})
&#9;&#9;end,
&#9;&#9;[&quot;ModuleScript&quot;] = function(inst)
&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;ProtectedString name=&quot;Source&quot;&gt;&apos;)
&#9;&#9;&#9;t_ins(buffer,&quot;&quot;)
&#9;&#9;&#9;t_ins(buffer,&apos;&lt;/ProtectedString&gt;&apos;)
&#9;&#9;&#9;t_ins(toDecompile,{inst,#buffer-1})
&#9;&#9;end,
&#9;}
&#9;
&#9;local savePlaceBlacklist = {
&#9;&#9;[&quot;CoreGui&quot;] = true,
&#9;&#9;[&quot;CorePackages&quot;] = true
&#9;}
&#9;
&#9;local function writeXML(inst)
&#9;&#9;if saveFilter[inst] then return end
&#9;&#9;
&#9;&#9;local class = oldIndex and oldIndex(inst,&quot;ClassName&quot;) or inst.ClassName&#9;
&#9;&#9;if not instDir[class] then instDir[class] = inst end
&#9;&#9;local testInst = testInsts[class]
&#9;&#9;
&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;&apos;..class..&apos;&quot; referent=&quot;RBX&apos;..refs[inst]..&apos;&quot;&gt;\n&lt;Properties&gt;&apos;)
&#9;&#9;
&#9;&#9;for _,prop in pairs(sProps[class]) do
&#9;&#9;&#9;local propName = prop.Name
&#9;&#9;&#9;local propVal = oldIndex and oldIndex(inst,propName) or inst[propName]
&#9;&#9;&#9;if testInst[propName] ~= propVal then
&#9;&#9;&#9;&#9;local valueType = prop.ValueType
&#9;&#9;&#9;&#9;if valueHandlers[valueType] then
&#9;&#9;&#9;&#9;&#9;valueHandlers[valueType](propName,propVal)
&#9;&#9;&#9;&#9;elseif enums[valueType] then
&#9;&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;token name=&quot;&apos;..propName..&apos;&quot;&gt;&apos;..propVal.Value..&apos;&lt;/token&gt;&apos;)
&#9;&#9;&#9;&#9;elseif classes[valueType] then
&#9;&#9;&#9;&#9;&#9;valueHandlers[&quot;Object&quot;](propName,propVal)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;end
&#9;&#9;
&#9;&#9;if specialInst[class] then
&#9;&#9;&#9;specialInst[class](inst)
&#9;&#9;end
&#9;&#9;
&#9;&#9;t_ins(buffer,&quot;\n&lt;/Properties&gt;&quot;)
&#9;&#9;
&#9;&#9;for i,v in pairs(getChildren(inst)) do
&#9;&#9;&#9;writeXML(v)
&#9;&#9;end
&#9;&#9;
&#9;&#9;t_ins(buffer,&quot;\n&lt;/Item&gt;&quot;)
&#9;end
&#9;
&#9;local function resetState()
&#9;&#9;buffer = {}
&#9;&#9;refs = setmetatable({},refMt)
&#9;&#9;refCount = 0
&#9;&#9;toDecompile = {}
&#9;&#9;saveFilter = {}
&#9;&#9;instDir = {}
&#9;end
&#9;
&#9;local defaultSettings = {
&#9;&#9;DecompileMode = 0,
&#9;&#9;NilInstances = false,
&#9;&#9;RemovePlayers = true,
&#9;&#9;SavePlayerDescendants = false,
&#9;&#9;DecompileTimeout = 10,
&#9;&#9;UnluacMaxThreads = 5,
&#9;&#9;DecompileIgnore = {}
&#9;}
&#9;
&#9;Serializer = {
&#9;&#9;Init = function(data)
&#9;&#9;&#9;API = data.API
&#9;&#9;&#9;_writefile = data.WriteFile
&#9;&#9;&#9;_getnilinstances = data.GetNilInstances
&#9;&#9;&#9;oldIndex = data.OldIndex
&#9;&#9;&#9;
&#9;&#9;&#9;classes = API.Classes
&#9;&#9;&#9;enums = API.Enums
&#9;&#9;&#9;
&#9;&#9;&#9;elyFuncs = getbspval and rfl_setscriptable
&#9;&#9;&#9;
&#9;&#9;&#9;Serializer.ResetSettings()
&#9;&#9;end,
&#9;&#9;
&#9;&#9;Settings = {},
&#9;&#9;
&#9;&#9;ResetSettings = function()
&#9;&#9;&#9;Serializer.Settings = {}
&#9;&#9;&#9;for i,v in pairs(defaultSettings) do
&#9;&#9;&#9;&#9;Serializer.Settings[i] = v
&#9;&#9;&#9;end
&#9;&#9;end,
&#9;&#9;
&#9;&#9;SaveInstance = function(inst,name,sets)
&#9;&#9;&#9;Serializer.ResetSettings()
&#9;&#9;&#9;
&#9;&#9;&#9;for i,v in pairs(sets or {}) do
&#9;&#9;&#9;&#9;Serializer.Settings[i] = v
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;resetState()
&#9;&#9;&#9;
&#9;&#9;&#9;if inst == game and Serializer.Settings.RemovePlayers then
&#9;&#9;&#9;&#9;for i,v in pairs(game:GetService(&quot;Players&quot;):GetPlayers()) do
&#9;&#9;&#9;&#9;&#9;saveFilter[v.Character] = true
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;t_ins(buffer,[==[&lt;roblox xmlns:xmime=&quot;http://www.w3.org/2005/05/xmlmime&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;http://www.roblox.com/roblox.xsd&quot; version=&quot;4&quot;&gt;
&#9;&lt;Meta name=&quot;ExplicitAutoJoints&quot;&gt;true&lt;/Meta&gt;
&#9;&lt;External&gt;null&lt;/External&gt;
&#9;&lt;External&gt;nil&lt;/External&gt;]==])
&#9;&#9;&#9;
&#9;&#9;&#9;if inst ~= game then
&#9;&#9;&#9;&#9;if type(inst) == &quot;table&quot; then
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(inst) do
&#9;&#9;&#9;&#9;&#9;&#9;writeXML(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;writeXML(inst)
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;for i,v in pairs(game:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if not savePlaceBlacklist[v.ClassName] then
&#9;&#9;&#9;&#9;&#9;&#9;writeXML(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;if inst == game and Serializer.Settings.NilInstances and _getnilinstances then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;Folder&quot; referent=&quot;RBX&apos;..refs[Instance.new(&quot;Folder&quot;)]..&apos;&quot;&gt;\
&#9;&lt;Properties&gt;\
&#9;&lt;string name=&quot;Name&quot;&gt;Nil Instances&lt;/string&gt;\
&#9;&lt;/Properties&gt;&apos;)
&#9;&#9;&#9;&#9;for i,v in pairs(_getnilinstances()) do
&#9;&#9;&#9;&#9;&#9;if ((API.Classes[v.ClassName] and not API.Classes[v.ClassName].Tags.Service) or not API.Classes[v.ClassName]) and v ~= game then
&#9;&#9;&#9;&#9;&#9;&#9;writeXML(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;t_ins(buffer,&quot;\n&lt;/Item&gt;&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;if inst == game and Serializer.Settings.SavePlayerDescendants then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;Folder&quot; referent=&quot;RBX&apos;..refs[Instance.new(&quot;Folder&quot;)]..&apos;&quot;&gt;\
&#9;&lt;Properties&gt;\
&#9;&lt;string name=&quot;Name&quot;&gt;Player Descendants&lt;/string&gt;\
&#9;&lt;/Properties&gt;&apos;)
&#9;&#9;&#9;&#9;for i,v in pairs(game:GetService(&quot;Players&quot;).LocalPlayer:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;if v:IsA(&quot;PlayerGui&quot;) or v:IsA(&quot;PlayerScripts&quot;) or v:IsA(&quot;StarterGear&quot;) then
&#9;&#9;&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;Folder&quot; referent=&quot;RBX&apos;..refs[Instance.new(&quot;Folder&quot;)]..&apos;&quot;&gt;\
&#9;&lt;Properties&gt;\
&#9;&lt;string name=&quot;Name&quot;&gt;&apos;..v.ClassName..&apos;&lt;/string&gt;\
&#9;&lt;/Properties&gt;&apos;)
&#9;&#9;&#9;&#9;&#9;&#9;for _,c in pairs(v:GetChildren()) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;writeXML(c)
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;t_ins(buffer,&quot;\n&lt;/Item&gt;&quot;)
&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;writeXML(v)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;t_ins(buffer,&quot;\n&lt;/Item&gt;&quot;)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;if inst == game then
&#9;&#9;&#9;&#9;t_ins(buffer,&apos;\n&lt;Item class=&quot;Script&quot; referent=&quot;RBX&apos;..refs[Instance.new(&quot;Folder&quot;)]..&apos;&quot;&gt;\
&#9;&lt;Properties&gt;\
&#9;&lt;string name=&quot;Name&quot;&gt;Please Read&lt;/string&gt;\
&#9;&lt;ProtectedString name=&quot;Source&quot;&gt;&apos;..[==[--[[
&#9;Thank you for using Dex SaveInstance by Moon. (Calamari edition.)
&#9;
&#9;If you cannot play the game, please try relocating any scripts in StarterPlayer elsewhere.
&#9;]]]==]..&apos;&lt;/ProtectedString&gt;\
&#9;&lt;/Properties&gt;\
&#9;&lt;/Item&gt;&apos;)
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;t_ins(buffer,&quot;\n&lt;/roblox&gt;&quot;)
&#9;&#9;&#9;
&#9;&#9;&#9;if Serializer.Settings.DecompileMode &gt; 0 and decompile then
&#9;&#9;&#9;&#9;if inst == game and #Serializer.Settings.DecompileIgnore &gt; 0 then
&#9;&#9;&#9;&#9;&#9;local ignoreServices = {}
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(Serializer.Settings.DecompileIgnore) do t_ins(ignoreServices,game:GetService(v)) end
&#9;&#9;&#9;&#9;&#9;for i = #toDecompile,1,-1 do
&#9;&#9;&#9;&#9;&#9;&#9;for _,serv in pairs(ignoreServices) do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if toDecompile[i][1]:IsDescendantOf(serv) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;table.remove(toDecompile,i)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;break
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;if Serializer.Settings.DecompileMode == 1 then
&#9;&#9;&#9;&#9;&#9;for i,v in pairs(toDecompile) do
&#9;&#9;&#9;&#9;&#9;&#9;local decstr = &quot;-- This could not decompile&quot;
&#9;&#9;&#9;&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;&#9;&#9;    if (false) then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;decstr = tostring(v[1]):gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;decstr = &quot;&quot; 
&#9;                        end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;buffer[v[2]] = decstr
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;elseif Serializer.Settings.DecompileMode == 2 then
&#9;&#9;&#9;&#9;&#9;local left = #toDecompile
&#9;&#9;&#9;&#9;&#9;local totalScripts = left
&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;local statusGui = Instance.new(&quot;ScreenGui&quot;)
&#9;&#9;&#9;&#9;&#9;local statusText = Instance.new(&quot;TextLabel&quot;,statusGui)
&#9;&#9;&#9;&#9;&#9;statusText.BackgroundTransparency = 1
&#9;&#9;&#9;&#9;&#9;statusText.TextColor3 = Color3.new(1,1,1)
&#9;&#9;&#9;&#9;&#9;statusText.Position = UDim2.new(0,0,0,0)
&#9;&#9;&#9;&#9;&#9;statusText.Size = UDim2.new(1,0,0,36)
&#9;&#9;&#9;&#9;&#9;statusText.TextSize = 32
&#9;&#9;&#9;&#9;&#9;statusText.Font = Enum.Font.Code
&#9;&#9;&#9;&#9;&#9;statusText.Text = left..&quot;/&quot;..totalScripts..&quot; Scripts Left&quot;
&#9;&#9;&#9;&#9;&#9;statusGui.Parent = gethui()
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;local function doDec(scr)
&#9;&#9;&#9;&#9;&#9;&#9;local thread = coroutine.running()
&#9;&#9;&#9;&#9;&#9;&#9;local decompiled = false
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;tostring(scr,&quot;unluac&quot;,function(scr,err)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;decompiled = true
&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(thread,scr,err)
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;wait(Serializer.Settings.DecompileTimeout)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;if decompiled then return end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;coroutine.resume(thread,nil,&quot;timeout&quot;)
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;&#9;return coroutine.yield()
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;
&#9;&#9;&#9;&#9;&#9;for i = 1,Serializer.Settings.UnluacMaxThreads do
&#9;&#9;&#9;&#9;&#9;&#9;spawn(function()
&#9;&#9;&#9;&#9;&#9;&#9;&#9;while #toDecompile &gt; 0 do
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local nextScript = table.remove(toDecompile)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;local scr,err = doDec(nextScript[1])
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;if scr then
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;buffer[nextScript[2]] = scr:gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;buffer[nextScript[2]] = &quot;-- This could not decompile because &quot;..(err or &quot;&quot;):gsub(&quot;[&apos;\&quot;&lt;&gt;&amp;]&quot;,xmlReplace)
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;left = left - 1
&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;statusText.Text = left..&quot;/&quot;..totalScripts..&quot; Scripts Left&quot;
&#9;&#9;&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;&#9;end)
&#9;&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;&#9;&#9;while left &gt; 0 do game:GetService(&quot;RunService&quot;).RenderStepped:wait() end
&#9;&#9;&#9;&#9;&#9;statusGui:Destroy()
&#9;&#9;&#9;&#9;end
&#9;&#9;&#9;end
&#9;&#9;&#9;
&#9;&#9;&#9;pcall(function()
&#9;&#9;&#9;&#9;_writefile(name..(inst == game and &quot;.rbxlx&quot; or &quot;.rbxmx&quot;),(t_concat(buffer)), name, &quot;Roblox XML Files(*.rbxlx, *.rbxmx)\0 * .rbxlx; *.rbxmx\0All Files\0 * .*\0&quot;,(inst == game and &quot;.rbxlx&quot; or &quot;.rbxmx&quot;))
&#9;&#9;&#9;end)
&#9;&#9;&#9;
&#9;&#9;&#9;resetState()
&#9;&#9;end
&#9;}
&#9;
&#9;return Serializer
&#9;end
&#9;
&#9;pcall(function()
&#9;&#9;local initialized = false
&#9;&#9;local serializer = SerializerModule()
&#9;&#9;
&#9;&#9;local function init()
&#9;&#9;local startup = {
&#9;&#9;&#9;API = fetchAPI(),
&#9;&#9;&#9;WriteFile = dexWriteFile,
&#9;&#9;&#9;GetNilInstances = nil,
&#9;&#9;&#9;OldIndex = oldindex
&#9;&#9;}
&#9;&#9;serializer.Init(startup)
&#9;&#9;initialized = true
&#9;&#9;end
&#9;&#9;
&#9;&#9;if not initialized then
&#9;&#9;init()
&#9;&#9;end
&#9;&#9;
&#9;&#9;SaveInstance = serializer.SaveInstance
&#9;&#9;saveinstance = serializer.SaveInstance
&#9;end)
end

local SelectionChanged = ExplorerPanel:WaitForChild(&quot;SelectionChanged&quot;)
local GetSelection = ExplorerPanel:WaitForChild(&quot;GetSelection&quot;)
local SetSelection = ExplorerPanel:WaitForChild(&quot;SetSelection&quot;)

local Player = game:GetService(&quot;Players&quot;).LocalPlayer
local Mouse = Player:GetMouse()

local CurrentWindow = &quot;_BLANK&quot;
local Windows = {
&#9;Explorer = {
&#9;&#9;ExplorerPanel,
&#9;&#9;PropertiesFrame
&#9;},
&#9;Settings = {SettingsPanel},
&#9;SaveMap = {SaveMapWindow},
&#9;Remotes = {RemoteDebugWindow},
&#9;About = {AboutPanel},
}

function switchWindows(wName,over)
&#9;if CurrentWindow == wName and not over then return end
&#9;
&#9;local count = 0
&#9;
&#9;for i,v in pairs(Windows) do
&#9;&#9;count = 0
&#9;&#9;if i ~= wName then
&#9;&#9;&#9;for _,c in pairs(v) do c:TweenPosition(UDim2.new(1, 30, count * 0.5, count * 36), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true) count = count + 1 end
&#9;&#9;end
&#9;end
&#9;
&#9;count = 0
&#9;
&#9;if Windows[wName] then
&#9;&#9;for _,c in pairs(Windows[wName]) do c:TweenPosition(UDim2.new(1, -300, count * 0.5, count * 36), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true) count = count + 1 end
&#9;end
&#9;
&#9;if wName ~= &quot;_BLANK&quot; then
&#9;&#9;CurrentWindow = wName
&#9;&#9;for i,v in pairs(SlideFrame:GetChildren()) do
&#9;&#9;&#9;v.BackgroundTransparency = 1
&#9;&#9;&#9;v.Icon.ImageColor3 = Color3.new(70/255, 70/255, 70/255)
&#9;&#9;end
&#9;&#9;if SlideFrame:FindFirstChild(wName) then
&#9;&#9;&#9;SlideFrame[wName].BackgroundTransparency = 0.5
&#9;&#9;&#9;SlideFrame[wName].Icon.ImageColor3 = Color3.new(0,0,0)
&#9;&#9;end
&#9;end
end

function toggleDex(on)
&#9;if on then
&#9;&#9;SideMenu:TweenPosition(UDim2.new(1, -330, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;OpenToggleButton:TweenPosition(UDim2.new(1,0,0,0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;switchWindows(CurrentWindow,true)
&#9;else
&#9;&#9;SideMenu:TweenPosition(UDim2.new(1, 0, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;OpenToggleButton:TweenPosition(UDim2.new(1,-40,0,0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;switchWindows(&quot;_BLANK&quot;)
&#9;end
end

local Settings = {
&#9;ClickSelect = false,
&#9;SelBox = false,
&#9;ClearProps = false,
&#9;SelectUngrouped = true,
&#9;SaveInstanceScripts = true
}

function ReturnSetting(set)
&#9;if set == &quot;ClearProps&quot; then
&#9;&#9;return Settings.ClearProps
&#9;elseif set == &quot;SelectUngrouped&quot; then
&#9;&#9;return Settings.SelectUngrouped
&#9;end
end

OpenToggleButton.MouseButton1Up:connect(function()
&#9;toggleDex(true)
end)

OpenScriptEditorButton.MouseButton1Up:connect(function()
&#9;if OpenScriptEditorButton.Active then
&#9;&#9;ScriptEditor.Visible = true
&#9;end
end)

CloseToggleButton.MouseButton1Up:connect(function()
&#9;if CloseToggleButton.Active then
&#9;&#9;toggleDex(false)
&#9;end
end)

--[[
OpenToggleButton.MouseButton1Up:connect(function()
&#9;SideMenu:TweenPosition(UDim2.new(1, -330, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;
&#9;if CurrentWindow == &quot;Explorer&quot; then
&#9;&#9;ExplorerPanel:TweenPosition(UDim2.new(1, -300, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;PropertiesFrame:TweenPosition(UDim2.new(1, -300, 0.5, 36), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;else
&#9;&#9;SettingsPanel:TweenPosition(UDim2.new(1, -300, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;end
&#9;
&#9;OpenToggleButton:TweenPosition(UDim2.new(1,0,0,0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
end)

CloseToggleButton.MouseButton1Up:connect(function()
&#9;SideMenu:TweenPosition(UDim2.new(1, 0, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;
&#9;ExplorerPanel:TweenPosition(UDim2.new(1, 30, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;PropertiesFrame:TweenPosition(UDim2.new(1, 30, 0.5, 36), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;SettingsPanel:TweenPosition(UDim2.new(1, 30, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;
&#9;OpenToggleButton:TweenPosition(UDim2.new(1,-30,0,0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
end)
--]]

--[[
ExplorerButton.MouseButton1Up:connect(function()
&#9;switchWindows(&quot;Explorer&quot;)
end)

SettingsButton.MouseButton1Up:connect(function()
&#9;switchWindows(&quot;Settings&quot;)
end)
--]]

for i,v in pairs(SlideFrame:GetChildren()) do
&#9;v.MouseButton1Click:connect(function()
&#9;&#9;switchWindows(v.Name)
&#9;end)
&#9;
&#9;v.MouseEnter:connect(function()v.BackgroundTransparency = 0.5 end)
&#9;v.MouseLeave:connect(function()if CurrentWindow~=v.Name then v.BackgroundTransparency = 1 end end)
end

--[[
ExplorerButton.MouseButton1Up:connect(function()
&#9;if CurrentWindow ~= &quot;Explorer&quot; then
&#9;&#9;CurrentWindow = &quot;Explorer&quot;
&#9;&#9;
&#9;&#9;ExplorerPanel:TweenPosition(UDim2.new(1, -300, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;PropertiesFrame:TweenPosition(UDim2.new(1, -300, 0.5, 36), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;SettingsPanel:TweenPosition(UDim2.new(1, 0, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;end
end)

SettingsButton.MouseButton1Up:connect(function()
&#9;if CurrentWindow ~= &quot;Settings&quot; then
&#9;&#9;CurrentWindow = &quot;Settings&quot;
&#9;&#9;
&#9;&#9;ExplorerPanel:TweenPosition(UDim2.new(1, 0, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;PropertiesFrame:TweenPosition(UDim2.new(1, 0, 0.5, 36), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;&#9;SettingsPanel:TweenPosition(UDim2.new(1, -300, 0, 0), &quot;Out&quot;, &quot;Quad&quot;, 0.5, true)
&#9;end
end)
--]]

function createSetting(name,interName,defaultOn)
&#9;local newSetting = SettingTemplate:Clone()
&#9;newSetting.Position = UDim2.new(0,0,0,#SettingList:GetChildren() * 60)
&#9;newSetting.SName.Text = name
&#9;
&#9;local function toggle(on)
&#9;&#9;if on then
&#9;&#9;&#9;newSetting.Change.Bar:TweenPosition(UDim2.new(0,32,0,-2),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
&#9;&#9;&#9;newSetting.Change.OnBar:TweenSize(UDim2.new(0,34,0,15),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
&#9;&#9;&#9;newSetting.Status.Text = &quot;On&quot;
&#9;&#9;&#9;Settings[interName] = true
&#9;&#9;else
&#9;&#9;&#9;newSetting.Change.Bar:TweenPosition(UDim2.new(0,-2,0,-2),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
&#9;&#9;&#9;newSetting.Change.OnBar:TweenSize(UDim2.new(0,0,0,15),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
&#9;&#9;&#9;newSetting.Status.Text = &quot;Off&quot;
&#9;&#9;&#9;Settings[interName] = false
&#9;&#9;end
&#9;end&#9;
&#9;
&#9;newSetting.Change.MouseButton1Click:connect(function()
&#9;&#9;toggle(not Settings[interName])
&#9;end)
&#9;
&#9;newSetting.Visible = true
&#9;newSetting.Parent = SettingList
&#9;
&#9;if defaultOn then
&#9;&#9;toggle(true)
&#9;end
end

createSetting(&quot;Click part to select&quot;,&quot;ClickSelect&quot;,false)
createSetting(&quot;Selection Box&quot;,&quot;SelBox&quot;,false)
createSetting(&quot;Clear property value on focus&quot;,&quot;ClearProps&quot;,false)
createSetting(&quot;Select ungrouped models&quot;,&quot;SelectUngrouped&quot;,true)
createSetting(&quot;SaveInstance decompiles scripts&quot;,&quot;SaveInstanceScripts&quot;,true)

--[[
ClickSelectOption.MouseButton1Up:connect(function()
&#9;if Settings.ClickSelect then
&#9;&#9;Settings.ClickSelect = false
&#9;&#9;ClickSelectOption.Text = &quot;OFF&quot;
&#9;else
&#9;&#9;Settings.ClickSelect = true
&#9;&#9;ClickSelectOption.Text = &quot;ON&quot;
&#9;end
end)

SelectionBoxOption.MouseButton1Up:connect(function()
&#9;if Settings.SelBox then
&#9;&#9;Settings.SelBox = false
&#9;&#9;SelectionBox.Adornee = nil
&#9;&#9;SelectionBoxOption.Text = &quot;OFF&quot;
&#9;else
&#9;&#9;Settings.SelBox = true
&#9;&#9;SelectionBoxOption.Text = &quot;ON&quot;
&#9;end
end)

ClearPropsOption.MouseButton1Up:connect(function()
&#9;if Settings.ClearProps then
&#9;&#9;Settings.ClearProps = false
&#9;&#9;ClearPropsOption.Text = &quot;OFF&quot;
&#9;else
&#9;&#9;Settings.ClearProps = true
&#9;&#9;ClearPropsOption.Text = &quot;ON&quot;
&#9;end
end)

SelectUngroupedOption.MouseButton1Up:connect(function()
&#9;if Settings.SelectUngrouped then
&#9;&#9;Settings.SelectUngrouped = false
&#9;&#9;SelectUngroupedOption.Text = &quot;OFF&quot;
&#9;else
&#9;&#9;Settings.SelectUngrouped = true
&#9;&#9;SelectUngroupedOption.Text = &quot;ON&quot;
&#9;end
end)
--]]

local function getSelection()
&#9;local t = GetSelection:Invoke()
&#9;if t and #t &gt; 0 then
&#9;&#9;return t[1]
&#9;else
&#9;&#9;return nil
&#9;end
end

Mouse.Button1Down:connect(function()
&#9;if CurrentWindow == &quot;Explorer&quot; and Settings.ClickSelect then
&#9;&#9;local target = Mouse.Target
&#9;&#9;if target then
&#9;&#9;&#9;SetSelection:Invoke({target})
&#9;&#9;end
&#9;end
end)

SelectionChanged.Event:connect(function()
&#9;if Settings.SelBox then
&#9;&#9;local success,err = pcall(function()
&#9;&#9;&#9;local selection = getSelection()
&#9;&#9;&#9;SelectionBox.Adornee = selection
&#9;&#9;end)
&#9;&#9;if err then
&#9;&#9;&#9;SelectionBox.Adornee = nil
&#9;&#9;end
&#9;end
end)

SettingsListener.OnInvoke = ReturnSetting

-- Map Copier

function createMapSetting(obj,interName,defaultOn)
&#9;local function toggle(on)
&#9;&#9;if on then
&#9;&#9;&#9;obj.Change.Bar:TweenPosition(UDim2.new(0,32,0,-2),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
&#9;&#9;&#9;obj.Change.OnBar:TweenSize(UDim2.new(0,34,0,15),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
&#9;&#9;&#9;obj.Status.Text = &quot;On&quot;
&#9;&#9;&#9;SaveMapSettings[interName] = true
&#9;&#9;else
&#9;&#9;&#9;obj.Change.Bar:TweenPosition(UDim2.new(0,-2,0,-2),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
&#9;&#9;&#9;obj.Change.OnBar:TweenSize(UDim2.new(0,0,0,15),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
&#9;&#9;&#9;obj.Status.Text = &quot;Off&quot;
&#9;&#9;&#9;SaveMapSettings[interName] = false
&#9;&#9;end
&#9;end&#9;
&#9;
&#9;obj.Visible = true
&#9;obj.Parent = SaveMapSettingFrame
&#9;
&#9;if defaultOn then
&#9;&#9;toggle(true)
&#9;end
end

function createCopyWhatSetting(serv)
&#9;if SaveMapSettings.CopyWhat[serv] then
&#9;&#9;local newSetting = SaveMapCopyTemplate:Clone()
&#9;&#9;newSetting.Position = UDim2.new(0,0,0,#SaveMapCopyList:GetChildren() * 22 + 5)
&#9;&#9;newSetting.Info.Text = serv
&#9;&#9;
&#9;&#9;local function toggle(on)
&#9;&#9;&#9;if on then
&#9;&#9;&#9;&#9;newSetting.Change.enabled.Visible = true
&#9;&#9;&#9;&#9;SaveMapSettings.CopyWhat[serv] = true
&#9;&#9;&#9;else
&#9;&#9;&#9;&#9;newSetting.Change.enabled.Visible = false
&#9;&#9;&#9;&#9;SaveMapSettings.CopyWhat[serv] = false
&#9;&#9;&#9;end
&#9;&#9;end&#9;
&#9;&#9;
&#9;&#9;newSetting.Visible = true
&#9;&#9;newSetting.Parent = SaveMapCopyList
&#9;end
end

createCopyWhatSetting(&quot;Workspace&quot;)

SaveMapName.Text = tostring(game.PlaceId)..&quot;MapCopy&quot;

SaveMapButton.MouseButton1Click:connect(function()
&#9;if SaveInstance then
&#9;&#9;SaveInstance(game,SaveMapName.Text)
&#9;&#9;SaveMapButton.Text = &quot;The map has been saved&quot;
&#9;&#9;wait(5)
&#9;&#9;SaveMapButton.Text = &quot;Save&quot;
&#9;else
&#9;&#9;SaveMapButton.Text = &quot;The map could not be saved :(&quot;
&#9;&#9;wait(5)
&#9;&#9;SaveMapButton.Text = &quot;Save&quot;
&#9;end
end)

-- End Copier

wait()

IntroFrame:TweenPosition(UDim2.new(1,-301,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)

switchWindows(&quot;Explorer&quot;)

wait(1)

SideMenu.Visible = true

for i = 0,1,0.1 do
&#9;IntroFrame.BackgroundTransparency = i
&#9;IntroFrame.Main.BackgroundTransparency = i
&#9;IntroFrame.Slant.ImageTransparency = i
&#9;IntroFrame.Title.TextTransparency = i
&#9;IntroFrame.Version.TextTransparency = i
&#9;IntroFrame.Creator.TextTransparency = i
&#9;wait()
end

IntroFrame.Visible = false

SlideFrame:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
OpenScriptEditorButton:TweenPosition(UDim2.new(0,0,0,150),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
CloseToggleButton:TweenPosition(UDim2.new(0,0,0,180),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
Slant:TweenPosition(UDim2.new(0,0,0,210),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)

wait(0.5)

for i = 1,0,-0.1 do
&#9;OpenScriptEditorButton.Icon.ImageTransparency = i
&#9;CloseToggleButton.TextTransparency = i
&#9;wait()
end

CloseToggleButton.Active = true
CloseToggleButton.AutoButtonColor = true

OpenScriptEditorButton.Active = true
OpenScriptEditorButton.AutoButtonColor = true</ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="Frame" referent="RBXD9CEC41D27CD436FA0BB9E231A16FC41">
			<Properties>
				<bool name="Active">true</bool>
				<Vector2 name="AnchorPoint">
					<X>0</X>
					<Y>0</Y>
				</Vector2>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<token name="AutomaticSize">0</token>
				<Color3 name="BackgroundColor3">
					<R>0.913725555</R>
					<G>0.913725555</G>
					<B>0.913725555</B>
				</Color3>
				<float name="BackgroundTransparency">0</float>
				<Color3 name="BorderColor3">
					<R>0.58431375</R>
					<G>0.58431375</G>
					<B>0.58431375</B>
				</Color3>
				<token name="BorderMode">0</token>
				<int name="BorderSizePixel">0</int>
				<bool name="ClipsDescendants">false</bool>
				<bool name="Draggable">true</bool>
				<int name="LayoutOrder">0</int>
				<string name="Name">SaveInstance</string>
				<Ref name="NextSelectionDown">null</Ref>
				<Ref name="NextSelectionLeft">null</Ref>
				<Ref name="NextSelectionRight">null</Ref>
				<Ref name="NextSelectionUp">null</Ref>
				<UDim2 name="Position">
					<XS>0.300000012</XS>
					<XO>0</XO>
					<YS>0.300000012</YS>
					<YO>0</YO>
				</UDim2>
				<Ref name="RootLocalizationTable">null</Ref>
				<float name="Rotation">0</float>
				<bool name="Selectable">false</bool>
				<Ref name="SelectionImageObject">null</Ref>
				<UDim2 name="Size">
					<XS>0</XS>
					<XO>350</XO>
					<YS>0</YS>
					<YO>20</YO>
				</UDim2>
				<token name="SizeConstraint">0</token>
				<int64 name="SourceAssetId">-1</int64>
				<token name="Style">0</token>
				<BinaryString name="Tags"></BinaryString>
				<bool name="Visible">false</bool>
				<int name="ZIndex">2</int>
			</Properties>
			<Item class="TextLabel" referent="RBXB820E14E8F924EDD9452A14A3E104DD0">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.639215708</R>
						<G>0.635294139</G>
						<B>0.647058845</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">3</token>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<string name="Name">Title</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">false</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text">Save Instance</string>
					<Color3 name="TextColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<bool name="TextScaled">false</bool>
					<float name="TextSize">14</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">false</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">true</bool>
					<int name="ZIndex">2</int>
				</Properties>
			</Item>
			<Item class="Frame" referent="RBXF3F19F88480A4A00B9C9145B73E43210">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">0.100000001</float>
					<Color3 name="BorderColor3">
						<R>0.749019623</R>
						<G>0.749019623</G>
						<B>0.749019623</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">MainWindow</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>200</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="TextButton" referent="RBX1E79ABC676334EE99E51CBB70ABBF2ED">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Save</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.075000003</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>-40</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.400000006</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Save</string>
						<Color3 name="TextColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextLabel" referent="RBXCB7AAC8E73F441C483FEA86BE2F36A6B">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Desc</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>40</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">This will save an instance to your PC. Type in the name for your instance. (.rbxmx will be added automatically.)</string>
						<Color3 name="TextColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBXC9C2A8FB63FF449DA698FB11F52141DC">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Cancel</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.524999976</XS>
							<XO>0</XO>
							<YS>1</YS>
							<YO>-40</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.400000006</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Cancel</string>
						<Color3 name="TextColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextBox" referent="RBXEC29DF29AB2F4A18896A3073DDBE752B">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.200000003</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClearTextOnFocus">true</bool>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="MultiLine">false</bool>
						<string name="Name">FileName</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<Color3 name="PlaceholderColor3">
							<R>0.699999988</R>
							<G>0.699999988</G>
							<B>0.699999988</B>
						</Color3>
						<string name="PlaceholderText"></string>
						<UDim2 name="Position">
							<XS>0.075000003</XS>
							<XO>0</XO>
							<YS>0.400000006</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<bool name="ShowNativeInput">true</bool>
						<UDim2 name="Size">
							<XS>0.850000024</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>30</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<bool name="TextEditable">true</bool>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
				<Item class="TextButton" referent="RBX7E618596437D461A9EC55365B7EABB03">
					<Properties>
						<bool name="Active">true</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">0.600000024</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">SaveObjects</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.075000003</XS>
							<XO>0</XO>
							<YS>0.625</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">true</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>20</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text"></string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">18</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">2</int>
					</Properties>
					<Item class="TextLabel" referent="RBX2AA7962A9B33407498A9217895307458">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>0.380392194</R>
								<G>0.380392194</G>
								<B>0.380392194</B>
							</Color3>
							<float name="BackgroundTransparency">0.400000006</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">0</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">3</token>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">enabled</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>3</XO>
								<YS>0</YS>
								<YO>3</YO>
							</UDim2>
							<bool name="RichText">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>14</XO>
								<YS>0</YS>
								<YO>14</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text"></string>
							<Color3 name="TextColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">2</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
				<Item class="TextLabel" referent="RBXC942FB7821064478A3085AB982C970B2">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">3</token>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Desc2</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.075000003</XS>
							<XO>30</XO>
							<YS>0.625</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.925000012</XS>
							<XO>-30</XO>
							<YS>0</YS>
							<YO>20</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Save &quot;Object&quot; type values</string>
						<Color3 name="TextColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
</roblox>