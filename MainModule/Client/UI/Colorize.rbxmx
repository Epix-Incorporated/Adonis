<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="ModuleScript" referent="RBXD71C70FBDF4B49F086AAF6446BE520D8">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<Content name="LinkedSource"><null></null></Content>
			<string name="Name">Colorize</string>
			<string name="ScriptGuid">{DEDB902C-524D-428E-960D-26616B5E97ED}</string>
			<ProtectedString name="Source"><![CDATA[--// You can use modules like this to alter guis without making a new theme
--// This makes it so you don't need to make an entire gui folder n all that
--// If the theme is set to this module, it will use the default guis
--// The default requested gui will be passed to and modified by this module
--// before it runs. This lets you change things in anyway you want without
--// needing to change the guis by hand or their code.
--// This is also generally safer and update proof.
--// Alternatively if this returns anything, it will be assumed
--// that this module created and registered it's own screenguis
--// It will assume that any return is from those guis
--// For instance the YesNoPrompt returns Yes or No depending on
--// what button the player presses.
--// Any non-nil return will be returned by the script
--// IF YOU MAKE YOUR OWN SCREENGUIS IT IS UP TO YOU TO REGISTER THEM!
--// If you plan to make your own guis you must return something from this module
--// and you must register them using client.UI.Register(ScreenGuiObjectHere)
--// Register will return gTable and gIndex, when destroying your gui
--// use gTable:Destroy(); If your gui needs to be removed in a special way
--// you can define a custom destroy function by doing
--// gTable.CustomDestroy = function() doStuffHere end

--// If this module returns a ScreenGui object, the script will use that as the gui and 
--// take care of registering and running the code module n all that.
--// RETURNED SCREENGUI MUST CONTAIN A "Config" FOLDER; 
--// If no Code module is given the default code module will be used.

--[[
	~= EXAMPLE CODE =~
	return function(gui,gTable,guiData)
		local name = gTable.Name
		if name == "YesNoPrompt" then
			local new = Instance.new("ScreenGui")
			local frame = Instance.new("Frame",new)
			frame.Size = UDim2.new(0,400,0,400)
			local yes = Instance.new("TextButton",frame)
			yes.Size = UDim2.new(0.5,0,1,0)
			yes.Text = "Yes"
			local no = yes:Clone()
			no.Text = "No"
			no.Position = UDim2.new(0.5,0,0,0)
			
			local gTable,gIndex = client.UI.Register(new)
			
			local ans
			local waiting = true
			
			gTable.CustomDestroy = function()
				waiting = false
			end
			
			yes.MouseButton1Click:Connect(function()
				ans = "Yes"
				gTable:Destroy()
			end)
			
			no.MouseButton1Click:Connect(function()
				ans = "No"
				gTable:Destroy()
			end)
			
			repeat wait() until ans or not waiting  --// Wait until answer
			return ans or false
		end
	end
	
--]]

service = nil
client = nil

return function(gui: ScreenGui, guiData, gTable)
	local TWEEN_TIME = 2
	local SEQUENCE = {
		Color3.fromRGB(255, 85, 88), 
		Color3.fromRGB(78, 140, 255), 
		Color3.fromRGB(78, 255, 149)
	}
	local CLASSES = {
		Frame = true;
		TextBox = true;
		TextLabel = true;
		TextButton = true;
		ImageLabel = true;
		ImageButton = true; 
		ScrollingFrame = true;
	}
	
	local contents = {}
	local OrgColors = {}
	
	local function getCont(obj)
		for _, v in obj:GetChildren() do 
			if CLASSES[v.ClassName] then
				local OrgColor = {}
				OrgColor.Background = v.BackgroundColor3
				if v:IsA("ImageLabel") or v:IsA("ImageButton") then 
					OrgColor.Image = v.ImageColor3 
				end
				OrgColors[v] = OrgColor
				table.insert(contents, v)
				getCont(v)
			end
		end
	end
	
	getCont(gui)
	
	if gTable.Name == "List" then
		gui.Drag.Main.BackgroundTransparency = 0
	end
	
	local function tweenToColor(color1, color2, time)
		local Info = TweenInfo.new(time, Enum.EasingStyle.Linear)
		for _, v in contents do
			local orgcolor = OrgColors[v]
			v.BackgroundColor3 = color1:lerp(orgcolor.Background, 0.75)
			if orgcolor.Image then
				v.ImageColor3 = color1:lerp(orgcolor.Image, 0.75)
				service.TweenService:Create(v, Info, {
					BackgroundColor3 = color2:lerp(orgcolor.Background, 0.75),
					ImageColor3 = color2:lerp(orgcolor.Image, 0.75)
				}):Play()
			else
				service.TweenService:Create(v, Info, {
					BackgroundColor3 = color2:lerp(orgcolor.Background, 0.75)
				}):Play()
			end
		end
		task.wait(time)
	end
	
	service.TrackTask(`Thread: Colorize_{gTable.Name}`,function()
		repeat 
			for i in SEQUENCE do
				local one, two = SEQUENCE[i], SEQUENCE[i+1] or SEQUENCE[1]
				
				tweenToColor(one, two, TWEEN_TIME)
			end
		until not task.wait(if gTable.Active then 0 else 1) and gTable.Destroyed
		
	end)
end]]></ProtectedString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="StringValue" referent="RBX37E05A28E4254A29A2D1C2A3769B245B">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Base_Theme</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<string name="Value">Default</string>
			</Properties>
		</Item>
	</Item>
</roblox>